[{"path":"https://ibarraespinosa.github.io/rtorf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sergio Ibarra-Espinosa. Author, maintainer. Lei Hu. Contributor.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schuldt, et al. Multi-laboratory compilation atmospheric methane data period 1983-2021.NOAA -  Global Monitoring Laboratory, 10.25925/20230301, https://gml.noaa.gov/ccgg/obspack/citation.php,  2014. Ibarra-Espinosa S (2024). rtorf: 'rtorf' Obspack GLOBALView+. R package version 0.9.2,  https://noaa-gml.github.io/rtorf/, https://github.com/noaa-gml/rtorf.","code":"@Article{,   title = {Multi-laboratory compilation of atmospheric methane data for the period 1983-2021},   journal = {NOAA -  Global Monitoring Laboratory},   author = {Kenneth N. Schuldt and John Mund and Tuula Aalto and James B. Abshire and Ken Aikin and Grant Allen and Arlyn Andrews and Francesco Apadula and Sabrina Arnold and Bianca Baier and Peter Bakwin and Jakub Bartyzel and Gilles Bentz and Peter Bergamaschi and Andreas Beyersdorf and Tobias Biermann and Sebastien C. Biraud and Pierre-Eric Blanc and Harald Boenisch and David Bowling and Gordon Brailsford and Willi A. Brand and Dominik Brunner and Thao P. Bui and Lukas Bäni and Francescopiero Calzolari and Cecilia S. Chang and Huilin Chen and Gao Chen and Lukasz Chmura and Shane Clark and Sites Climadat and Aurelie Colomb and Roisin Commane and Lino Condori and Franz Conen and Sébastien Conil and Cédric Couret and Paolo Cristofanelli and Emilio Cuevas and Roger Curcoll and Bruce Daube and Kenneth J. Davis and Martine {De Mazière} and Stephan {De Wekker} and Jonathan M. Dean-Day and Julian Della Coletta and Marc Delmotte and Tatiana Di Iorio and Elizabeth DiGangi and Joshua P. DiGangi and Russell Dickerson and James W. Elkins and Michael Elsasser and Lukas Emmenegger and Shuangxi Fang and Marc L. Fischer and Grant Forster and James France and Arnoud Frumau and Marta Fuente-Lastra and Michal Galkowski and Luciana V. Gatti and Torsten Gehrlein and Christoph Gerbig and Francois Gheusi and Emanuel Gloor and Daisuke Goto and Tim Griffis and Samuel Hammer and Thomas F. Hanisco and Chad Hanson and László Haszpra and Juha Hatakka and Martin Heimann and Michal Heliasz and Daniela Heltai and Stephan Henne and Arjan Hensen and Christian Hermans and Ove Hermansen and Eric Hintsa and Antje Hoheisel and Jutta Holst and Laura T. Iraci and Viktor Ivakhov and Daniel A. Jaffe and Armin Jordan and Warren Joubert and Hui-Yun Kang and Anna Karion and Stephan R. Kawa and Victor Kazan and Ralph F. Keeling and Petri Keronen and Jooil Kim and Jörg Klausen and Tobias Kneuer and Mi-Young Ko and Pasi Kolari and Katerina Kominkova and Eric Kort and Elena Kozlova and Paul B. Krummel and Dagmar Kubistin and Susan S. Kulawik and Nicolas Kumps and Casper Labuschagne and David H. Lam and Xin Lan and Ray L. Langenfelds and Andrea Lanza and Olivier Laurent and Tuomas Laurila and Thomas Lauvaux and Jost Lavric and Beverly E. Law and Choong-Hoon Lee and Haeyoung Lee and John Lee and Irene Lehner and Kari Lehtinen and Reimo Leppert and Ari Leskinen and Markus Leuenberger and W.H. Leung and Ingeborg Levin and Janne Levula and John Lin and Matthias Lindauer and Anders Lindroth and Zoe M. Loh and Morgan Lopez and Chris R. Lunder and Mikaell O. Löfvenius and Toshinobu Machida and Ivan Mammarella and Giovanni Manca and Andrew Manning and Alistair Manning and Michal V. Marek and Per Marklund and Josette E. Marrero and Damien Martin and Melissa Y. Martin and Giordane A. Martins and Hidekazu Matsueda and Kathryn McKain and Harro Meijer and Frank Meinhardt and Lynne Merchant and Jean-Marc Metzger and N. Mihalopoulos and Natasha L. Miles and Charles E. Miller and John B. Miller and Logan Mitchell and Vanessa Monteiro and Stephen Montzka and Fred Moore and Heiko Moossen and Eric Morgan and Josep-Anton Morgui and Shinji Morimoto and J. W. Munger and David Munro and Mathew Mutuku and Cathrine L. Myhre and Meelis Mölder and Jennifer Müller-Williams and Shin-Ichiro Nakaoka and Jaroslaw Necki and Sally Newman and Sylvia Nichol and Euan Nisbet and Yosuke Niwa and David M. Njiru and Steffen M. Noe and Yukihiro Nojiri and Simon O'Doherty and Florian Obersteiner and Bill Paplawsky and Caroline L. Parworth and Jeff Peischl and Olli Peltola and Wouter Peters and Carole Philippon and Salvatore Piacentino and Jean M. Pichon and Penelope Pickers and Steve Piper and Joseph Pitt and Christian Plass-Dülmer and Stephen M. Platt and Steve Prinzivalli and Michel Ramonet and Ramon Ramos and Xinrong Ren and Enrique Reyes-Sanchez and Scott J. Richardson and Louis-Jeremy Rigouleau and Haris Riris and Pedro P. Rivas and Michael Rothe and Yves-Alain Roulet and Thomas Ryerson and Ju-Mee Ryoo and Maryann Sargent and Motoki Sasakawa and Bert Scheeren and Martina Schmidt and Tanja Schuck and Marcus Schumacher and Jennifer Seibel and Thomas Seifert and Mahesh K. Sha and Paul Shepson and Michael Shook and Christopher D. Sloop and Paul D. Smith and Gerard Spain and Jason M. St. Clair and David Steger and Martin Steinbacher and Britton Stephens and Colm Sweeney and Lise L. Sørensen and Risto Taipale and Shinya Takatsuji and Pieter Tans and Kirk Thoning and Helder Timas and Margaret Torn and Pamela Trisolino and Jocelyn Turnbull and Alex Vermeulen and Brian Viner and Gabriela Vitkova and Stephen Walker and Andrew Watson and Ray Weiss and Dietmar Weyrauch and Steven C. Wofsy and Justin Worsey and Doug Worthy and Irène Xueref-Remy and Emma L. Yates and Dickon Young and Camille Yver-Kwok and Sönke Zaehle and Andreas Zahn and Christoph Zellweger and Miroslaw Zimnoch and Rodrigo A. {de Souza} and Alcide G. di Sarra and Danielle {van Dinther} and Pim {van den Bulk}},   year = {2024},   url = {https://gml.noaa.gov/ccgg/obspack/citation.php},   doi = {10.25925/20230301}, } @Manual{,   title = {rtorf: 'rtorf' Obspack GLOBALView+},   author = {Sergio Ibarra-Espinosa},   year = {2024},   note = {R package version 0.9.2,  https://noaa-gml.github.io/rtorf/},   url = {https://github.com/noaa-gml/rtorf}, }"},{"path":"https://ibarraespinosa.github.io/rtorf/index.html","id":"r-tools-for-obspack-footprints-and-receptors-rtorf","dir":"","previous_headings":"","what":"rtorf Obspack GLOBALView+","title":"rtorf Obspack GLOBALView+","text":"GitHub commit activity   NOAA Obspack collection green house gases observations rtorf depends data.table, basically parallel C, can installed machine.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/index.html","id":"installation","dir":"","previous_headings":"","what":"installation","title":"rtorf Obspack GLOBALView+","text":"","code":"remotes::install_github(\"noaa-gml/rtorf\") library(rtorf) library(data.table)"},{"path":"https://ibarraespinosa.github.io/rtorf/index.html","id":"obspack-summary","dir":"","previous_headings":"","what":"ObsPack summary","title":"rtorf Obspack GLOBALView+","text":"first step consists constructing summary ObsPack. required read data, also, identify agl, present file names. function returns data.frame. Optionally, user can indicate path store data.frame. obs_summary also prints summary data. second argument categories, default includes categories shown , account files. summary data.frame contains columns id full path file, name name relative path file, n just id, sector tower, column agl indicates agl indicated name file available. read documentation function, user must run ?obs_summary. example reads text files updated read NetCDF 362 files ObsPack directory. printed information also shows total bottom, sum individual file sector. ensure sum files equal total number files found, shown top. furthermore, printed information also shows 136 files agl explicitly mentioned name file.","code":"categories <- c(   \"aircraft-pfp\",   \"aircraft-insitu\",   \"surface-insitu\",   \"aircore\",   \"surface-pfp\",   \"tower-insitu\",   \"shipboard-insitu\",   \"flask\" ) obs <- \"../../obspack_ch4_1_GLOBALVIEWplus_v4.0_2021-10-14/data/txt\" index <- obs_summary(obs = obs)"},{"path":"https://ibarraespinosa.github.io/rtorf/index.html","id":"read-data","dir":"","previous_headings":"ObsPack summary","what":"Read data","title":"rtorf Obspack GLOBALView+","text":"summary built, function obs_read read files available index file previously generated. selected category “tower-insitu”. argument verbose prints files read time, default. end, function prints total number observations type altitude (agl asl). Sometimes need information site. instance, observations start end. , added function obs_table, calculates statistics summary “time” numeric variables file name, sector, site, altitude mode. added function plot data read ObsPack. y-axis field value x-axis default time. data illustrated sorted color field site_code, default number 3 sites. argument pal define color palette, used internally imported function cptcity::cpt. First two sites ObsPack can see 2.61 million observations tower-insitu. observations made 2004 2021. identification altitude type critical. approach used consists : Identify agl name tile. agl present, search fill_values used elevation transform NA (available) agl present, agl = altitude - elevation. NA elevation, result NA agl new column added named altitude_final store agl asl Another column named type_altitude added identify agl asl. case NA altitude_final, type_altitude “available”","code":"df <- obs_read(index = index,                categories = \"tower-insitu\",                verbose = FALSE) dft <- obs_table(df) dft[site_name %in% unique(site_name)[sample(1:length(unique(dft$site_code)), 2)]] ##           site_name site_latitude site_longitude   site_country site_code ##  1: Millerville, AL       33.1759       -85.8911 United  States     GCI04 ##  2: Millerville, AL       33.1759       -85.8911 United  States     GCI04 ##  3: Millerville, AL       33.1759       -85.8911 United  States     GCI04 ##  4: Millerville, AL       33.1759       -85.8911 United  States     GCI04 ##  5: Millerville, AL       33.1759       -85.8911 United  States     GCI04 ##  6: Millerville, AL       33.1759       -85.8911 United  States     GCI04 ##  7:      Ridge Hill       51.9976          -2.54 United Kingdom       RGL ##  8:      Ridge Hill       51.9976          -2.54 United Kingdom       RGL ##  9:      Ridge Hill       51.9976          -2.54 United Kingdom       RGL ## 10:      Ridge Hill       51.9976          -2.54 United Kingdom       RGL ## 11:      Ridge Hill       51.9976          -2.54 United Kingdom       RGL ## 12:      Ridge Hill       51.9976          -2.54 United Kingdom       RGL ##         value       time time_decimal latitude longitude   stat ##  1: 1.883e-06 1507854600         2018    33.18    -85.89    min ##  2: 1.949e-06 1512750600         2018    33.18    -85.89     q1 ##  3: 1.967e-06 1517808600         2018    33.18    -85.89 median ##  4: 1.972e-06 1517782301         2018    33.18    -85.89   mean ##  5: 1.992e-06 1522740600         2018    33.18    -85.89     q3 ##  6: 2.831e-06 1527636600         2018    33.18    -85.89    max ##  7: 1.832e-06 1330014600         2012    52.00     -2.54    min ##  8: 1.930e-06 1400777100         2014    52.00     -2.54     q1 ##  9: 1.958e-06 1470645000         2017    52.00     -2.54 median ## 10: 1.966e-06 1472074215         2017    52.00     -2.54   mean ## 11: 1.991e-06 1544257800         2019    52.00     -2.54     q3 ## 12: 5.690e-06 1614123000         2021    52.00     -2.54    max ##                 timeUTC ##  1: 2017-10-13 00:30:00 ##  2: 2017-12-08 16:30:00 ##  3: 2018-02-05 05:30:00 ##  4: 2018-02-04 22:11:41 ##  5: 2018-04-03 07:30:00 ##  6: 2018-05-29 23:30:00 ##  7: 2012-02-23 16:30:00 ##  8: 2014-05-22 16:45:00 ##  9: 2016-08-08 08:30:00 ## 10: 2016-08-24 21:30:15 ## 11: 2018-12-08 08:30:00 ## 12: 2021-02-23 23:30:00 obs_plot(dt = df, time = \"time\", yfactor = 1e+09, cex = 0.5) ## Found the following sites:  ##  [1] AZV   BRZ   BSD   CRV   DEM   DVV   GCI01 GCI02 GCI03 GCI04 HUN   IGR   ## [13] KRS   LEF   MRC   NOY   RGL   SCT   SVV   TAC   VGN   WGC   WSD   YAK   ## Plotting the following sites:  ## [1] AZV BRZ"},{"path":"https://ibarraespinosa.github.io/rtorf/index.html","id":"filtering","dir":"","previous_headings":"ObsPack summary","what":"Filtering","title":"rtorf Obspack GLOBALView+","text":"ObsPack includes global observations sometimes need extract data specific region periods time. part include spatial temporal parameters filter data. year interest 2020, also included December 2019 January 2021. stage, can apply spatial filter using coordinates. filtering space time, 1.12883^{5} million observations. Towers can observations different heights. need select one site observations registered highest height. column height named altitude_final max altitude named max_altitude.","code":"north <- 80 south <- 10 west <- -170 east <- -50 max_altitude <- 8000 evening <- 14:15  yy <- 2020 df <- rbind(df[year == yy - 1 & month == 12],             df[year == yy],             df[year == yy + 1 & month == 1])  df <- df[altitude_final < max_altitude &            latitude < north &            latitude > south &            longitude < east &            longitude > west] dfa <- df[,           max(altitude_final),           by = site_code] |> unique()  names(dfa)[2] <- \"max_altitude\""},{"path":"https://ibarraespinosa.github.io/rtorf/index.html","id":"time","dir":"","previous_headings":"ObsPack summary","what":"Time","title":"rtorf Obspack GLOBALView+","text":"need start time columns. function obs_addtime adds time columns timeUTC, timeUTC_start shows start time observation timeUTC_end shows end time observation. need identify local time function add_ltime. important identifying observations evening local time. add_ltime uses two methods, first identify time difference utc identifying metadata column “site_utc2lst”. information available, aircrafts instance, local time calculated approximation based longitude: lt = UTC + longitude/15 * 60 * 60 lt local time, UTC time, longitude coordinate. , time cut every two hours. Now, identify local time select evening hours. Now 9025 observations. point can calculate averages several columns cut time. function obs_agg aggregation shown following lines code. argument gby establish function used aggregate cols, case function mean time altitude. Finally, add local time . Now 4726 observations, 4299 less observations. add column max_altitude identify max altitude site.","code":"df2 <- obs_addtime(df) ## Adding timeUTC ## Adding timeUTC_start ## Adding timeUTC_end ## Found time_interval df2$timeUTC <- cut(x = df2$timeUTC+3600,                    breaks = \"2 hour\") |>   as.character() |>   as.POSIXct(tz = \"UTC\") df3 <- obs_addltime(df2) ## Found site_utc2lst df3 <- df3[lh %in% evening] df4 <- obs_agg(dt = df3,                gby = \"mean\",                cols = c(\"value\",                         \"latitude\",                         \"longitude\",                         \"type_altitude\",                         \"dif_time\",                         \"year_end\",                         \"site_utc2lst\"),                verbose = FALSE,                byalt = TRUE) ## Detecting dif_time. Adding ending times df5 <- obs_addltime(df4) ## Found site_utc2lst df5[,     max_altitude := max(altitude_final),     by = site_code] df5[,     c(\"site_code\",       \"altitude_final\",       \"max_altitude\")] |> unique() ##     site_code altitude_final max_altitude ##  1:       CRV             17           32 ##  2:       CRV             32           32 ##  3:       CRV              5           32 ##  4:       LEF            122          396 ##  5:       LEF             30          396 ##  6:       LEF            396          396 ##  7:       SCT            305          305 ##  8:       SCT             31          305 ##  9:       SCT             61          305 ## 10:       WGC             30          483 ## 11:       WGC            483          483 ## 12:       WGC             91          483"},{"path":"https://ibarraespinosa.github.io/rtorf/index.html","id":"saving-master-as-text-and-csvy","dir":"","previous_headings":"ObsPack summary","what":"Saving master as text and csvy","title":"rtorf Obspack GLOBALView+","text":"Now required information, can save files. , name data.frame master, contains information. important fields can used future, traceability. convenience, time variables transformed character writing disk. separation space ” “. format Comma Separated Value YAML (CSVY)[^3] consists typical CSV YAML header. functionobs_write_csvy includes argument notes allows adding custom notes header file. notes, obs_write_csvy adds output R function str, provides vertical summary data, known structure. check YAML header read first 38 lines files generated. can see column names, type data first observations. YAML header delimited characters “—”.","code":"master <- df5 master$timeUTC <- as.character(master$timeUTC) master$timeUTC_end <- as.character(master$timeUTC_end) master$local_time <- as.character(master$local_time)  fwrite(master,         file =  paste0(tempdir(), \"/tower_insitu_2020.txt\"),        sep = \" \") csvy <- paste0(tempdir(), \"/tower_insitu_2020.csvy\") obs_write_csvy(dt = master,                notes = \"tower 2020\",                out = csvy ) readLines(csvy)[1:38]"},{"path":"https://ibarraespinosa.github.io/rtorf/index.html","id":"saving-receptors","dir":"","previous_headings":"ObsPack summary","what":"Saving receptors","title":"rtorf Obspack GLOBALView+","text":"need filter columns master files new object called receptors. needed internally run HYSPLIT [@hy] using information receptors. case tower, need select observations highest altitude. specific columns selected shown following code. selecting ending times, later HYSPLIT run backwards based time measurement, ending starting times. columns time formatted two characters. instance, month 1, formatted “01”. also need filter type_altitude equal 0, representing aglobservations , equal 1, asl.","code":"receptor <- master[altitude_final == max_altitude,                    c(\"site_code\",                      \"year\",                      \"month\",                      \"day\",                      \"hour\",                      \"minute\",                      \"second\",                      \"latitude\",                      \"longitude\",                      \"altitude_final\",                      \"type_altitude\",                      \"year_end\",                      \"month_end\",                      \"day_end\",                      \"hour_end\",                      \"minute_end\",                      \"second_end\")] receptor$altitude_final <- round(receptor$altitude_final) receptor <- obs_format(receptor)  if(nrow(receptor_agl) > 0) {   fwrite(x = receptor_agl,          file = paste0(tempdir(), \"/receptor_tower_insitu_2020_AGL.txt\"),          sep = \" \")}  if(nrow(receptor_asl) > 0) {   fwrite(x = receptor_asl,          file = paste0(tempdir(), \"/receptor_tower_insitu_2020_ASL.txt\"),          sep = \" \")}"},{"path":"https://ibarraespinosa.github.io/rtorf/index.html","id":"application-for-other-sectors","dir":"","previous_headings":"","what":"Application for other sectors","title":"rtorf Obspack GLOBALView+","text":"package sharing scripts process sectors scripts available path https://github.com/ibarraespinosa/rtorf/tree/main/rscripts","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/index.html","id":"implementation-in-python","dir":"","previous_headings":"","what":"Implementation in python:","title":"rtorf Obspack GLOBALView+","text":"’m currently implementing version python:","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/paper.html","id":null,"dir":"","previous_headings":"","what":"Summary","title":"Summary","text":"Observations greenhouse gas emissions critical monitor state atmosphere, quantify present historical emissions, understand global climate change. Observation Package (ObsPack) specific format deliver atmospheric measurements data trace gasses [@masarie2014obspack]. NOAA Global Monitoring Laboratory (GML) manages global network atmospheric observations compiled delivered public ObsPack CH4 GLOBALVIEW+. product provides access global methane observations made surface, tower, aircrafts, aircores ships. Processing global data can cumbersome since provided multiple text NetCDF files. text files consist commented metadata followed tabulated data can different headers across files. metadata can critical information determines nature file , altitude site, local hour, laboratory . metadata, starts section tabulated data, different header across files.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/paper.html","id":"statement-of-need","dir":"","previous_headings":"","what":"Statement of need","title":"Summary","text":"order analyze greenhouse gasses measurements developed R package rtorf, reads processes NOAA/GML ObsPack GLOBALVIEW+ CH4 data. package imports functions data.table R package, contains C bindings parallel implementation via Open-MP [@dt]. data.table faster Python, Julia R implementations data-science, providing strong basis rtorf. main objective rtorf integrate different CH4 ObsPack text files long format, adding fields specific metadata information, tidy structure [@Silge2016]. Hence, data can easily processed data-table, allowing produce plots ggplot2 R packages [@g2]. steps followed rtorf described following lines. First, necessary create summary data , read file names, identify key-words, sectors full paths. data read iterating file category aircraft, tower, surface, flasks, ships aircore. necessary add UTC, local time calculate altitude ground level (agl) data. continuous ground sites, afternoon observations selected averaged reduce correlations noise. Given high frequency observations data, usually every second, aircraft data usually averaged every 20 seconds. data processed category, merged long format. installation functions created perform tasks shown following sections.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/paper.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Summary","text":"rtorf functions shown table 1. Table 1. Functions classes rtorf.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/paper.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Summary","text":"install rtorf, user must installed R package remotes run following script. process install required dependencies, data.table, cptcity, R package 7000 color palettes, lubridate, package manage time dates [@cpt;@lu]. , call libraries load function environment. manuscript, presenting application rtorf tower observations.","code":"remotes::install_github(\"ibarraespinosa/rtorf\") library(rtorf) library(data.table)"},{"path":"https://ibarraespinosa.github.io/rtorf/paper.html","id":"obspack-summary","dir":"","previous_headings":"","what":"ObsPack summary","title":"Summary","text":"first step consists constructing summary ObsPack. required read data, also, identify agl, present file names. function returns data.frame. Optionally, user can indicate path store data.frame. obs_summary also prints summary data. second argument categories, default includes categories shown , account files. summary data.frame contains columns id full path file, name name relative path file, n just id, sector tower, column agl indicates agl indicated name file available. read documentation function, user must run ?obs_summary. 362 files ObsPack directory. printed information also shows total bottom, sum individual file sector. ensure sum files equal total number files found, shown top. furthermore, printed information also shows 136 files agl explicitly mentioned name file. Sometimes need information site. instance, observations start end. , added function obs_table, calculates statistics summary “time” numeric variables file name, sector, site, altitude mode. instance, observations site “SCT” South Carolina, USA, “2015-08-19 21:30:00 UTC” “2020-12-31 23:30:00 UTC”.","code":"categories <- c(   \"aircraft-pfp\",   \"aircraft-insitu\",   \"surface-insitu\",   \"aircore\",   \"surface-pfp\",   \"tower-insitu\",   \"shipboard-insitu\",   \"flask\" ) obs <- \"../../../obspack_ch4_1_GLOBALVIEWplus_v4.0_2021-10-14/data/txt\" index <- obs_summary(obs = obs) ## Number of files of index: 362 ##              sector   N ## 1:     aircraft-pfp  40 ## 2:  aircraft-insitu  11 ## 3:            flask 101 ## 4:   surface-insitu 124 ## 5:          aircore   1 ## 6:      surface-pfp  33 ## 7:     tower-insitu  51 ## 8: shipboard-insitu   1 ## 9:    Total sectors 362 ## Detected 136 files with agl ## Detected 226 files without agl dft <- obs_table(index = index,                  categories = \"tower-insitu\",                  verbose = FALSE) dft[site_code == \"SCT\", ]$timeUTC |>    range() ## [1] \"2015-08-19 21:30:00 UTC\" \"2020-12-31 23:30:00 UTC\""},{"path":"https://ibarraespinosa.github.io/rtorf/paper.html","id":"read-data","dir":"","previous_headings":"ObsPack summary","what":"Read data","title":"Summary","text":"summary built, function obs_read read files available index file previously generated. selected category “tower-insitu”. argument verbose prints files read time, default. end, function prints total number observations type altitude (agl asl). added function plot data read ObsPack. y-axis field value x-axis default time. data illustrated sorted color field site_code, default number 3 sites. argument pal define color palette, used internally imported function cptcity::cpt. can see 2.32 million observations tower-insitu. observations made 2004 2020. identification altitude type critical. approach used consists : Identify agl name tile. agl present, search fill_values used elevation transform NA (available) agl present, agl = altitude - elevation. NA elevation, result NA agl new column added named altitude_final store agl asl Another column named type_altitude added identify agl asl. case NA altitude_final, type_altitude “available”","code":"df <- obs_read(index = index,                categories = \"tower-insitu\",                verbose = FALSE) obs_plot(dt = df, time = \"time\", yfactor = 1e+09, cex = 0.5) ## Found the following sites:  ##  [1] AZV   BRZ   BSD   CRV   DEM   DVV   GCI01 GCI02 GCI03 GCI04 HUN   IGR   ## [13] KRS   LEF   MRC   NOY   RGL   SCT   SVV   TAC   VGN   WGC   WSD   YAK   ## Plotting the following sites:  ## [1] AZV BRZ"},{"path":"https://ibarraespinosa.github.io/rtorf/paper.html","id":"filtering","dir":"","previous_headings":"ObsPack summary","what":"Filtering","title":"Summary","text":"ObsPack includes global observations sometimes need extract data specific region periods time. part include spatial temporal parameters filter data. year interest 2020, also included December 2019 January 2021. stage, can apply spatial filter using coordinates. filtering space time,  million observations. Towers can observations different heights. need select one site observations registered highest height. column height named altitude_final max altitude named max_altitude.","code":"north <- 80 south <- 10 west <- -170 east <- -50 max_altitude <- 8000 evening <- 14:15  yy <- 2020 df <- rbind(df[year == yy - 1 & month == 12],             df[year == yy],             df[year == yy + 1 & month == 1])  df <- df[altitude_final < max_altitude &            latitude < north &            latitude > south &            longitude < east &            longitude > west] dfa <- df[,           max(altitude_final),           by = site_code] |> unique()  names(dfa)[2] <- \"max_altitude\""},{"path":"https://ibarraespinosa.github.io/rtorf/paper.html","id":"time","dir":"","previous_headings":"ObsPack summary","what":"Time","title":"Summary","text":"need start time columns. function obs_addtime adds time columns timeUTC, timeUTC_start shows start time observation timeUTC_end shows end time observation. need identify local time function add_ltime. important identifying observations evening local time. add_ltime uses two methods, first identify time difference utc identifying metadata column “site_utc2lst”. information available, aircrafts instance, local time calculated approximation based longitude: lt = UTC + longitude/15 * 60 * 60 lt local time, UTC time, longitude coordinate. , time cut every two hours. Now, identify local time select evening hours. Now 8391 observations. point can calculate averages several columns cut time. function obs_agg aggregation shown following lines code. argument gby establish function used aggregate cols, case function mean time altitude. Finally, add local time . Now 4394 observations, 3997 less observations. add column max_altitude identify max altitude site.","code":"df2 <- obs_addtime(df) ## Adding timeUTC ## Adding timeUTC_start ## Adding timeUTC_end df2$timeUTC <- cut(x = df2$timeUTC+3600,                    breaks = \"2 hour\") |>   as.character() |>   as.POSIXct(tz = \"UTC\") df3 <- obs_addltime(df2) df3 <- df3[lh %in% evening] df4 <- obs_agg(dt = df3,                gby = \"mean\",                cols = c(\"value\", \"latitude\", \"longitude\", \"type_altitude\",                         \"dif_time\", \"year_end\", \"site_utc2lst\"),                verbose = FALSE,                byalt = TRUE) ## Detecting dif_time. Adding ending times df5 <- obs_addltime(df4) df5[,     max_altitude := max(altitude_final),     by = site_code] df5[,     c(\"site_code\",       \"altitude_final\",       \"max_altitude\")] |> unique() ##     site_code altitude_final max_altitude ##  1:       CRV           17.0           32 ##  2:       CRV           32.0           32 ##  3:       CRV            4.9           32 ##  4:       LEF          122.0          396 ##  5:       LEF           30.0          396 ##  6:       LEF          396.0          396 ##  7:       SCT          305.0          305 ##  8:       SCT           31.0          305 ##  9:       SCT           61.0          305 ## 10:       WGC           30.0          483 ## 11:       WGC          483.0          483 ## 12:       WGC           91.0          483"},{"path":"https://ibarraespinosa.github.io/rtorf/paper.html","id":"saving-master-as-text-and-csvy","dir":"","previous_headings":"ObsPack summary","what":"Saving master as text and csvy","title":"Summary","text":"Now required information, can save files. , name data.frame master, contains information. important fields can used future, traceability. convenience, time variables transformed character writing disk. separation space ” “. format Comma Separated Value YAML (CSVY)1 consists typical CSV YAML header. functionobs_write includes argument notes allows adding custom notes header file. notes, obs_write adds output R function str, provides vertical summary data, known structure. check YAML header read first 38 lines files generated. can see column names, type data first observations. YAML header delimited characters “—”.","code":"master <- df5 master$timeUTC <- as.character(master$timeUTC) master$timeUTC_end <- as.character(master$timeUTC_end) master$local_time <- as.character(master$local_time)  fwrite(master,         file = \"tower_insitu_2020.txt\",        sep = \" \") obs_write_csvy(dt = master,               notes = \"tower 2020\",               out = \"tower_insitu_2020.csvy\") readLines(\"tower_insitu_2020.csvy\")[1:38]"},{"path":"https://ibarraespinosa.github.io/rtorf/paper.html","id":"saving-receptors","dir":"","previous_headings":"ObsPack summary","what":"Saving receptors","title":"Summary","text":"need filter columns master files new object called receptors. needed internally run HYSPLIT [@hy] using information receptors. case tower, need select observations highest altitude. specific columns selected shown following code. selecting ending times, later HYSPLIT run backwards based time measurement, ending starting times. columns time formatted two characters. instance, month 1, formatted “01”. also need filter type_altitude equal 0, representing aglobservations , equal 1, asl.","code":"receptor <- master[altitude_final == max_altitude,                    c(\"site_code\",                      \"year\", \"month\", \"day\",                      \"hour\", \"minute\", \"second\",                      \"latitude\", \"longitude\",                      \"altitude_final\", \"type_altitude\",                      \"year_end\", \"month_end\", \"day_end\", \"hour_end\",                      \"minute_end\", \"second_end\")] receptor$altitude_final <- round(receptor$altitude_final) receptor <- obs_format(receptor)  if(nrow(receptor_agl) > 0) {   fwrite(x = receptor_agl,          file = \"paper/receptor_tower_insitu_2020_AGL.txt\"),   sep = \" \")}  if(nrow(receptor_asl) > 0) {   fwrite(x = receptor_asl,          file = \"paper/receptor_tower_insitu_2020_ASL.txt\"),   sep = \" \")}"},{"path":"https://ibarraespinosa.github.io/rtorf/paper.html","id":"recommendation-for-other-applications","dir":"","previous_headings":"","what":"Recommendation for other applications","title":"Summary","text":"approach generate receptors depends type observation considerations. instance, aircraft continuous observations second can filtered averaged every 20 seconds. way, footprints still representative necessary run HYSPLIT every second. course, depends application objective study. manuscript, presenting generation receptors based tower observations. Furthermore, package sharing scripts process sectors scripts available path https://github.com/ibarraespinosa/rtorf/tree/main/rscripts","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/paper.html","id":"conclusion","dir":"","previous_headings":"","what":"Conclusion","title":"Summary","text":"manuscript presented robskpack, R package read process CH4 ObsPack GLOBALVIEW+ published Global Monitoring Laboratory (GML) National Oceanographic Atmospheric Administration (NOAA). rtorf reads text data different headers organizes common format. , software applies calculations filter observations time space. Finally, software generates receptors suitable format allows run HYSPLIT generate footprints. software provide methods run HYSPLIT, user can follow site https://www.ready.noaa.gov/HYSPLIT.php.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/paper.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Summary","text":"Funding: project funded NOAA Climate Program Office AC4 COM programs (NA21OAR4310233 / NA21OAR4310234). research supported NOAA cooperative agreement NA22OAR4320151.","code":""},{"path":[]},{"path":"https://ibarraespinosa.github.io/rtorf/reference/fex.html","id":null,"dir":"Reference","previous_headings":"","what":"File extension — fex","title":"File extension — fex","text":"file extension","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/fex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File extension — fex","text":"","code":"fex(x)"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/fex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File extension — fex","text":"x character vector giving file paths.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/fex.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"File extension — fex","text":"source tools::file_ext","code":""},{"path":[]},{"path":"https://ibarraespinosa.github.io/rtorf/reference/fex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File extension — fex","text":"","code":"if (FALSE) { # do not run }"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/invfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for objects with class `invfile` — print.invfile","title":"Methods for objects with class `invfile` — print.invfile","text":"Methods objects class `invfile`","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/invfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for objects with class `invfile` — print.invfile","text":"","code":"# S3 method for invfile print(x, ...)  # S3 method for invfile summary(object, ...)  # S3 method for invfile plot(x, time = \"timeUTC\", ...)"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/invfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for objects with class `invfile` — print.invfile","text":"x Object class \"invfile\" ... plot arguments object invfile time x axis column (time)","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/invfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for objects with class `invfile` — print.invfile","text":"Objects class \"invfile\"","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/invfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for objects with class `invfile` — print.invfile","text":"","code":"if (FALSE) { #do not run }"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_addltime.html","id":null,"dir":"Reference","previous_headings":"","what":"local hour (bsed on longitude and time) — obs_addltime","title":"local hour (bsed on longitude and time) — obs_addltime","text":"Calculate approximation local hour","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_addltime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"local hour (bsed on longitude and time) — obs_addltime","text":"","code":"obs_addltime(   dt,   timeUTC = \"timeUTC\",   utc2lt = \"site_utc2lst\",   longitude = \"longitude\",   tz = \"UTC\" )"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_addltime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"local hour (bsed on longitude and time) — obs_addltime","text":"dt data.table timeUTC Character indicating Time column POSIXct utc2lt Character indicating integer column convert local time available longitude Character indicating column lingitude tz Timezone, default \"UTC\"","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_addltime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"local hour (bsed on longitude and time) — obs_addltime","text":"data.table local time columns","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_addltime.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"local hour (bsed on longitude and time) — obs_addltime","text":"time depending n longitude John Miller (GML/NOAA)","code":""},{"path":[]},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_addltime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"local hour (bsed on longitude and time) — obs_addltime","text":"","code":"{ if (FALSE) { # Do not run } }"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_addstime.html","id":null,"dir":"Reference","previous_headings":"","what":"Add solar time into obspack — obs_addstime","title":"Add solar time into obspack — obs_addstime","text":"function add timeUTC POSIX class, local time ending sampling time","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_addstime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add solar time into obspack — obs_addstime","text":"","code":"obs_addstime(dt, tz = \"UTC\")"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_addstime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add solar time into obspack — obs_addstime","text":"dt obspack data.table tz Timezone, default \"UTC\"","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_addstime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add solar time into obspack — obs_addstime","text":"return data.frame adding solar time","code":""},{"path":[]},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_addstime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add solar time into obspack — obs_addstime","text":"","code":"{ # Do not run obs <- system.file(\"data-raw\", package = \"rtorf\") index <-  obs_summary(obs) dt <- obs_read(index) dt <- obs_addtime(dt) } #> Number of files of index: 1 #>           sector     N #>           <char> <int> #> 1:         flask     1 #> 2: Total sectors     1 #> Detected 0 files with agl #> Detected 1 files without agl #> Searching flask... #> 1: ch4_aoa_aircraft-flask_19_allvalid.txt #> Adding timeUTC #> Adding timeUTC_start #> Adding timeUTC_end"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_addtime.html","id":null,"dir":"Reference","previous_headings":"","what":"Add times into obspack — obs_addtime","title":"Add times into obspack — obs_addtime","text":"function add timeUTC POSIX class, local time ending sampling time","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_addtime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add times into obspack — obs_addtime","text":"","code":"obs_addtime(dt, verbose = TRUE, tz = \"UTC\")"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_addtime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add times into obspack — obs_addtime","text":"dt obspack data.table verbose obspack data.table tz Timezone, default \"UTC\"","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_addtime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add times into obspack — obs_addtime","text":"data.frame index obspack.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_addtime.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add times into obspack — obs_addtime","text":"timeUTC calculated based field column start_time, timeUTC_end calculated using approach: 1. column time_interval found, proceed calculation using midpoint_time 2. Else, use column time_interval","code":""},{"path":[]},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_addtime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add times into obspack — obs_addtime","text":"","code":"{ # Do not run obs <- system.file(\"data-raw\", package = \"rtorf\") index <-  obs_summary(obs) dt <- obs_read(index) dt <- obs_addtime(dt) } #> Number of files of index: 1 #>           sector     N #>           <char> <int> #> 1:         flask     1 #> 2: Total sectors     1 #> Detected 0 files with agl #> Detected 1 files without agl #> Searching flask... #> 1: ch4_aoa_aircraft-flask_19_allvalid.txt #> Adding timeUTC #> Adding timeUTC_start #> Adding timeUTC_end"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_agg.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregates ObsPack by time — obs_agg","title":"Aggregates ObsPack by time — obs_agg","text":"function add timeUTC POSIX class, local time ending sampling time","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_agg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregates ObsPack by time — obs_agg","text":"","code":"obs_agg(   dt,   gby = \"mean\",   cols = c(\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"time\", \"time_decimal\",     \"value\", \"latitude\", \"longitude\", \"altitude\", \"pressure\", \"u\", \"v\", \"temperature\",     \"type_altitude\", \"altitude_final\"),   time = c(\"UTC\", \"solar\", \"local\"),   byalt = FALSE,   verbose = TRUE )"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_agg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregates ObsPack by time — obs_agg","text":"dt obspack data.table gby (groupby) Character indicating function group data. Default \"mean\" meaning numeric variables averaged new_second column established `idcol` cols Character defines columns aggregated time Character aggregate time (solar, local, UTC) byalt Logical, aggregate altitude (used tower) verbose logical show information","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_agg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregates ObsPack by time — obs_agg","text":"data.frame index obspack.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_agg.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Aggregates ObsPack by time — obs_agg","text":"default add column timeUTC parameters time loca, solar UTC","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_agg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregates ObsPack by time — obs_agg","text":"","code":"if (FALSE) { # Do not run dt <- obs_addtime(dt) }"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_find_receptors.html","id":null,"dir":"Reference","previous_headings":"","what":"Compares expected receptors — obs_find_receptors","title":"Compares expected receptors — obs_find_receptors","text":"function creates data.frame expected footprints .nc compare actual footprints. idea verify missing footprints.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_find_receptors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compares expected receptors — obs_find_receptors","text":"","code":"obs_find_receptors(   path,   year,   month,   day,   hour,   minute,   lat,   lon,   alt,   out = paste0(tempfile(), \".csvy\"),   verbose = FALSE )"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_find_receptors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compares expected receptors — obs_find_receptors","text":"path String path hwere stored footprints year numeric number month numeric number day numeric number hour numeric number minute numeric number lat numeric number lon numeric number alt numeric number outfile path. verbose logical show information","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_find_receptors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compares expected receptors — obs_find_receptors","text":"data.frame expected footprints","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_find_receptors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compares expected receptors — obs_find_receptors","text":"","code":"if (FALSE) { # do not run p <- \"/path/to/continuous/\" # here we have year/month/hysplit*.nc x <- dt dt <- obs_find_receptors(p, year, month....) }"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_footname.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected footprint name — obs_footname","title":"Expected footprint name — obs_footname","text":"return expected name NetCDF footprint","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_footname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected footprint name — obs_footname","text":"","code":"obs_footname(year, month, day, hour, minute, lat, lon, alt, out, ...)"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_footname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected footprint name — obs_footname","text":"year numeric number month numeric number day numeric number hour numeric number minute numeric number lat numeric number lon numeric number alt numeric number outfile path. ... data.table::fwrite arguments.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_footname.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Expected footprint name — obs_footname","text":"source https://stackoverflow.com//47015304/2418532 # IMPORTANT!!! # function generate expected NetCDF file name. # assumes name generated following considerations: # time variables (year, month, day, etc) format two digits, eg \"0.1\" # latitude longitude round 4 decimals # format latitude 2 integers, point 4 decimals # format longitude 3 integers, point 4 decimals # words, similar `obs_format`, `obs_footname`, generates expected name.","code":""},{"path":[]},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_footname.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expected footprint name — obs_footname","text":"","code":"if (FALSE) { # do not run }"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting data — obs_format","title":"Formatting data — obs_format","text":"return data.frame formatted fields","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting data — obs_format","text":"","code":"obs_format(   dt,   spf = c(\"month\", \"day\", \"hour\", \"minute\", \"second\", \"month_end\", \"day_end\", \"hour_end\",     \"minute_end\", \"second_end\"),   spffmt = \"%02d\",   rnd = c(\"latitude\", \"longitude\"),   rndn = 4,   spfrnd = TRUE,   out,   ... )"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting data — obs_format","text":"dt `data.table` spf columns formatted `sprintf` spffmt format applied spf rnd columns round rndn Round number applied `rnd` spfrnd Logical, sprintf `rnd` columns round ? outfile path used data.table::fwrite. ... data.table::fwrite arguments.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_format.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Formatting data — obs_format","text":"source https://stackoverflow.com//47015304/2418532","code":""},{"path":[]},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting data — obs_format","text":"","code":"if (FALSE) { # do not run }"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_freq.html","id":null,"dir":"Reference","previous_headings":"","what":"return numeric vector in intervals — obs_freq","title":"return numeric vector in intervals — obs_freq","text":"return numeric vector intervals","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"return numeric vector in intervals — obs_freq","text":"","code":"obs_freq(x, freq, ...)"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"return numeric vector in intervals — obs_freq","text":"x numeric, longer `freq` freq numeric vector ... findInterval arguments","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"return numeric vector in intervals — obs_freq","text":"numeric vector","code":""},{"path":[]},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_invfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate files to perform inverse modeling — obs_invfiles","title":"Generate files to perform inverse modeling — obs_invfiles","text":"function return list three elements.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_invfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate files to perform inverse modeling — obs_invfiles","text":"","code":"obs_invfiles(   master,   nc = \"nc\",   path,   value = \"value\",   value_factor = 1e+09,   Type = \"continuous\",   SubType = \"tower-insitu\",   Surface_Elev = 99999,   Model_agl,   Data_agl,   Event = 99999,   Institution,   Scale,   outdir )"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_invfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate files to perform inverse modeling — obs_invfiles","text":"master data.table master file filtering obspack nc column name master indicate NetCDF footprints path first part full path .nc footprint files value column name pollutant value_factor numeric factor Type \"continuous\", \"flask\" \"hatsflask\" SubType \"aircraft-insitu\", \"tower-insitu\", \"surface-insitu\" Surface_Elev Site elevation, default 99999 Model_agl Model agl, missing column `altitude_final` Data_agl Model agl, missing column `altitude_final` Event Number event Institution Institution Scale Scale outdir String output dir","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_invfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate files to perform inverse modeling — obs_invfiles","text":"list data.frame","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_invfiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate files to perform inverse modeling — obs_invfiles","text":"1. Footprints_hera_hysplit  full path NetCDF footprints\\ 2. Obs_hysplit concentration associazted iwth receptor 3. Receptor_info_hysplit receptor info","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_invfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate files to perform inverse modeling — obs_invfiles","text":"","code":"if (FALSE) { # do not run }"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_list.dt.html","id":null,"dir":"Reference","previous_headings":"","what":"list.dt — obs_list.dt","title":"list.dt — obs_list.dt","text":"treatments list data.frames","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_list.dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"list.dt — obs_list.dt","text":"","code":"obs_list.dt(ldf, na, verbose = TRUE)"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_list.dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"list.dt — obs_list.dt","text":"ldf list data.frames na common names final data.frame verbose Logical show information","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_list.dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"list.dt — obs_list.dt","text":"long data.table","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_list.dt.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"list.dt — obs_list.dt","text":"1. Filter empty data.frames 2. identify common names 3. rbindlist return data.table","code":""},{"path":[]},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_list.dt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"list.dt — obs_list.dt","text":"","code":"{ if (FALSE) { # Do not run } }"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Read obspack metadata — obs_meta","title":"Read obspack metadata — obs_meta","text":"Read obspack metadata","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read obspack metadata — obs_meta","text":"","code":"obs_meta(   index,   verbose = TRUE,   n_site_code = 15,   n_site_name = 15,   n_site_latitude = 18,   n_site_longitude = 19,   n_site_country = 18,   n_dataset_project = 21,   n_lab = 16,   n_scales = 31,   n_site_elevation = 20,   n_altitude_comment = 22,   n_utc = 18,   fill_value = -1e+34,   as_list = FALSE )"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read obspack metadata — obs_meta","text":"index data.table verbose Logical show information n_site_code number characters extraced metadata search n_site_name number characters extraced metadata search n_site_latitude number characters extraced metadata search n_site_longitude number characters extraced metadata search n_site_country number characters extraced metadata search n_dataset_project number characters extraced metadata search n_lab number characters extraced metadata search n_scales number characters extraced metadata search n_site_elevation number characters extraced metadata search n_altitude_comment number characters extraced metadata search n_utc number characters extraced metadata search fill_value fill value. Appeared aoa_aircraft-flask_19_allvalid.txt as_list Logical return list","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read obspack metadata — obs_meta","text":"data.frame index obspack.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read obspack metadata — obs_meta","text":"","code":"{ # Do not run obs <- system.file(\"data-raw\", package = \"rtorf\") index <- obs_summary(obs) dt <- obs_meta(index) } #> Number of files of index: 1 #>           sector     N #>           <char> <int> #> 1:         flask     1 #> 2: Total sectors     1 #> Detected 0 files with agl #> Detected 1 files without agl #> 1: ch4_aoa_aircraft-flask_19_allvalid.txt"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_out.html","id":null,"dir":"Reference","previous_headings":"","what":"outersect — obs_out","title":"outersect — obs_out","text":"Just opposite intersect","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"outersect — obs_out","text":"","code":"obs_out(x, y)"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"outersect — obs_out","text":"x vector y vector","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"outersect — obs_out","text":"vector opposite intersect","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_out.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"outersect — obs_out","text":"Helpers","code":""},{"path":[]},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"outersect — obs_out","text":"","code":"{ if (FALSE) { # Do not run } }"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Read obspack metadata — obs_plot","title":"Read obspack metadata — obs_plot","text":"Read obspack metadata","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read obspack metadata — obs_plot","text":"","code":"obs_plot(   dt,   time,   y = \"value\",   yfactor = 1,   colu = \"site_code\",   type = \"p\",   n = if (length(unique(dt[[colu]])) == 1) unique(dt[[colu]]) else     unique(dt[[colu]])[1:2],   pal = cptcity::find_cpt(\"qual\")[6],   verbose = TRUE,   xlab = \"time\",   ylab = \"value\",   xlim = range(dt[[time]], na.rm = TRUE),   ylim = range(dt[[y]], na.rm = TRUE),   ... )"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read obspack metadata — obs_plot","text":"dt data.table time x axis column (time) y y axis column, default \"value\" yfactor factor y colu column plot color, default site_code type type plot, default \"p\" n Character indicating `colu` subset, instance, want plot \"site_code\", include site_code want plot pal Color palette name see cpt, default \"cb_qual_Accent_08\" verbose Logical show information xlab Character, xlab ylab Character, ylab xlim x limits ylim y limits ... plot arguments","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read obspack metadata — obs_plot","text":"Plot","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read obspack metadata — obs_plot","text":"","code":"if (FALSE) { # Do not run obs <- system.file(\"data-raw\", package = \"rtorf\") index <- obs_summary(obs) dt <- obs_read(index) obs_plot(dt, time = \"time\") }"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_rbind.html","id":null,"dir":"Reference","previous_headings":"","what":"rbind obspack — obs_rbind","title":"rbind obspack — obs_rbind","text":"return rbind obs data.tables","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_rbind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rbind obspack — obs_rbind","text":"","code":"obs_rbind(dt1, dt2, verbose = TRUE)"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_rbind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rbind obspack — obs_rbind","text":"dt1 first data.table dt2 second data.table verbose logical show information","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_rbind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rbind obspack — obs_rbind","text":"numeric vector","code":""},{"path":[]},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_rbind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rbind obspack — obs_rbind","text":"","code":"if (FALSE) { # do not run }"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read obspack (.txt) — obs_read","title":"Read obspack (.txt) — obs_read","text":"obspack file header metadata function reads selected fields metadata add columns. new columns used later filtered","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read obspack (.txt) — obs_read","text":"","code":"obs_read(   index,   categories = \"flask\",   verbose = TRUE,   n_site_code = 15,   n_site_latitude = 18,   n_site_longitude = 19,   n_site_name = 15,   n_site_country = 18,   n_dataset_project = 21,   n_lab = 16,   n_scales = 31,   n_site_elevation = 20,   n_altitude_comment = 22,   n_utc = 18,   fill_value = -1e+34,   as_list = FALSE )"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read obspack (.txt) — obs_read","text":"index data.table categories character; ONE category : c(\"aircraft-pfp\", \"aircraft-insitu\", \"surface-insitu\", \"tower-insitu\", \"aircore\", \"surface-pfp\", \"shipboard-insitu\", \"flask\"). verbose Logical show information n_site_code number characters extratced metadata search n_site_latitude number characters extracted metadata search n_site_longitude number characters extracted metadata search n_site_name number characters extracted metadata search n_site_country number characters extracted metadata search n_dataset_project number characters extracted metadata search n_lab number characters extracted metadata search n_scales number characters extracted metadata search n_site_elevation number characters extracted metadata search n_altitude_comment number characters extracted metadata search n_utc number characters extracted metadata search fill_value fill value. Appeared aoa_aircraft-flask_19_allvalid.txt as_list Logical return list","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read obspack (.txt) — obs_read","text":"data.frame index obspack.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_read.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read obspack (.txt) — obs_read","text":"identification altitude type critical. approach used consists : 1. Identify agl name tile. 2. magl present, search dill_values used elevation transform NA (available) 3. magl present, agl = altitude - elevation 4. NA elevation, result NA agl 5. new column added named `altitude_final` store agl asl 6. Another column named `type_altitude` added identify \"magl\" \"masl\" 7. case NA `altitude_final`, `type_altitude` \"available\" , relationship hysplit :","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read obspack (.txt) — obs_read","text":"","code":"{ # Do not run obs <- system.file(\"data-raw\", package = \"rtorf\") index <- obs_summary(obs) dt <- obs_read(index) } #> Number of files of index: 1 #>           sector     N #>           <char> <int> #> 1:         flask     1 #> 2: Total sectors     1 #> Detected 0 files with agl #> Detected 1 files without agl #> Searching flask... #> 1: ch4_aoa_aircraft-flask_19_allvalid.txt"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_read_csvy.html","id":null,"dir":"Reference","previous_headings":"","what":"reads CSVY — obs_read_csvy","title":"reads CSVY — obs_read_csvy","text":"Reads CSVY, print YAML fread file.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_read_csvy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reads CSVY — obs_read_csvy","text":"","code":"obs_read_csvy(f, n = 100, ...)"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_read_csvy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reads CSVY — obs_read_csvy","text":"f path csvy file n number files search \"---\" yaml ... extra data.table arguments","code":""},{"path":[]},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_read_csvy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"reads CSVY — obs_read_csvy","text":"","code":"{ df <- data.frame(a = rnorm(n = 10),                  time = Sys.time() + 1:10)  f <- paste0(tempfile(), \".csvy\") notes <- c(\"notes\",            \"more notes\") obs_write_csvy(dt = df, notes = notes, out = f) s <- obs_read_csvy(f) s # or readLines(f) data.table::fread(f) } #>  [1] \"---\"                                                   #>  [2] \"name: Metadata \"                                       #>  [3] \"notes\"                                                 #>  [4] \"more notes\"                                            #>  [5] \"structure: \"                                           #>  [6] \"'data.frame':\\t10 obs. of  2 variables:\"               #>  [7] \" $ a   : num  -1.4 0.255 ...\"                          #>  [8] \" $ time: POSIXct, format: \\\"2024-04-25 19:18:11\\\" ...\" #>  [9] \"NULL\"                                                  #> [10] \"---\"                                                   #>                a                time #>            <num>              <POSc> #>  1: -1.400043517 2024-04-25 19:18:11 #>  2:  0.255317055 2024-04-25 19:18:12 #>  3: -2.437263611 2024-04-25 19:18:13 #>  4: -0.005571287 2024-04-25 19:18:14 #>  5:  0.621552721 2024-04-25 19:18:15 #>  6:  1.148411606 2024-04-25 19:18:16 #>  7: -1.821817661 2024-04-25 19:18:17 #>  8: -0.247325302 2024-04-25 19:18:18 #>  9: -0.244199607 2024-04-25 19:18:19 #> 10: -0.282705449 2024-04-25 19:18:20"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_read_nc.html","id":null,"dir":"Reference","previous_headings":"","what":"Read obspack (.nc) — obs_read_nc","title":"Read obspack (.nc) — obs_read_nc","text":"obspack file header metadata function reads selected fields metadata add columns. new columns used later filtered","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_read_nc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read obspack (.nc) — obs_read_nc","text":"","code":"obs_read_nc(   index,   categories = \"flask\",   solar_time = TRUE,   as_list = FALSE,   verbose = FALSE,   warnings = FALSE )"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_read_nc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read obspack (.nc) — obs_read_nc","text":"index data.table categories character; ONE category : c(\"aircraft-pfp\", \"aircraft-insitu\", \"surface-insitu\", \"tower-insitu\", \"aircore\", \"surface-pfp\", \"shipboard-insitu\", \"flask\"). solar_time Logical, add solar time? as_list Logical return list verbose Logical show information warnings Logical show warnings reading NetCDF, especially global attributes","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_read_nc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read obspack (.nc) — obs_read_nc","text":"data.frame index obspack.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_read_nc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read obspack (.nc) — obs_read_nc","text":"","code":"{ # Do not run obs <- system.file(\"data-raw\", package = \"rtorf\") index <- obs_summary(obs) dt <- obs_read(index) } #> Number of files of index: 1 #>           sector     N #>           <char> <int> #> 1:         flask     1 #> 2: Total sectors     1 #> Detected 0 files with agl #> Detected 1 files without agl #> Searching flask... #> 1: ch4_aoa_aircraft-flask_19_allvalid.txt"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_roundtime.html","id":null,"dir":"Reference","previous_headings":"","what":"round seconds from ","title":"round seconds from ","text":"return rounded seconds time","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_roundtime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"round seconds from ","text":"","code":"obs_roundtime(x, n = 10)"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_roundtime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"round seconds from ","text":"x time \"POSIXct\" \"POSIXt\" n factor","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_roundtime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"round seconds from ","text":"numeric vector","code":""},{"path":[]},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_roundtime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"round seconds from ","text":"","code":"{ x <- Sys.time() + seq(1, 55, 1) paste0(x,\"  \",        obs_roundtime(x), \"  \",        obs_freq(data.table::second(x),                 seq(0, 55, 10))) } #>  [1] \"2024-04-25 19:18:11.786755  10  10\" \"2024-04-25 19:18:12.786755  10  10\" #>  [3] \"2024-04-25 19:18:13.786755  10  10\" \"2024-04-25 19:18:14.786755  10  10\" #>  [5] \"2024-04-25 19:18:15.786755  10  10\" \"2024-04-25 19:18:16.786755  10  10\" #>  [7] \"2024-04-25 19:18:17.786755  10  10\" \"2024-04-25 19:18:18.786755  20  10\" #>  [9] \"2024-04-25 19:18:19.786755  20  10\" \"2024-04-25 19:18:20.786755  20  10\" #> [11] \"2024-04-25 19:18:21.786755  20  20\" \"2024-04-25 19:18:22.786755  20  20\" #> [13] \"2024-04-25 19:18:23.786755  20  20\" \"2024-04-25 19:18:24.786755  20  20\" #> [15] \"2024-04-25 19:18:25.786755  20  20\" \"2024-04-25 19:18:26.786755  20  20\" #> [17] \"2024-04-25 19:18:27.786755  20  20\" \"2024-04-25 19:18:28.786755  30  20\" #> [19] \"2024-04-25 19:18:29.786755  30  20\" \"2024-04-25 19:18:30.786755  30  20\" #> [21] \"2024-04-25 19:18:31.786755  30  30\" \"2024-04-25 19:18:32.786755  30  30\" #> [23] \"2024-04-25 19:18:33.786755  30  30\" \"2024-04-25 19:18:34.786755  30  30\" #> [25] \"2024-04-25 19:18:35.786755  30  30\" \"2024-04-25 19:18:36.786755  30  30\" #> [27] \"2024-04-25 19:18:37.786755  30  30\" \"2024-04-25 19:18:38.786755  40  30\" #> [29] \"2024-04-25 19:18:39.786755  40  30\" \"2024-04-25 19:18:40.786755  40  30\" #> [31] \"2024-04-25 19:18:41.786755  40  40\" \"2024-04-25 19:18:42.786755  40  40\" #> [33] \"2024-04-25 19:18:43.786755  40  40\" \"2024-04-25 19:18:44.786755  40  40\" #> [35] \"2024-04-25 19:18:45.786755  40  40\" \"2024-04-25 19:18:46.786755  40  40\" #> [37] \"2024-04-25 19:18:47.786755  40  40\" \"2024-04-25 19:18:48.786755  50  40\" #> [39] \"2024-04-25 19:18:49.786755  50  40\" \"2024-04-25 19:18:50.786755  50  40\" #> [41] \"2024-04-25 19:18:51.786755  50  50\" \"2024-04-25 19:18:52.786755  50  50\" #> [43] \"2024-04-25 19:18:53.786755  50  50\" \"2024-04-25 19:18:54.786755  50  50\" #> [45] \"2024-04-25 19:18:55.786755  50  50\" \"2024-04-25 19:18:56.786755  50  50\" #> [47] \"2024-04-25 19:18:57.786755  50  50\" \"2024-04-25 19:18:58.786755  0  50\"  #> [49] \"2024-04-25 19:18:59.786755  0  50\"  \"2024-04-25 19:19:00.786755  0  0\"   #> [51] \"2024-04-25 19:19:01.786755  0  0\"   \"2024-04-25 19:19:02.786755  0  0\"   #> [53] \"2024-04-25 19:19:03.786755  0  0\"   \"2024-04-25 19:19:04.786755  0  0\"   #> [55] \"2024-04-25 19:19:05.786755  0  0\""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of the ObsPack files (.txt) — obs_summary","title":"Summary of the ObsPack files (.txt) — obs_summary","text":"function returns data.frame index files available ObsPack. function returns data.frame index files available obspack.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of the ObsPack files (.txt) — obs_summary","text":"","code":"obs_summary(   obs,   categories = c(\"aircraft-pfp\", \"aircraft-insitu\", \"surface-insitu\", \"tower-insitu\",     \"aircore\", \"surface-pfp\", \"shipboard-insitu\", \"flask\"),   lnchar = 11,   out = paste0(tempfile(), \"_index.csv\"),   verbose = TRUE,   aslist = FALSE )  obs_index(   obs,   categories = c(\"aircraft-pfp\", \"aircraft-insitu\", \"surface-insitu\", \"tower-insitu\",     \"aircore\", \"surface-pfp\", \"shipboard-insitu\", \"flask\"),   lnchar = 11,   out = paste0(tempfile(), \"_index.csv\"),   verbose = TRUE )"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of the ObsPack files (.txt) — obs_summary","text":"obs Path Obspack GLOBALview txt data categories character; default c(\"aircraft-pfp\", \"aircraft-insitu\", \"surface-insitu\", \"tower-insitu\", \"aircore\", \"surface-pfp\", \"shipboard-insitu\", \"flask\"). ideia ,file names include words, function identifies files words add columns. lnchar Integer; last nchar, default = 11. Path Obspack index output verbose Logical show information aslist Logical return list index summary","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of the ObsPack files (.txt) — obs_summary","text":"data.frame index obspack Globalview. data.frame index obspack Globalview.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of the ObsPack files (.txt) — obs_summary","text":"","code":"{ if (FALSE) { # Do not run obs <- system.file(\"data-raw\", package = \"rtorf\") index <- obs_summary(obs) } } { if (FALSE) { # Do not run obs <- system.file(\"data-raw\", package = \"rtorf\") index <- obs_summary(obs) } }"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Obspack Table Summary — obs_table","title":"Obspack Table Summary — obs_table","text":"function reads obsPack directory providing summary columns: \"value\", \"time\", \"time_decimal\", \"latitude\" \"longitude\". summary made columns \"name\", \"sector\", \"site_name\", \"site_country\", \"type_altitude\", \"lab_1_abbr\" \"site_utc2lst\"","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obspack Table Summary — obs_table","text":"","code":"obs_table(   df,   cols = c(\"value\", \"time\", \"time_decimal\", \"latitude\", \"longitude\") )"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obspack Table Summary — obs_table","text":"df data.table cols String columns summarized.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obspack Table Summary — obs_table","text":"data.frame index obspack.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obspack Table Summary — obs_table","text":"","code":"{ # Do not run obs <- system.file(\"data-raw\", package = \"rtorf\") index <- obs_summary(obs) dt <- obs_read(index) dx <- obs_table(dt) } #> Number of files of index: 1 #>           sector     N #>           <char> <int> #> 1:         flask     1 #> 2: Total sectors     1 #> Detected 0 files with agl #> Detected 1 files without agl #> Searching flask... #> 1: ch4_aoa_aircraft-flask_19_allvalid.txt"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_trunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Trunc numbers with a desired number of decimals — obs_trunc","title":"Trunc numbers with a desired number of decimals — obs_trunc","text":"Trunc numbers specified number decimals.","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_trunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trunc numbers with a desired number of decimals — obs_trunc","text":"","code":"obs_trunc(n, dec)"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_trunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trunc numbers with a desired number of decimals — obs_trunc","text":"n Numeric  number dec Integer, number decimals","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_trunc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Trunc numbers with a desired number of decimals — obs_trunc","text":"source https://stackoverflow.com//47015304/2418532","code":""},{"path":[]},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_trunc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trunc numbers with a desired number of decimals — obs_trunc","text":"","code":"{ # in bash: # printf \"%07.4f\" 72.05785 # results in 72.0578 # but: formatC(72.05785, digits = 4, width = 8, format = \"f\", flag = \"0\") # results in \"072.0579\" # the goal is to obtain the same trunc number as using bash, then: formatC(obs_trunc(72.05785, 4),         digits = 4,         width = 8,         format = \"f\",         flag = \"0\") } #> [1] \"072.0578\""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_write_csvy.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates YAML and write data.frame — obs_write_csvy","title":"Generates YAML and write data.frame — obs_write_csvy","text":"Add YAML header info writes data.frame disk. YAML section includes notes str(dt).","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_write_csvy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates YAML and write data.frame — obs_write_csvy","text":"","code":"obs_write_csvy(   dt,   notes,   out = paste0(tempfile(), \".csvy\"),   sep = \",\",   nchar.max = 80,   ... )"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_write_csvy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates YAML and write data.frame — obs_write_csvy","text":"dt data.table notes notes. outfile path. sep separator columns. Default \",\". nchar.max Max nchar str. ... extra data.table arguments","code":""},{"path":[]},{"path":"https://ibarraespinosa.github.io/rtorf/reference/obs_write_csvy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates YAML and write data.frame — obs_write_csvy","text":"","code":"{ df <- data.frame(a = rnorm(n = 10),                  time = Sys.time() + 1:10)  f <- paste0(tempfile(), \".csvy\") notes <- c(\"notes\",            \"more notes\") obs_write_csvy(dt = df, notes = notes, out = f) readLines(f) data.table::fread(f, h = TRUE) } #>               a                time #>           <num>              <POSc> #>  1: -0.55369938 2024-04-25 19:18:12 #>  2:  0.62898204 2024-04-25 19:18:13 #>  3:  2.06502490 2024-04-25 19:18:14 #>  4: -1.63098940 2024-04-25 19:18:15 #>  5:  0.51242695 2024-04-25 19:18:16 #>  6: -1.86301149 2024-04-25 19:18:17 #>  7: -0.52201251 2024-04-25 19:18:18 #>  8: -0.05260191 2024-04-25 19:18:19 #>  9:  0.54299634 2024-04-25 19:18:20 #> 10: -0.91407483 2024-04-25 19:18:21"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/rtorf-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions in package rtorf. — rtorf-deprecated","title":"Deprecated functions in package rtorf. — rtorf-deprecated","text":"functions listed deprecated defunct   near future. possible, alternative functions similar   functionality also mentioned. Help pages deprecated functions   available help(\"-deprecated\"). transform integer character add zero left","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/rtorf-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions in package rtorf. — rtorf-deprecated","text":"","code":"obs_addzero(x, ...)"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/rtorf-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated functions in package rtorf. — rtorf-deprecated","text":"x integer","code":""},{"path":[]},{"path":"https://ibarraespinosa.github.io/rtorf/reference/rtorf-deprecated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deprecated functions in package rtorf. — rtorf-deprecated","text":"","code":"{if (FALSE) { #do not run } }"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/rtorf-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rtorf: 'rtorf' Obspack GLOBALView+ — rtorf-package","title":"rtorf: 'rtorf' Obspack GLOBALView+ — rtorf-package","text":"Reads, process, plots CH4 ObsPack GLOBALView+ data NOAA perform different filters analyses.","code":""},{"path":[]},{"path":"https://ibarraespinosa.github.io/rtorf/reference/rtorf-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rtorf: 'rtorf' Obspack GLOBALView+ — rtorf-package","text":"Maintainer: Sergio Ibarra-Espinosa sergio.ibarra-espinosa@noaa.gov (ORCID) contributors: Lei Hu lei.hu@noaa.gov (ORCID) [contributor]","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/sr.html","id":null,"dir":"Reference","previous_headings":"","what":"Extacts n last characters — sr","title":"Extacts n last characters — sr","text":"file extension","code":""},{"path":"https://ibarraespinosa.github.io/rtorf/reference/sr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extacts n last characters — sr","text":"","code":"sr(x, n)"},{"path":"https://ibarraespinosa.github.io/rtorf/reference/sr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extacts n last characters — sr","text":"x character vector. n integer.","code":""},{"path":[]},{"path":"https://ibarraespinosa.github.io/rtorf/reference/sr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extacts n last characters — sr","text":"","code":"if (FALSE) { # do not run }"}]
