[{"path":"https://noaa-gml.github.io/rtorf/articles/aircore.html","id":"checks-and-definitions","dir":"Articles","previous_headings":"","what":"Checks and definitions","title":"aircore","text":"check altitude, intake_height, altitude_final elevation. altitude_final column intake_height, added match column obs_read text files. temporal range data also check dimensions data","code":"north <- 80 south <- 10 west <- -170 east <- -50 max_altitude <- 8000 yy <- 2022 df[, c(\"altitude\", \"altitude_final\")] #>        altitude altitude_final #>           <num>          <num> #>     1: 21685.83       21685.83 #>     2: 21626.17       21626.17 #>     3: 21565.31       21565.31 #>     4: 21508.82       21508.82 #>     5: 21453.79       21453.79 #>    ---                         #> 72003:  1801.49        1801.49 #> 72004:  1787.17        1787.17 #> 72005:  1776.80        1776.80 #> 72006:  1757.47        1757.47 #> 72007:  1735.74        1735.74 range(df$year) #> [1] 2012 2021 dim(df) #> [1] 72007    39"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircore.html","id":"filters","dir":"Articles","previous_headings":"","what":"Filters","title":"aircore","text":"","code":"df <- df[year == yy]  df <- df[altitude_final < max_altitude &            latitude < north &            latitude > south &            longitude < east &            longitude > west] dim(df) #> [1] 3256   39"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircore.html","id":"adding-time-as-posixct-class","dir":"Articles","previous_headings":"","what":"Adding time as POSIXct class","title":"aircore","text":"","code":"df <- obs_addtime(df) df[, \"timeUTC\"] #>                   timeUTC #>                    <POSc> #>    1: 2020-01-30 19:37:28 #>    2: 2020-01-30 19:37:32 #>    3: 2020-01-30 19:37:36 #>    4: 2020-01-30 19:37:40 #>    5: 2020-01-30 19:37:43 #>   ---                     #> 3252: 2020-12-17 18:56:09 #> 3253: 2020-12-17 18:56:10 #> 3254: 2020-12-17 18:56:12 #> 3255: 2020-12-17 18:56:12 #> 3256: 2020-12-17 18:56:15"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircore.html","id":"cut-time","dir":"Articles","previous_headings":"","what":"Cut time","title":"aircore","text":"now can cut time every 20 seconds. can chosse frequency well.","code":"df$sec2 <- obs_freq(x = df$second,                      freq = seq(0, 59, 20)) df[, c(\"second\", \"sec2\")] #>       second  sec2 #>        <int> <num> #>    1:     28    20 #>    2:     32    20 #>    3:     36    20 #>    4:     40    20 #>    5:     43    40 #>   ---              #> 3252:      9     0 #> 3253:     10     0 #> 3254:     12     0 #> 3255:     12     0 #> 3256:     15     0"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircore.html","id":"aggregate-data","dir":"Articles","previous_headings":"","what":"Aggregate data","title":"aircore","text":"now need add column key_time, used aggregate variables","code":"df$key_time <- ISOdatetime(year = df$year,                            month = df$month,                            day = df$day,                            hour = df$hour,                            min = df$minute,                            sec = df$sec2,                            tz = \"UTC\") df[, c(\"timeUTC\", \"key_time\")] #>                   timeUTC            key_time #>                    <POSc>              <POSc> #>    1: 2020-01-30 19:37:28 2020-01-30 19:37:20 #>    2: 2020-01-30 19:37:32 2020-01-30 19:37:20 #>    3: 2020-01-30 19:37:36 2020-01-30 19:37:20 #>    4: 2020-01-30 19:37:40 2020-01-30 19:37:20 #>    5: 2020-01-30 19:37:43 2020-01-30 19:37:40 #>   ---                                         #> 3252: 2020-12-17 18:56:09 2020-12-17 18:56:00 #> 3253: 2020-12-17 18:56:10 2020-12-17 18:56:00 #> 3254: 2020-12-17 18:56:12 2020-12-17 18:56:00 #> 3255: 2020-12-17 18:56:12 2020-12-17 18:56:00 #> 3256: 2020-12-17 18:56:15 2020-12-17 18:56:00 df2 <- obs_agg(df, cols =  c(\"year\",                              \"month\",                              \"day\",                              \"hour\",                              \"minute\",                              \"second\",                              \"time\",                              \"time_decimal\",                              \"value\",                              \"latitude\",                              \"longitude\",                              \"altitude_final\",                              # \"elevation\",                              # \"intake_height\",                              # \"gps_altitude\",                              # \"pressure\",                              # \"pressure_altitude\",                              # \"u\", \"v\", \"temperature\",                              \"type_altitude\"))"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircore.html","id":"add-local-time","dir":"Articles","previous_headings":"","what":"Add local time","title":"aircore","text":"Now add local time","code":"df3 <- obs_addltime(df2) setorderv(df3, cols = c(\"site_code\", \"timeUTC\"),           order = c(-1, 1)) df3 #>                  timeUTC   site_code lab_1_abbr dataset_calibration_scale  year #>                   <POSc>      <char>     <char>                    <char> <int> #>   1: 2020-01-30 19:37:20 AirCoreNOAA       NOAA             WMO CH4 X2004  2020 #>   2: 2020-01-30 19:37:40 AirCoreNOAA       NOAA             WMO CH4 X2004  2020 #>   3: 2020-01-30 19:38:00 AirCoreNOAA       NOAA             WMO CH4 X2004  2020 #>   4: 2020-01-30 19:38:20 AirCoreNOAA       NOAA             WMO CH4 X2004  2020 #>   5: 2020-01-30 19:38:40 AirCoreNOAA       NOAA             WMO CH4 X2004  2020 #>  ---                                                                            #> 334: 2020-12-17 18:54:40 AirCoreNOAA       NOAA             WMO CH4 X2004  2020 #> 335: 2020-12-17 18:55:00 AirCoreNOAA       NOAA             WMO CH4 X2004  2020 #> 336: 2020-12-17 18:55:20 AirCoreNOAA       NOAA             WMO CH4 X2004  2020 #> 337: 2020-12-17 18:55:40 AirCoreNOAA       NOAA             WMO CH4 X2004  2020 #> 338: 2020-12-17 18:56:00 AirCoreNOAA       NOAA             WMO CH4 X2004  2020 #>      month    day  hour minute second       time time_decimal        value #>      <int> <char> <int>  <int>  <int>      <num>        <num>        <num> #>   1:     1     30    19     37     20 1580413040     2020.081 1.912662e-06 #>   2:     1     30    19     37     40 1580413060     2020.081 1.913034e-06 #>   3:     1     30    19     38      0 1580413080     2020.081 1.913344e-06 #>   4:     1     30    19     38     20 1580413100     2020.081 1.913346e-06 #>   5:     1     30    19     38     40 1580413120     2020.081 1.913906e-06 #>  ---                                                                       #> 334:    12     17    18     54     40 1608231280     2020.961 1.958356e-06 #> 335:    12     17    18     55      0 1608231300     2020.961 1.958784e-06 #> 336:    12     17    18     55     20 1608231320     2020.961 1.959021e-06 #> 337:    12     17    18     55     40 1608231340     2020.961 1.958858e-06 #> 338:    12     17    18     56      0 1608231360     2020.961 1.959788e-06 #>      latitude longitude altitude_final type_altitude          local_time    lh #>         <num>     <num>          <num>         <num>              <POSc> <int> #>   1: 39.68173 -103.7711       7926.282             1 2020-01-30 12:42:14    12 #>   2: 39.67923 -103.7686       7795.292             1 2020-01-30 12:42:35    12 #>   3: 39.67596 -103.7657       7647.354             1 2020-01-30 12:42:56    12 #>   4: 39.67261 -103.7625       7500.024             1 2020-01-30 12:43:16    12 #>   5: 39.66949 -103.7596       7357.494             1 2020-01-30 12:43:37    12 #>  ---                                                                           #> 334: 39.47656 -103.8517       2353.402             1 2020-12-17 11:59:15    11 #> 335: 39.47749 -103.8506       2233.901             1 2020-12-17 11:59:35    11 #> 336: 39.47844 -103.8497       2121.761             1 2020-12-17 11:59:56    11 #> 337: 39.47984 -103.8488       2007.779             1 2020-12-17 12:00:16    12 #> 338: 39.48127 -103.8481       1905.712             1 2020-12-17 12:00:36    12"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircore.html","id":"master","dir":"Articles","previous_headings":"","what":"Master","title":"aircore","text":"generating receptors list, databe required information may replace missing values nine nines. commented #master[.na(master)] <- 999999999 transform time variables character round coordinates 4 digits","code":"master <- df3 master$timeUTC <- as.character(master$timeUTC) master$local_time <- as.character(master$local_time) master$latitude <- round(master$latitude, 4) master$longitude <- round(master$longitude, 4)"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircore.html","id":"save-master","dir":"Articles","previous_headings":"","what":"Save master","title":"aircore","text":"Finally save master file","code":"out <- tempfile()"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircore.html","id":"txt","dir":"Articles","previous_headings":"Save master","what":"txt","title":"aircore","text":"","code":"message(paste0(out,\"_\", datasetid, \".txt\\n\")) fwrite(master,        paste0(out,\"_\", datasetid, \".txt\"),        sep = \" \") #> C:\\Users\\sibarrae\\AppData\\Local\\Temp\\RtmpQ33K7x\\file8b4862a53ca7_aircore.txt"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircore.html","id":"csv","dir":"Articles","previous_headings":"Save master","what":"csv","title":"aircore","text":"","code":"message(paste0(out,\"_\", datasetid, \".csv\\n\")) fwrite(master,        paste0(out,\"_\", datasetid, \".csv\"),        sep = \",\") #> C:\\Users\\sibarrae\\AppData\\Local\\Temp\\RtmpQ33K7x\\file8b4862a53ca7_aircore.csv"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircore.html","id":"csvy","dir":"Articles","previous_headings":"Save master","what":"csvy","title":"aircore","text":"CSVY csv files YAML header include metadata tabulated text files","code":"cat(\"\\nAdding notes in csvy:\\n\") notes <- c(paste0(\"sector: \", datasetid),            paste0(\"timespan: \", yy),            paste0(\"spatial_limits: north = \", north, \", south = \", south, \", east = \", east, \", west = \", west),            \"data: Data averaged every 20 seconds\",            paste0(\"altitude: < \", max_altitude),            \"hours: All\",            \"local_time: if var `site_utc2lst` is not available, calculated as\",            \"longitude/15*60*60 (John Miller)\")  cat(notes, sep = \"\\n\")  message(paste0(out,\"_\", datasetid, \".csvy\\n\")) obs_write_csvy(dt = master,                notes = notes,                out = paste0(out,\"_\", datasetid, \".csvy\")) #>  #> Adding notes in csvy: #> sector: aircore #> timespan: 2020 #> spatial_limits: north = 80, south = 10, east = -50, west = -170 #> data: Data averaged every 20 seconds #> altitude: < 8000 #> hours: All #> local_time: if var `site_utc2lst` is not available, calculated as #> longitude/15*60*60 (John Miller) #> C:\\Users\\sibarrae\\AppData\\Local\\Temp\\RtmpQ33K7x\\file8b4862a53ca7_aircore.csvy obs_read_csvy(paste0(out,\"_\", datasetid, \".csvy\")) #>  [1] \"---\"                                                                #>  [2] \"name: Metadata \"                                                    #>  [3] \"sector: aircore\"                                                    #>  [4] \"timespan: 2020\"                                                     #>  [5] \"spatial_limits: north = 80, south = 10, east = -50, west = -170\"    #>  [6] \"data: Data averaged every 20 seconds\"                               #>  [7] \"altitude: < 8000\"                                                   #>  [8] \"hours: All\"                                                         #>  [9] \"local_time: if var `site_utc2lst` is not available, calculated as\"  #> [10] \"longitude/15*60*60 (John Miller)\"                                   #> [11] \"structure: \"                                                        #> [12] \"Classes 'data.table' and 'data.frame':\\t338 obs. of  19 variables:\" #> [13] \" $ timeUTC                  : chr  \\\"2020-01-30 19:37:20\\\" \\\"..\"    #> [14] \" $ site_code                : chr  \\\"AirCoreNOAA\\\" \\\"AirCore\\\"..\"   #> [15] \" $ lab_1_abbr               : chr  \\\"NOAA\\\" \\\"NOAA\\\" ...\"           #> [16] \" $ dataset_calibration_scale: chr  \\\"WMO CH4 X2004\\\" \\\"WMO C\\\"..\"   #> [17] \" $ year                     : int  2020 2020 2020 2020 202..\"       #> [18] \" $ month                    : int  1 1 1 1 1 ...\"                   #> [19] \" $ day                      : chr  \\\"30\\\" \\\"30\\\" ...\"               #> [20] \" $ hour                     : int  19 19 19 19 19 ...\"              #> [21] \" $ minute                   : int  37 37 38 38 38 ...\"              #> [22] \" $ second                   : int  20 40 0 20 40 ...\"               #> [23] \" $ time                     : num  1.58e+09 1.58e+09 ...\"           #> [24] \" $ time_decimal             : num  2020 2020 ...\"                   #> [25] \" $ value                    : num  1.91e-06 1.91e-06 ...\"           #> [26] \" $ latitude                 : num  39.7 39.7 ...\"                   #> [27] \" $ longitude                : num  -104 -104 ...\"                   #> [28] \" $ altitude_final           : num  7926 7795 ...\"                   #> [29] \" $ type_altitude            : num  1 1 1 1 1 ...\"                   #> [30] \" $ local_time               : chr  \\\"2020-01-30 12:42:14.9\\\"..\"     #> [31] \" $ lh                       : int  12 12 12 12 12 ...\"              #> [32] \" - attr(*, \\\".internal.selfref\\\")=<externalptr> \"                   #> [33] \"NULL\"                                                               #> [34] \"---\" #>                  timeUTC   site_code lab_1_abbr dataset_calibration_scale  year #>                   <POSc>      <char>     <char>                    <char> <int> #>   1: 2020-01-30 19:37:20 AirCoreNOAA       NOAA             WMO CH4 X2004  2020 #>   2: 2020-01-30 19:37:40 AirCoreNOAA       NOAA             WMO CH4 X2004  2020 #>   3: 2020-01-30 19:38:00 AirCoreNOAA       NOAA             WMO CH4 X2004  2020 #>   4: 2020-01-30 19:38:20 AirCoreNOAA       NOAA             WMO CH4 X2004  2020 #>   5: 2020-01-30 19:38:40 AirCoreNOAA       NOAA             WMO CH4 X2004  2020 #>  ---                                                                            #> 334: 2020-12-17 18:54:40 AirCoreNOAA       NOAA             WMO CH4 X2004  2020 #> 335: 2020-12-17 18:55:00 AirCoreNOAA       NOAA             WMO CH4 X2004  2020 #> 336: 2020-12-17 18:55:20 AirCoreNOAA       NOAA             WMO CH4 X2004  2020 #> 337: 2020-12-17 18:55:40 AirCoreNOAA       NOAA             WMO CH4 X2004  2020 #> 338: 2020-12-17 18:56:00 AirCoreNOAA       NOAA             WMO CH4 X2004  2020 #>      month   day  hour minute second       time time_decimal        value #>      <int> <int> <int>  <int>  <int>      <int>        <num>        <num> #>   1:     1    30    19     37     20 1580413040     2020.081 1.912662e-06 #>   2:     1    30    19     37     40 1580413060     2020.081 1.913034e-06 #>   3:     1    30    19     38      0 1580413080     2020.081 1.913344e-06 #>   4:     1    30    19     38     20 1580413100     2020.081 1.913346e-06 #>   5:     1    30    19     38     40 1580413120     2020.081 1.913906e-06 #>  ---                                                                      #> 334:    12    17    18     54     40 1608231280     2020.961 1.958356e-06 #> 335:    12    17    18     55      0 1608231300     2020.961 1.958784e-06 #> 336:    12    17    18     55     20 1608231320     2020.961 1.959021e-06 #> 337:    12    17    18     55     40 1608231340     2020.961 1.958858e-06 #> 338:    12    17    18     56      0 1608231360     2020.961 1.959788e-06 #>      latitude longitude altitude_final type_altitude          local_time    lh #>         <num>     <num>          <num>         <int>              <POSc> <int> #>   1:  39.6817 -103.7711       7926.282             1 2020-01-30 12:42:14    12 #>   2:  39.6792 -103.7686       7795.292             1 2020-01-30 12:42:35    12 #>   3:  39.6760 -103.7657       7647.354             1 2020-01-30 12:42:56    12 #>   4:  39.6726 -103.7625       7500.024             1 2020-01-30 12:43:16    12 #>   5:  39.6695 -103.7596       7357.494             1 2020-01-30 12:43:37    12 #>  ---                                                                           #> 334:  39.4766 -103.8517       2353.402             1 2020-12-17 11:59:15    11 #> 335:  39.4775 -103.8506       2233.901             1 2020-12-17 11:59:35    11 #> 336:  39.4784 -103.8497       2121.761             1 2020-12-17 11:59:56    11 #> 337:  39.4798 -103.8488       2007.779             1 2020-12-17 12:00:16    12 #> 338:  39.4813 -103.8481       1905.712             1 2020-12-17 12:00:36    12"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircore.html","id":"receptors","dir":"Articles","previous_headings":"","what":"Receptors","title":"aircore","text":"Now can last step generating receptor list files. Now filter selected columns can round altitude also Now can format time variables two digits column indicate AGL ASL Finally, save receptors","code":"receptor <- master[, c(\"site_code\",                        \"year\",                        \"month\",                        \"day\",                        \"hour\",                        \"minute\",                        \"second\",                        \"latitude\",                        \"longitude\",                        \"altitude_final\",                        \"type_altitude\")] receptor$altitude_final <- round(receptor$altitude_final) receptor <- obs_format(receptor,                         spf =  c(\"month\", \"day\",                                  \"hour\", \"minute\", \"second\")) receptor_agl <- receptor[type_altitude == 0] receptor_asl <- receptor[type_altitude == 1] if(nrow(receptor_agl) > 0) {   message(paste0(out, \"_\", datasetid, \"_receptor_AGL.txt\"), \"\\n\")    fwrite(x = receptor_agl,          file = paste0(out, \"_\", datasetid, \"_receptor_AGL.txt\"),          sep = \" \") }  if(nrow(receptor_asl) > 0) {   message(paste0(out, \"_\", datasetid, \"_receptor_ASL.txt\"), \"\\n\")    fwrite(x = receptor_asl,          file = paste0(out, \"_\", datasetid, \"receptor_ASL.txt\"),          sep = \" \")  } #> C:\\Users\\sibarrae\\AppData\\Local\\Temp\\RtmpQ33K7x\\file8b4862a53ca7_aircore_receptor_ASL.txt"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircore.html","id":"plot","dir":"Articles","previous_headings":"","what":"Plot","title":"aircore","text":"Finally, just plot data, run locally","code":"obs_plot(df3, time = \"timeUTC\", yfactor = 1e9) #> Found the following sites:  #> [1] AirCoreNOAA #> Plotting the following sites:  #> [1] AirCoreNOAA #> png  #>   2 library(sf) x <- st_as_sf(df3, coords = c(\"longitude\", \"latitude\"), crs = 4326) plot(x[\"value\"], axes = T, reset = F) maps::map(add = T)"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-flask.html","id":"checks-and-definitions","dir":"Articles","previous_headings":"","what":"Checks and definitions","title":"aircraft-flask","text":"check altitude, intake_height, altitude_final elevation. altitude_final column intake_height, added match column obs_read text files. temporal range data also check dimensions data","code":"north <- 80 south <- 10 west <- -170 east <- -50 max_altitude <- 8000 yy <- 2022 df[, c(\"altitude\", \"altitude_final\", \"intake_height\", \"elevation\")] #>        altitude altitude_final intake_height elevation #>           <num>          <num>         <num>     <num> #>     1:     4270           4270            NA         0 #>     2:     4270           4270            NA         0 #>     3:     4270           4270            NA         0 #>     4:     4270           4270            NA         0 #>     5:     4270           4270            NA         0 #>    ---                                                 #> 18462:    12040          12040            NA        NA #> 18463:    11970          11970            NA        NA #> 18464:    11870          11870            NA        NA #> 18465:    12380          12380            NA        NA #> 18466:    12280          12280            NA        NA range(df$year) #> [1] 1991 2022 dim(df) #> [1] 18466    46"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-flask.html","id":"filters","dir":"Articles","previous_headings":"","what":"Filters","title":"aircraft-flask","text":"","code":"df <- df[year == yy]  df <- df[altitude_final < max_altitude &            latitude < north &            latitude > south &            longitude < east &            longitude > west] dim(df)"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-flask.html","id":"adding-time-as-posixct-class","dir":"Articles","previous_headings":"","what":"Adding time as POSIXct class","title":"aircraft-flask","text":"","code":"df <- obs_addtime(df) df[, \"timeUTC\"] #>                timeUTC #>                 <POSc> #> 1: 2020-09-30 22:46:20"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-flask.html","id":"cut-time","dir":"Articles","previous_headings":"","what":"Cut time","title":"aircraft-flask","text":"now can cut time every 20 seconds. can chosse frequency well.","code":"df$sec2 <- obs_freq(x = df$second,                      freq = seq(0, 59, 20)) df[, c(\"second\", \"sec2\")] #>    second  sec2 #>     <int> <num> #> 1:     20     0"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-flask.html","id":"aggregate-data","dir":"Articles","previous_headings":"","what":"Aggregate data","title":"aircraft-flask","text":"now need add column key_time, used aggregate variables","code":"df$key_time <- ISOdatetime(year = df$year,                            month = df$month,                            day = df$day,                            hour = df$hour,                            min = df$minute,                            sec = df$sec2,                            tz = \"UTC\") df[, c(\"timeUTC\", \"key_time\")] #>                timeUTC            key_time #>                 <POSc>              <POSc> #> 1: 2020-09-30 22:46:20 2020-09-30 22:46:00 df2 <- obs_agg(df, cols =  c(\"year\",                              \"month\",                              \"day\",                              \"hour\",                              \"minute\",                              \"second\",                              \"time\",                              \"time_decimal\",                              \"value\",                              \"latitude\",                              \"longitude\",                              \"altitude_final\",                              \"elevation\",                              \"intake_height\",                              # \"gps_altitude\",                              # \"pressure\",                              # \"pressure_altitude\",                              # \"u\", \"v\", \"temperature\",                              \"type_altitude\"))"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-flask.html","id":"add-local-time","dir":"Articles","previous_headings":"","what":"Add local time","title":"aircraft-flask","text":"Now add local time","code":"df3 <- obs_addltime(df2) setorderv(df3, cols = c(\"site_code\", \"timeUTC\"),           order = c(-1, 1)) df3 #>                timeUTC site_code lab_1_abbr dataset_calibration_scale  year #>                 <POSc>    <char>     <char>                    <char> <int> #> 1: 2020-09-30 22:46:00       CON       NIES            WMO CH4 X2004A  2020 #>    month    day  hour minute second       time time_decimal        value #>    <int> <char> <int>  <int>  <int>      <num>        <num>        <num> #> 1:     9     30    22     46      0 1601505960     2020.748 1.900418e-06 #>    latitude longitude altitude_final elevation intake_height type_altitude #>       <num>     <num>          <num>     <num>         <num>         <num> #> 1:    34.74      -120           7774       NaN           NaN             1 #>             local_time    lh #>                 <POSc> <int> #> 1: 2020-09-30 14:46:00    14"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-flask.html","id":"master","dir":"Articles","previous_headings":"","what":"Master","title":"aircraft-flask","text":"generating receptors list, databe required information may replace missing values nine nines. commented #master[.na(master)] <- 999999999 transform time variables character round coordinates 4 digits","code":"master <- df3 master$timeUTC <- as.character(master$timeUTC) master$local_time <- as.character(master$local_time) master$latitude <- round(master$latitude, 4) master$longitude <- round(master$longitude, 4)"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-flask.html","id":"save-master","dir":"Articles","previous_headings":"","what":"Save master","title":"aircraft-flask","text":"Finally save master file","code":"out <- tempfile()"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-flask.html","id":"txt","dir":"Articles","previous_headings":"Save master","what":"txt","title":"aircraft-flask","text":"","code":"message(paste0(out,\"_\", datasetid, \".txt\\n\")) fwrite(master,        paste0(out,\"_\", datasetid, \".txt\"),        sep = \" \") #> /tmp/RtmpkGT8ZC/file5c08562a600_aircraft-flask.txt"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-flask.html","id":"csv","dir":"Articles","previous_headings":"Save master","what":"csv","title":"aircraft-flask","text":"","code":"message(paste0(out,\"_\", datasetid, \".csv\\n\")) fwrite(master,        paste0(out,\"_\", datasetid, \".csv\"),        sep = \",\") #> /tmp/RtmpkGT8ZC/file5c08562a600_aircraft-flask.csv"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-flask.html","id":"csvy","dir":"Articles","previous_headings":"Save master","what":"csvy","title":"aircraft-flask","text":"CSVY csv files YAML header include metadata tabulated text files","code":"cat(\"\\nAdding notes in csvy:\\n\") notes <- c(paste0(\"sector: \", datasetid),            paste0(\"timespan: \", yy),            paste0(\"spatial_limits: north = \", north, \", south = \", south, \", east = \", east, \", west = \", west),            \"data: Data averaged every 20 seconds\",            paste0(\"altitude: < \", max_altitude),            \"hours: All\",            \"local_time: if var `site_utc2lst` is not available, calculated as\",            \"longitude/15*60*60 (John Miller)\")  cat(notes, sep = \"\\n\")  message(paste0(out,\"_\", datasetid, \".csvy\\n\")) obs_write_csvy(dt = master,                notes = notes,                out = paste0(out,\"_\", datasetid, \".csvy\")) #>  #> Adding notes in csvy: #> sector: aircraft-flask #> timespan: 2020 #> spatial_limits: north = 80, south = 10, east = -50, west = -170 #> data: Data averaged every 20 seconds #> altitude: < 8000 #> hours: All #> local_time: if var `site_utc2lst` is not available, calculated as #> longitude/15*60*60 (John Miller) #> /tmp/RtmpkGT8ZC/file5c08562a600_aircraft-flask.csvy obs_read_csvy(paste0(out,\"_\", datasetid, \".csvy\")) #>  [1] \"---\"                                                               #>  [2] \"name: Metadata \"                                                   #>  [3] \"sector: aircraft-flask\"                                            #>  [4] \"timespan: 2020\"                                                    #>  [5] \"spatial_limits: north = 80, south = 10, east = -50, west = -170\"   #>  [6] \"data: Data averaged every 20 seconds\"                              #>  [7] \"altitude: < 8000\"                                                  #>  [8] \"hours: All\"                                                        #>  [9] \"local_time: if var `site_utc2lst` is not available, calculated as\" #> [10] \"longitude/15*60*60 (John Miller)\"                                  #> [11] \"structure: \"                                                       #> [12] \"Classes 'data.table' and 'data.frame':\\t1 obs. of  21 variables:\"  #> [13] \" $ timeUTC                  : chr \\\"2020-09-30 22:46:00\\\"\"         #> [14] \" $ site_code                : chr \\\"CON\\\"\"                         #> [15] \" $ lab_1_abbr               : chr \\\"NIES\\\"\"                        #> [16] \" $ dataset_calibration_scale: chr \\\"WMO CH4 X2004A\\\"\"              #> [17] \" $ year                     : int 2020\"                            #> [18] \" $ month                    : int 9\"                               #> [19] \" $ day                      : chr \\\"30\\\"\"                          #> [20] \" $ hour                     : int 22\"                              #> [21] \" $ minute                   : int 46\"                              #> [22] \" $ second                   : int 0\"                               #> [23] \" $ time                     : num 1.6e+09\"                         #> [24] \" $ time_decimal             : num 2021\"                            #> [25] \" $ value                    : num 1.9e-06\"                         #> [26] \" $ latitude                 : num 34.7\"                            #> [27] \" $ longitude                : num -120\"                            #> [28] \" $ altitude_final           : num 7774\"                            #> [29] \" $ elevation                : num NaN\"                             #> [30] \" $ intake_height            : num NaN\"                             #> [31] \" $ type_altitude            : num 1\"                               #> [32] \" $ local_time               : chr \\\"2020-09-30 14:46:00\\\"\"         #> [33] \" $ lh                       : int 14\"                              #> [34] \" - attr(*, \\\".internal.selfref\\\")=<externalptr> \"                  #> [35] \"NULL\"                                                              #> [36] \"---\" #>                timeUTC site_code lab_1_abbr dataset_calibration_scale  year #>                 <POSc>    <char>     <char>                    <char> <int> #> 1: 2020-09-30 22:46:00       CON       NIES            WMO CH4 X2004A  2020 #>    month   day  hour minute second       time time_decimal        value #>    <int> <int> <int>  <int>  <int>      <int>        <num>        <num> #> 1:     9    30    22     46      0 1601505960     2020.748 1.900418e-06 #>    latitude longitude altitude_final elevation intake_height type_altitude #>       <num>     <int>          <int>    <lgcl>        <lgcl>         <int> #> 1:    34.74      -120           7774        NA            NA             1 #>             local_time    lh #>                 <POSc> <int> #> 1: 2020-09-30 14:46:00    14"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-flask.html","id":"receptors","dir":"Articles","previous_headings":"","what":"Receptors","title":"aircraft-flask","text":"Now can last step generating receptor list files. Now filter selected columns can round altitude also Now can format time variables two digits column indicate AGL ASL Finally, save receptors","code":"receptor <- master[, c(\"site_code\",                        \"year\",                        \"month\",                        \"day\",                        \"hour\",                        \"minute\",                        \"second\",                        \"latitude\",                        \"longitude\",                        \"altitude_final\",                        \"type_altitude\")] receptor$altitude_final <- round(receptor$altitude_final) receptor <- obs_format(receptor,                         spf =  c(\"month\", \"day\",                                  \"hour\", \"minute\", \"second\")) receptor_agl <- receptor[type_altitude == 0] receptor_asl <- receptor[type_altitude == 1] if(nrow(receptor_agl) > 0) {   message(paste0(out, \"_\", datasetid, \"_receptor_AGL.txt\"), \"\\n\")    fwrite(x = receptor_agl,          file = paste0(out, \"_\", datasetid, \"_receptor_AGL.txt\"),          sep = \" \") }  if(nrow(receptor_asl) > 0) {   message(paste0(out, \"_\", datasetid, \"_receptor_ASL.txt\"), \"\\n\")    fwrite(x = receptor_asl,          file = paste0(out, \"_\", datasetid, \"receptor_ASL.txt\"),          sep = \" \")  } #> /tmp/RtmpkGT8ZC/file5c08562a600_aircraft-flask_receptor_ASL.txt"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-flask.html","id":"plot","dir":"Articles","previous_headings":"","what":"Plot","title":"aircraft-flask","text":"Finally, just plot data, run locally","code":"obs_plot(df3, time = \"timeUTC\", yfactor = 1e9) library(sf) x <- st_as_sf(df3, coords = c(\"longitude\", \"latitude\"), crs = 4326) plot(x[\"value\"], axes = T, reset = F) maps::map(add = T)"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-insitu.html","id":"checks-and-definitions","dir":"Articles","previous_headings":"","what":"Checks and definitions","title":"aircraft-insitu","text":"check altitude, intake_height, altitude_final elevation. altitude_final column intake_height, added match column obs_read text files. temporal range data also check dimensions data","code":"north <- 80 south <- 10 west <- -170 east <- -50 max_altitude <- 8000 yy <- 2020 df[, c(\"altitude\", \"altitude_final\", \"intake_height\", \"elevation\")] #>          altitude altitude_final intake_height elevation #>             <num>          <num>         <num>     <num> #>       1:  1617.03        1617.03            NA        NA #>       2:  1617.04        1617.04            NA        NA #>       3:  1617.03        1617.03            NA        NA #>       4:  1630.93        1630.93            NA        NA #>       5:  1650.95        1650.95            NA        NA #>      ---                                                 #> 3158219:  1239.50        1239.50         101.5      1138 #> 3158220:  1213.20        1213.20          72.2      1141 #> 3158221:  1199.20        1199.20          56.2      1143 #> 3158222:  1181.10        1181.10          41.1      1140 #> 3158223:  1163.50        1163.50          25.5      1138 range(df$year) dim(df) #> [1] 2003 2022"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-insitu.html","id":"filters","dir":"Articles","previous_headings":"","what":"Filters","title":"aircraft-insitu","text":"","code":"df <- df[year == yy]  df <- df[altitude_final < max_altitude &            latitude < north &            latitude > south &            longitude < east &            longitude > west] dim(df) #> [1] 13497    60"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-insitu.html","id":"adding-time-as-posixct-class","dir":"Articles","previous_headings":"","what":"Adding time as POSIXct class","title":"aircraft-insitu","text":"","code":"df <- obs_addtime(df) df[, \"timeUTC\"] #>                    timeUTC #>                     <POSc> #>     1: 2020-01-08 22:59:55 #>     2: 2020-01-08 23:00:05 #>     3: 2020-01-08 23:00:15 #>     4: 2020-01-08 23:00:25 #>     5: 2020-01-08 23:00:35 #>    ---                     #> 13493: 2020-11-07 23:16:28 #> 13494: 2020-11-07 23:16:32 #> 13495: 2020-11-07 23:16:36 #> 13496: 2020-11-07 23:16:40 #> 13497: 2020-11-07 23:16:44"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-insitu.html","id":"cut-time","dir":"Articles","previous_headings":"","what":"Cut time","title":"aircraft-insitu","text":"now can cut time every 20 seconds. can chosse frequency well.","code":"df$sec2 <- obs_freq(x = df$second,                      freq = seq(0, 59, 20)) df[, c(\"second\", \"sec2\")] #>        second  sec2 #>         <int> <num> #>     1:     55    40 #>     2:      5     0 #>     3:     15     0 #>     4:     25    20 #>     5:     35    20 #>    ---              #> 13493:     28    20 #> 13494:     32    20 #> 13495:     36    20 #> 13496:     40    20 #> 13497:     44    40"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-insitu.html","id":"aggregate-data","dir":"Articles","previous_headings":"","what":"Aggregate data","title":"aircraft-insitu","text":"now need add column key_time, used aggregate variables","code":"df$key_time <- ISOdatetime(year = df$year,                            month = df$month,                            day = df$day,                            hour = df$hour,                            min = df$minute,                            sec = df$sec2,                            tz = \"UTC\") df[, c(\"timeUTC\", \"key_time\")] #>                    timeUTC            key_time #>                     <POSc>              <POSc> #>     1: 2020-01-08 22:59:55 2020-01-08 22:59:40 #>     2: 2020-01-08 23:00:05 2020-01-08 23:00:00 #>     3: 2020-01-08 23:00:15 2020-01-08 23:00:00 #>     4: 2020-01-08 23:00:25 2020-01-08 23:00:20 #>     5: 2020-01-08 23:00:35 2020-01-08 23:00:20 #>    ---                                         #> 13493: 2020-11-07 23:16:28 2020-11-07 23:16:20 #> 13494: 2020-11-07 23:16:32 2020-11-07 23:16:20 #> 13495: 2020-11-07 23:16:36 2020-11-07 23:16:20 #> 13496: 2020-11-07 23:16:40 2020-11-07 23:16:20 #> 13497: 2020-11-07 23:16:44 2020-11-07 23:16:40 df2 <- obs_agg(df, cols =  c(\"year\",                              \"month\",                              \"day\",                              \"hour\",                              \"minute\",                              \"second\",                              \"time\",                              \"time_decimal\",                              \"value\",                              \"latitude\",                              \"longitude\",                              \"altitude_final\",                              \"elevation\",                              \"intake_height\",                              \"gps_altitude\",                              \"pressure\",                              \"pressure_altitude\",                              \"u\", \"v\", \"temperature\",                              \"type_altitude\")) #> Adding time"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-insitu.html","id":"add-local-time","dir":"Articles","previous_headings":"","what":"Add local time","title":"aircraft-insitu","text":"Now add local time","code":"df3 <- obs_addltime(df2) setorderv(df3, cols = c(\"site_code\", \"timeUTC\"),           order = c(-1, 1)) df3 #>                   timeUTC site_code  lab_1_abbr dataset_calibration_scale  year #>                    <POSc>    <char>      <char>                    <char> <int> #>    1: 2020-01-08 22:59:40     IAGOS KIT/IMK-ASF            WMO CH4 X2004A  2020 #>    2: 2020-01-08 23:00:00     IAGOS KIT/IMK-ASF            WMO CH4 X2004A  2020 #>    3: 2020-01-08 23:00:20     IAGOS KIT/IMK-ASF            WMO CH4 X2004A  2020 #>    4: 2020-01-08 23:00:40     IAGOS KIT/IMK-ASF            WMO CH4 X2004A  2020 #>    5: 2020-01-08 23:01:00     IAGOS KIT/IMK-ASF            WMO CH4 X2004A  2020 #>   ---                                                                           #> 2799: 2020-11-07 23:15:20     IAGOS     MPI-BGC            WMO CH4 X2004A  2020 #> 2800: 2020-11-07 23:15:40     IAGOS     MPI-BGC            WMO CH4 X2004A  2020 #> 2801: 2020-11-07 23:16:00     IAGOS     MPI-BGC            WMO CH4 X2004A  2020 #> 2802: 2020-11-07 23:16:20     IAGOS     MPI-BGC            WMO CH4 X2004A  2020 #> 2803: 2020-11-07 23:16:40     IAGOS     MPI-BGC            WMO CH4 X2004A  2020 #>       month    day  hour minute second       time time_decimal        value #>       <int> <char> <int>  <int>  <int>      <num>        <num>        <num> #>    1:     1     08    22     59     40 1578524380     2020.022 1.909800e-06 #>    2:     1     08    23      0      0 1578524400     2020.022 1.908850e-06 #>    3:     1     08    23      0     20 1578524420     2020.022 1.907750e-06 #>    4:     1     08    23      0     40 1578524440     2020.022 1.908150e-06 #>    5:     1     08    23      1      0 1578524460     2020.022 1.907800e-06 #>   ---                                                                       #> 2799:    11     07    23     15     20 1604790920     2020.852 1.923580e-06 #> 2800:    11     07    23     15     40 1604790940     2020.852 1.923100e-06 #> 2801:    11     07    23     16      0 1604790960     2020.852 1.921983e-06 #> 2802:    11     07    23     16     20 1604790980     2020.852 1.920440e-06 #> 2803:    11     07    23     16     40 1604791000     2020.852 1.919900e-06 #>       latitude  longitude altitude_final elevation intake_height gps_altitude #>          <num>      <num>          <num>     <num>         <num>        <num> #>    1: 34.47900 -116.40900       7983.100       NaN           NaN          NaN #>    2: 34.46750 -116.43600       7907.000       NaN           NaN          NaN #>    3: 34.45250 -116.47200       7796.400       NaN           NaN          NaN #>    4: 34.43750 -116.50750       7615.250       NaN           NaN          NaN #>    5: 34.42250 -116.54300       7413.900       NaN           NaN          NaN #>   ---                                                                         #> 2799: 44.03318  -78.13772       7600.000       NaN           NaN          NaN #> 2800: 44.04950  -78.08965       7696.700       NaN           NaN          NaN #> 2801: 44.06742  -78.03515       7807.367       NaN           NaN          NaN #> 2802: 44.08706  -77.97460       7931.040       NaN           NaN          NaN #> 2803: 44.09780  -77.94160       7998.500       NaN           NaN          NaN #>       pressure pressure_altitude           u         v temperature #>          <num>             <num>       <num>     <num>       <num> #>    1:   481.30               NaN    20.82002 -4.235882      257.65 #>    2:   485.65               NaN    21.46781 -3.550151      258.30 #>    3:   491.60               NaN    22.83117 -2.518281      259.05 #>    4:   505.15               NaN    25.19994 -1.720480      260.95 #>    5:   517.75               NaN    26.27870 -3.928331      262.50 #>   ---                                                              #> 2799:      NaN               NaN -9999.99023       NaN         NaN #> 2800:      NaN               NaN -9999.99023       NaN         NaN #> 2801:      NaN               NaN -9999.99023       NaN         NaN #> 2802:      NaN               NaN -9999.99023       NaN         NaN #> 2803:      NaN               NaN -9999.99023       NaN         NaN #>       type_altitude          local_time    lh #>               <num>              <POSc> <int> #>    1:             1 2020-01-08 15:14:01    15 #>    2:             1 2020-01-08 15:14:15    15 #>    3:             1 2020-01-08 15:14:26    15 #>    4:             1 2020-01-08 15:14:38    15 #>    5:             1 2020-01-08 15:14:49    15 #>   ---                                         #> 2799:             1 2020-11-07 18:02:46    18 #> 2800:             1 2020-11-07 18:03:18    18 #> 2801:             1 2020-11-07 18:03:51    18 #> 2802:             1 2020-11-07 18:04:26    18 #> 2803:             1 2020-11-07 18:04:54    18"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-insitu.html","id":"master","dir":"Articles","previous_headings":"","what":"Master","title":"aircraft-insitu","text":"generating receptors list, databe required information may replace missing values nine nines. commented #master[.na(master)] <- 999999999 transform time variables character round coordinates 4 digits","code":"master <- df3 master$timeUTC <- as.character(master$timeUTC) master$local_time <- as.character(master$local_time) master$latitude <- round(master$latitude, 4) master$longitude <- round(master$longitude, 4)"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-insitu.html","id":"save-master","dir":"Articles","previous_headings":"","what":"Save master","title":"aircraft-insitu","text":"Finally save master file","code":"out <- tempfile()"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-insitu.html","id":"txt","dir":"Articles","previous_headings":"Save master","what":"txt","title":"aircraft-insitu","text":"","code":"message(paste0(out,\"_\", datasetid, \".txt\\n\")) fwrite(master,        paste0(out,\"_\", datasetid, \".txt\"),        sep = \" \") #> /tmp/RtmpTAXDPP/file55421a4e9ac8_aircraft-insitu.txt"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-insitu.html","id":"csv","dir":"Articles","previous_headings":"Save master","what":"csv","title":"aircraft-insitu","text":"","code":"message(paste0(out,\"_\", datasetid, \".csv\\n\")) fwrite(master,        paste0(out,\"_\", datasetid, \".csv\"),        sep = \",\") #> /tmp/RtmpTAXDPP/file55421a4e9ac8_aircraft-insitu.csv"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-insitu.html","id":"csvy","dir":"Articles","previous_headings":"Save master","what":"csvy","title":"aircraft-insitu","text":"CSVY csv files YAML header include metadata tabulated text files","code":"cat(\"\\nAdding notes in csvy:\\n\") notes <- c(paste0(\"sector: \", datasetid),            paste0(\"timespan: \", yy),            paste0(\"spatial_limits: north = \", north, \", south = \", south, \", east = \", east, \", west = \", west),            \"data: Data averaged every 20 seconds\",            paste0(\"altitude: < \", max_altitude),            \"hours: All\",            \"local_time: if var `site_utc2lst` is not available, calculated as\",            \"longitude/15*60*60 (John Miller)\")  cat(notes, sep = \"\\n\")  message(paste0(out,\"_\", datasetid, \".csvy\\n\")) obs_write_csvy(dt = master,                notes = notes,                out = paste0(out,\"_\", datasetid, \".csvy\")) #>  #> Adding notes in csvy: #> sector: aircraft-insitu #> timespan: 2020 #> spatial_limits: north = 80, south = 10, east = -50, west = -170 #> data: Data averaged every 20 seconds #> altitude: < 8000 #> hours: All #> local_time: if var `site_utc2lst` is not available, calculated as #> longitude/15*60*60 (John Miller) #> /tmp/RtmpTAXDPP/file55421a4e9ac8_aircraft-insitu.csvy obs_read_csvy(paste0(out,\"_\", datasetid, \".csvy\")) #>  [1] \"---\"                                                                 #>  [2] \"name: Metadata \"                                                     #>  [3] \"sector: aircraft-insitu\"                                             #>  [4] \"timespan: 2020\"                                                      #>  [5] \"spatial_limits: north = 80, south = 10, east = -50, west = -170\"     #>  [6] \"data: Data averaged every 20 seconds\"                                #>  [7] \"altitude: < 8000\"                                                    #>  [8] \"hours: All\"                                                          #>  [9] \"local_time: if var `site_utc2lst` is not available, calculated as\"   #> [10] \"longitude/15*60*60 (John Miller)\"                                    #> [11] \"structure: \"                                                         #> [12] \"Classes 'data.table' and 'data.frame':\\t2803 obs. of  27 variables:\" #> [13] \" $ timeUTC                  : chr  \\\"2020-01-08 22:59:40\\\" \\\"..\"     #> [14] \" $ site_code                : chr  \\\"IAGOS\\\" \\\"IAGOS\\\" ...\"          #> [15] \" $ lab_1_abbr               : chr  \\\"KIT/IMK-ASF\\\" \\\"KIT/IMK\\\"..\"    #> [16] \" $ dataset_calibration_scale: chr  \\\"WMO CH4 X2004A\\\" \\\"WMO \\\"..\"    #> [17] \" $ year                     : int  2020 2020 2020 2020 202..\"        #> [18] \" $ month                    : int  1 1 1 1 1 ...\"                    #> [19] \" $ day                      : chr  \\\"08\\\" \\\"08\\\" ...\"                #> [20] \" $ hour                     : int  22 23 23 23 23 ...\"               #> [21] \" $ minute                   : int  59 0 0 0 1 ...\"                   #> [22] \" $ second                   : int  40 0 20 40 0 ...\"                 #> [23] \" $ time                     : num  1.58e+09 1.58e+09 ...\"            #> [24] \" $ time_decimal             : num  2020 2020 ...\"                    #> [25] \" $ value                    : num  1.91e-06 1.91e-06 ...\"            #> [26] \" $ latitude                 : num  34.5 34.5 ...\"                    #> [27] \" $ longitude                : num  -116 -116 ...\"                    #> [28] \" $ altitude_final           : num  7983 7907 ...\"                    #> [29] \" $ elevation                : num  NaN NaN NaN NaN NaN ...\"          #> [30] \" $ intake_height            : num  NaN NaN NaN NaN NaN ...\"          #> [31] \" $ gps_altitude             : num  NaN NaN NaN NaN NaN ...\"          #> [32] \" $ pressure                 : num  481 486 ...\"                      #> [33] \" $ pressure_altitude        : num  NaN NaN NaN NaN NaN ...\"          #> [34] \" $ u                        : num  20.8 21.5 ...\"                    #> [35] \" $ v                        : num  -4.24 -3.55 ...\"                  #> [36] \" $ temperature              : num  258 258 ...\"                      #> [37] \" $ type_altitude            : num  1 1 1 1 1 ...\"                    #> [38] \" $ local_time               : chr  \\\"2020-01-08 15:14:01.8\\\"..\"      #> [39] \" $ lh                       : int  15 15 15 15 15 ...\"               #> [40] \" - attr(*, \\\".internal.selfref\\\")=<externalptr> \"                    #> [41] \"NULL\"                                                                #> [42] \"---\" #>                   timeUTC site_code  lab_1_abbr dataset_calibration_scale  year #>                    <POSc>    <char>      <char>                    <char> <int> #>    1: 2020-01-08 22:59:40     IAGOS KIT/IMK-ASF            WMO CH4 X2004A  2020 #>    2: 2020-01-08 23:00:00     IAGOS KIT/IMK-ASF            WMO CH4 X2004A  2020 #>    3: 2020-01-08 23:00:20     IAGOS KIT/IMK-ASF            WMO CH4 X2004A  2020 #>    4: 2020-01-08 23:00:40     IAGOS KIT/IMK-ASF            WMO CH4 X2004A  2020 #>    5: 2020-01-08 23:01:00     IAGOS KIT/IMK-ASF            WMO CH4 X2004A  2020 #>   ---                                                                           #> 2799: 2020-11-07 23:15:20     IAGOS     MPI-BGC            WMO CH4 X2004A  2020 #> 2800: 2020-11-07 23:15:40     IAGOS     MPI-BGC            WMO CH4 X2004A  2020 #> 2801: 2020-11-07 23:16:00     IAGOS     MPI-BGC            WMO CH4 X2004A  2020 #> 2802: 2020-11-07 23:16:20     IAGOS     MPI-BGC            WMO CH4 X2004A  2020 #> 2803: 2020-11-07 23:16:40     IAGOS     MPI-BGC            WMO CH4 X2004A  2020 #>       month   day  hour minute second       time time_decimal        value #>       <int> <int> <int>  <int>  <int>      <int>        <num>        <num> #>    1:     1     8    22     59     40 1578524380     2020.022 1.909800e-06 #>    2:     1     8    23      0      0 1578524400     2020.022 1.908850e-06 #>    3:     1     8    23      0     20 1578524420     2020.022 1.907750e-06 #>    4:     1     8    23      0     40 1578524440     2020.022 1.908150e-06 #>    5:     1     8    23      1      0 1578524460     2020.022 1.907800e-06 #>   ---                                                                      #> 2799:    11     7    23     15     20 1604790920     2020.852 1.923580e-06 #> 2800:    11     7    23     15     40 1604790940     2020.852 1.923100e-06 #> 2801:    11     7    23     16      0 1604790960     2020.852 1.921983e-06 #> 2802:    11     7    23     16     20 1604790980     2020.852 1.920440e-06 #> 2803:    11     7    23     16     40 1604791000     2020.852 1.919900e-06 #>       latitude longitude altitude_final elevation intake_height gps_altitude #>          <num>     <num>          <num>    <lgcl>        <lgcl>       <lgcl> #>    1:  34.4790 -116.4090       7983.100        NA            NA           NA #>    2:  34.4675 -116.4360       7907.000        NA            NA           NA #>    3:  34.4525 -116.4720       7796.400        NA            NA           NA #>    4:  34.4375 -116.5075       7615.250        NA            NA           NA #>    5:  34.4225 -116.5430       7413.900        NA            NA           NA #>   ---                                                                        #> 2799:  44.0332  -78.1377       7600.000        NA            NA           NA #> 2800:  44.0495  -78.0896       7696.700        NA            NA           NA #> 2801:  44.0674  -78.0351       7807.367        NA            NA           NA #> 2802:  44.0871  -77.9746       7931.040        NA            NA           NA #> 2803:  44.0978  -77.9416       7998.500        NA            NA           NA #>       pressure pressure_altitude           u         v temperature #>          <num>            <lgcl>       <num>     <num>       <num> #>    1:   481.30                NA    20.82002 -4.235882      257.65 #>    2:   485.65                NA    21.46781 -3.550151      258.30 #>    3:   491.60                NA    22.83117 -2.518281      259.05 #>    4:   505.15                NA    25.19994 -1.720480      260.95 #>    5:   517.75                NA    26.27870 -3.928331      262.50 #>   ---                                                              #> 2799:       NA                NA -9999.99023        NA          NA #> 2800:       NA                NA -9999.99023        NA          NA #> 2801:       NA                NA -9999.99023        NA          NA #> 2802:       NA                NA -9999.99023        NA          NA #> 2803:       NA                NA -9999.99023        NA          NA #>       type_altitude          local_time    lh #>               <int>              <POSc> <int> #>    1:             1 2020-01-08 15:14:01    15 #>    2:             1 2020-01-08 15:14:15    15 #>    3:             1 2020-01-08 15:14:26    15 #>    4:             1 2020-01-08 15:14:38    15 #>    5:             1 2020-01-08 15:14:49    15 #>   ---                                         #> 2799:             1 2020-11-07 18:02:46    18 #> 2800:             1 2020-11-07 18:03:18    18 #> 2801:             1 2020-11-07 18:03:51    18 #> 2802:             1 2020-11-07 18:04:26    18 #> 2803:             1 2020-11-07 18:04:54    18"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-insitu.html","id":"receptors","dir":"Articles","previous_headings":"","what":"Receptors","title":"aircraft-insitu","text":"Now can last step generating receptor list files. Now filter selected columns can round altitude also Now can format time variables two digits column indicate AGL ASL Finally, save receptors","code":"receptor <- master[, c(\"site_code\",                        \"year\",                        \"month\",                        \"day\",                        \"hour\",                        \"minute\",                        \"second\",                        \"latitude\",                        \"longitude\",                        \"altitude_final\",                        \"type_altitude\")] receptor$altitude_final <- round(receptor$altitude_final) receptor <- obs_format(receptor,                         spf =  c(\"month\", \"day\",                                  \"hour\", \"minute\", \"second\")) receptor_agl <- receptor[type_altitude == 0] receptor_asl <- receptor[type_altitude == 1] if(nrow(receptor_agl) > 0) {   message(paste0(out, \"_\", datasetid, \"_receptor_AGL.txt\"), \"\\n\")    fwrite(x = receptor_agl,          file = paste0(out, \"_\", datasetid, \"_receptor_AGL.txt\"),          sep = \" \") }  if(nrow(receptor_asl) > 0) {   message(paste0(out, \"_\", datasetid, \"_receptor_ASL.txt\"), \"\\n\")    fwrite(x = receptor_asl,          file = paste0(out, \"_\", datasetid, \"receptor_ASL.txt\"),          sep = \" \")  } #> /tmp/RtmpTAXDPP/file55421a4e9ac8_aircraft-insitu_receptor_ASL.txt"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-insitu.html","id":"plot","dir":"Articles","previous_headings":"","what":"Plot","title":"aircraft-insitu","text":"Finally, just plot data, run locally","code":"obs_plot(df3, time = \"timeUTC\", yfactor = 1e9) library(sf) x <- st_as_sf(df3, coords = c(\"longitude\", \"latitude\"), crs = 4326) plot(x[\"value\"], axes = T, reset = F) maps::map(add = T)"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-pfp.html","id":"checks-and-definitions","dir":"Articles","previous_headings":"","what":"Checks and definitions","title":"aircraft-pfp","text":"check altitude, intake_height, altitude_final elevation. altitude_final column intake_height, added match column obs_read text files. temporal range data also check dimensions data","code":"north <- 80 south <- 10 west <- -170 east <- -50 max_altitude <- 8000 yy <- 2020 df[, c(\"altitude\", \"altitude_final\", \"intake_height\", \"elevation\")] #>        altitude altitude_final intake_height elevation #>           <num>          <num>         <num>     <num> #>     1:  4758.10        4758.10       4548.10       210 #>     2:  3801.47        3801.47       3591.47       210 #>     3:  3170.38        3170.38       2960.38       210 #>     4:  2539.71        2539.71       2329.71       210 #>     5:  1905.77        1905.77       1695.77       210 #>    ---                                                 #> 95319:  3008.99        3008.99       2781.99       227 #> 95320:  2387.80        2387.80       2147.80       240 #> 95321:  1763.88        1763.88       1533.88       230 #> 95322:  1124.71        1124.71        877.71       247 #> 95323:   950.98         950.98        731.98       219 range(df$year) #> [1] 1992 2022 dim(df) #> [1] 2872   62"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-pfp.html","id":"filters","dir":"Articles","previous_headings":"","what":"Filters","title":"aircraft-pfp","text":"","code":"df <- df[year == yy]  df <- df[altitude_final < max_altitude &            latitude < north &            latitude > south &            longitude < east &            longitude > west] dim(df) #> [1] 2872   62"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-pfp.html","id":"adding-time-as-posixct-class","dir":"Articles","previous_headings":"","what":"Adding time as POSIXct class","title":"aircraft-pfp","text":"","code":"df <- obs_addtime(df) df[, \"timeUTC\"] #>                   timeUTC #>                    <POSc> #>    1: 2020-01-02 19:50:20 #>    2: 2020-01-02 19:59:18 #>    3: 2020-01-02 20:08:11 #>    4: 2020-01-02 20:16:34 #>    5: 2020-01-02 20:23:47 #>   ---                     #> 2868: 2020-12-28 20:21:43 #> 2869: 2020-12-28 20:23:59 #> 2870: 2020-12-28 20:26:07 #> 2871: 2020-12-28 20:28:09 #> 2872: 2020-12-28 20:30:23"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-pfp.html","id":"cut-time","dir":"Articles","previous_headings":"","what":"Cut time","title":"aircraft-pfp","text":"now can cut time every 20 seconds. can chosse frequency well.","code":"df$sec2 <- obs_freq(x = df$second,                      freq = seq(0, 59, 20)) df[, c(\"second\", \"sec2\")] #>       second  sec2 #>        <int> <num> #>    1:     20     0 #>    2:     18     0 #>    3:     11     0 #>    4:     34    20 #>    5:     47    40 #>   ---              #> 2868:     43    40 #> 2869:     59    40 #> 2870:      7     0 #> 2871:      9     0 #> 2872:     23    20"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-pfp.html","id":"aggregate-data","dir":"Articles","previous_headings":"","what":"Aggregate data","title":"aircraft-pfp","text":"now need add column key_time, used aggregate variables","code":"df$key_time <- ISOdatetime(year = df$year,                            month = df$month,                            day = df$day,                            hour = df$hour,                            min = df$minute,                            sec = df$sec2,                            tz = \"UTC\") df[, c(\"timeUTC\", \"key_time\")] #>                   timeUTC            key_time #>                    <POSc>              <POSc> #>    1: 2020-01-02 19:50:20 2020-01-02 19:50:00 #>    2: 2020-01-02 19:59:18 2020-01-02 19:59:00 #>    3: 2020-01-02 20:08:11 2020-01-02 20:08:00 #>    4: 2020-01-02 20:16:34 2020-01-02 20:16:20 #>    5: 2020-01-02 20:23:47 2020-01-02 20:23:40 #>   ---                                         #> 2868: 2020-12-28 20:21:43 2020-12-28 20:21:40 #> 2869: 2020-12-28 20:23:59 2020-12-28 20:23:40 #> 2870: 2020-12-28 20:26:07 2020-12-28 20:26:00 #> 2871: 2020-12-28 20:28:09 2020-12-28 20:28:00 #> 2872: 2020-12-28 20:30:23 2020-12-28 20:30:20 df2 <- obs_agg(df, cols =  c(\"year\",                              \"month\",                              \"day\",                              \"hour\",                              \"minute\",                              \"second\",                              \"time\",                              \"time_decimal\",                              \"value\",                              \"latitude\",                              \"longitude\",                              \"altitude_final\",                              \"elevation\",                              \"intake_height\",                              \"gps_altitude\",                              \"pressure\",                              \"pressure_altitude\",                              \"u\", \"v\", \"temperature\",                              \"type_altitude\"))"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-pfp.html","id":"add-local-time","dir":"Articles","previous_headings":"","what":"Add local time","title":"aircraft-pfp","text":"Now add local time","code":"df3 <- obs_addltime(df2) setorderv(df3, cols = c(\"site_code\", \"timeUTC\"),           order = c(-1, 1)) df3 #>                   timeUTC site_code lab_1_abbr dataset_calibration_scale  year #>                    <POSc>    <char>     <char>                    <char> <int> #>    1: 2020-01-14 18:28:20       WBI       NOAA            WMO CH4 X2004A  2020 #>    2: 2020-01-14 18:33:00       WBI       NOAA            WMO CH4 X2004A  2020 #>    3: 2020-01-14 18:37:40       WBI       NOAA            WMO CH4 X2004A  2020 #>    4: 2020-01-14 18:40:40       WBI       NOAA            WMO CH4 X2004A  2020 #>    5: 2020-01-14 18:43:20       WBI       NOAA            WMO CH4 X2004A  2020 #>   ---                                                                          #> 2868: 2020-12-25 21:09:20       CAR       NOAA            WMO CH4 X2004A  2020 #> 2869: 2020-12-25 21:20:20       CAR       NOAA            WMO CH4 X2004A  2020 #> 2870: 2020-12-25 21:27:20       CAR       NOAA            WMO CH4 X2004A  2020 #> 2871: 2020-12-25 21:33:00       CAR       NOAA            WMO CH4 X2004A  2020 #> 2872: 2020-12-25 21:35:40       CAR       NOAA            WMO CH4 X2004A  2020 #>       month    day  hour minute second       time time_decimal       value #>       <int> <char> <int>  <int>  <int>      <num>        <num>       <num> #>    1:     1     14    18     28     20 1579026500     2020.038 1.91295e-06 #>    2:     1     14    18     33      0 1579026780     2020.038 1.92525e-06 #>    3:     1     14    18     37     40 1579027060     2020.038 1.92408e-06 #>    4:     1     14    18     40     40 1579027240     2020.038 1.91808e-06 #>    5:     1     14    18     43     20 1579027400     2020.038 1.92311e-06 #>   ---                                                                      #> 2868:    12     25    21      9     20 1608930560     2020.983 1.93444e-06 #> 2869:    12     25    21     20     20 1608931220     2020.983 1.93578e-06 #> 2870:    12     25    21     27     20 1608931640     2020.983 1.93419e-06 #> 2871:    12     25    21     33      0 1608931980     2020.983 1.93514e-06 #> 2872:    12     25    21     35     40 1608932140     2020.983 2.00509e-06 #>       latitude longitude altitude_final elevation intake_height gps_altitude #>          <num>     <num>          <num>     <num>         <num>        <num> #>    1:  41.7505  -91.0213        7618.48       242       7376.48          NaN #>    2:  41.7427  -91.1791        6958.89       234       6724.89          NaN #>    3:  41.7232  -91.3675        5685.43       236       5449.43          NaN #>    4:  41.7275  -91.4877        4987.14       244       4743.14          NaN #>    5:  41.7177  -91.5966        4333.95       235       4098.95          NaN #>   ---                                                                        #> 2868:  40.7275 -104.6853        2926.69      1559       1367.69          NaN #> 2869:  40.7813 -104.6506        2453.94      1590        863.94          NaN #> 2870:  40.7955 -104.6787        2138.78      1599        539.78          NaN #> 2871:  40.6879 -104.6850        1832.76      1543        289.76          NaN #> 2872:  40.7908 -104.6855        1668.78      1614         54.78          NaN #>       pressure pressure_altitude     u     v temperature type_altitude #>          <num>             <num> <num> <num>       <num>         <num> #>    1:      NaN               NaN   NaN   NaN         NaN             1 #>    2:      NaN               NaN   NaN   NaN         NaN             1 #>    3:      NaN               NaN   NaN   NaN         NaN             1 #>    4:      NaN               NaN   NaN   NaN         NaN             1 #>    5:      NaN               NaN   NaN   NaN         NaN             1 #>   ---                                                                  #> 2868:      NaN               NaN   NaN   NaN         NaN             1 #> 2869:      NaN               NaN   NaN   NaN         NaN             1 #> 2870:      NaN               NaN   NaN   NaN         NaN             1 #> 2871:      NaN               NaN   NaN   NaN         NaN             1 #> 2872:      NaN               NaN   NaN   NaN         NaN             1 #>                local_time    lh #>                    <POSc> <int> #>    1: 2020-01-14 12:24:14    12 #>    2: 2020-01-14 12:28:17    12 #>    3: 2020-01-14 12:32:11    12 #>    4: 2020-01-14 12:34:42    12 #>    5: 2020-01-14 12:36:56    12 #>   ---                           #> 2868: 2020-12-25 14:10:35    14 #> 2869: 2020-12-25 14:21:43    14 #> 2870: 2020-12-25 14:28:37    14 #> 2871: 2020-12-25 14:34:15    14 #> 2872: 2020-12-25 14:36:55    14"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-pfp.html","id":"master","dir":"Articles","previous_headings":"","what":"Master","title":"aircraft-pfp","text":"generating receptors list, databe required information may replace missing values nine nines. commented #master[.na(master)] <- 999999999 transform time variables character round coordinates 4 digits","code":"master <- df3 master$timeUTC <- as.character(master$timeUTC) master$local_time <- as.character(master$local_time) master$latitude <- round(master$latitude, 4) master$longitude <- round(master$longitude, 4)"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-pfp.html","id":"save-master","dir":"Articles","previous_headings":"","what":"Save master","title":"aircraft-pfp","text":"Finally save master file","code":"out <- tempfile()"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-pfp.html","id":"txt","dir":"Articles","previous_headings":"Save master","what":"txt","title":"aircraft-pfp","text":"","code":"message(paste0(out,\"_\", datasetid, \".txt\\n\")) fwrite(master,        paste0(out,\"_\", datasetid, \".txt\"),        sep = \" \") #> /tmp/RtmpKO5et6/file596567fd1742_aircraft-pfp.txt"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-pfp.html","id":"csv","dir":"Articles","previous_headings":"Save master","what":"csv","title":"aircraft-pfp","text":"","code":"message(paste0(out,\"_\", datasetid, \".csv\\n\")) fwrite(master,        paste0(out,\"_\", datasetid, \".csv\"),        sep = \",\") #> /tmp/RtmpKO5et6/file596567fd1742_aircraft-pfp.csv"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-pfp.html","id":"csvy","dir":"Articles","previous_headings":"Save master","what":"csvy","title":"aircraft-pfp","text":"CSVY csv files YAML header include metadata tabulated text files","code":"cat(\"\\nAdding notes in csvy:\\n\") notes <- c(paste0(\"sector: \", datasetid),            paste0(\"timespan: \", yy),            paste0(\"spatial_limits: north = \", north, \", south = \", south, \", east = \", east, \", west = \", west),            \"data: Data averaged every 20 seconds\",            paste0(\"altitude: < \", max_altitude),            \"hours: All\",            \"local_time: if var `site_utc2lst` is not available, calculated as\",            \"longitude/15*60*60 (John Miller)\")  cat(notes, sep = \"\\n\")  message(paste0(out,\"_\", datasetid, \".csvy\\n\")) obs_write_csvy(dt = master,                notes = notes,                out = paste0(out,\"_\", datasetid, \".csvy\")) #>  #> Adding notes in csvy: #> sector: aircraft-pfp #> timespan: 2020 #> spatial_limits: north = 80, south = 10, east = -50, west = -170 #> data: Data averaged every 20 seconds #> altitude: < 8000 #> hours: All #> local_time: if var `site_utc2lst` is not available, calculated as #> longitude/15*60*60 (John Miller) #> /tmp/RtmpKO5et6/file596567fd1742_aircraft-pfp.csvy obs_read_csvy(paste0(out,\"_\", datasetid, \".csvy\")) #>  [1] \"---\"                                                                 #>  [2] \"name: Metadata \"                                                     #>  [3] \"sector: aircraft-pfp\"                                                #>  [4] \"timespan: 2020\"                                                      #>  [5] \"spatial_limits: north = 80, south = 10, east = -50, west = -170\"     #>  [6] \"data: Data averaged every 20 seconds\"                                #>  [7] \"altitude: < 8000\"                                                    #>  [8] \"hours: All\"                                                          #>  [9] \"local_time: if var `site_utc2lst` is not available, calculated as\"   #> [10] \"longitude/15*60*60 (John Miller)\"                                    #> [11] \"structure: \"                                                         #> [12] \"Classes 'data.table' and 'data.frame':\\t2872 obs. of  27 variables:\" #> [13] \" $ timeUTC                  : chr  \\\"2020-01-14 18:28:20\\\" \\\"..\"     #> [14] \" $ site_code                : chr  \\\"WBI\\\" \\\"WBI\\\" ...\"              #> [15] \" $ lab_1_abbr               : chr  \\\"NOAA\\\" \\\"NOAA\\\" ...\"            #> [16] \" $ dataset_calibration_scale: chr  \\\"WMO CH4 X2004A\\\" \\\"WMO \\\"..\"    #> [17] \" $ year                     : int  2020 2020 2020 2020 202..\"        #> [18] \" $ month                    : int  1 1 1 1 1 ...\"                    #> [19] \" $ day                      : chr  \\\"14\\\" \\\"14\\\" ...\"                #> [20] \" $ hour                     : int  18 18 18 18 18 ...\"               #> [21] \" $ minute                   : int  28 33 37 40 43 ...\"               #> [22] \" $ second                   : int  20 0 40 40 20 ...\"                #> [23] \" $ time                     : num  1.58e+09 1.58e+09 ...\"            #> [24] \" $ time_decimal             : num  2020 2020 ...\"                    #> [25] \" $ value                    : num  1.91e-06 1.93e-06 ...\"            #> [26] \" $ latitude                 : num  41.8 41.7 ...\"                    #> [27] \" $ longitude                : num  -91 -91.2 ...\"                    #> [28] \" $ altitude_final           : num  7618 6959 ...\"                    #> [29] \" $ elevation                : num  242 234 236 244 235 ...\"          #> [30] \" $ intake_height            : num  7376 6725 ...\"                    #> [31] \" $ gps_altitude             : num  NaN NaN NaN NaN NaN ...\"          #> [32] \" $ pressure                 : num  NaN NaN NaN NaN NaN ...\"          #> [33] \" $ pressure_altitude        : num  NaN NaN NaN NaN NaN ...\"          #> [34] \" $ u                        : num  NaN NaN NaN NaN NaN ...\"          #> [35] \" $ v                        : num  NaN NaN NaN NaN NaN ...\"          #> [36] \" $ temperature              : num  NaN NaN NaN NaN NaN ...\"          #> [37] \" $ type_altitude            : num  1 1 1 1 1 ...\"                    #> [38] \" $ local_time               : chr  \\\"2020-01-14 12:24:14.8\\\"..\"      #> [39] \" $ lh                       : int  12 12 12 12 12 ...\"               #> [40] \" - attr(*, \\\".internal.selfref\\\")=<externalptr> \"                    #> [41] \"NULL\"                                                                #> [42] \"---\" #>                   timeUTC site_code lab_1_abbr dataset_calibration_scale  year #>                    <POSc>    <char>     <char>                    <char> <int> #>    1: 2020-01-14 18:28:20       WBI       NOAA            WMO CH4 X2004A  2020 #>    2: 2020-01-14 18:33:00       WBI       NOAA            WMO CH4 X2004A  2020 #>    3: 2020-01-14 18:37:40       WBI       NOAA            WMO CH4 X2004A  2020 #>    4: 2020-01-14 18:40:40       WBI       NOAA            WMO CH4 X2004A  2020 #>    5: 2020-01-14 18:43:20       WBI       NOAA            WMO CH4 X2004A  2020 #>   ---                                                                          #> 2868: 2020-12-25 21:09:20       CAR       NOAA            WMO CH4 X2004A  2020 #> 2869: 2020-12-25 21:20:20       CAR       NOAA            WMO CH4 X2004A  2020 #> 2870: 2020-12-25 21:27:20       CAR       NOAA            WMO CH4 X2004A  2020 #> 2871: 2020-12-25 21:33:00       CAR       NOAA            WMO CH4 X2004A  2020 #> 2872: 2020-12-25 21:35:40       CAR       NOAA            WMO CH4 X2004A  2020 #>       month   day  hour minute second       time time_decimal       value #>       <int> <int> <int>  <int>  <int>      <int>        <num>       <num> #>    1:     1    14    18     28     20 1579026500     2020.038 1.91295e-06 #>    2:     1    14    18     33      0 1579026780     2020.038 1.92525e-06 #>    3:     1    14    18     37     40 1579027060     2020.038 1.92408e-06 #>    4:     1    14    18     40     40 1579027240     2020.038 1.91808e-06 #>    5:     1    14    18     43     20 1579027400     2020.038 1.92311e-06 #>   ---                                                                     #> 2868:    12    25    21      9     20 1608930560     2020.983 1.93444e-06 #> 2869:    12    25    21     20     20 1608931220     2020.983 1.93578e-06 #> 2870:    12    25    21     27     20 1608931640     2020.983 1.93419e-06 #> 2871:    12    25    21     33      0 1608931980     2020.983 1.93514e-06 #> 2872:    12    25    21     35     40 1608932140     2020.983 2.00509e-06 #>       latitude longitude altitude_final elevation intake_height gps_altitude #>          <num>     <num>          <num>     <int>         <num>       <lgcl> #>    1:  41.7505  -91.0213        7618.48       242       7376.48           NA #>    2:  41.7427  -91.1791        6958.89       234       6724.89           NA #>    3:  41.7232  -91.3675        5685.43       236       5449.43           NA #>    4:  41.7275  -91.4877        4987.14       244       4743.14           NA #>    5:  41.7177  -91.5966        4333.95       235       4098.95           NA #>   ---                                                                        #> 2868:  40.7275 -104.6853        2926.69      1559       1367.69           NA #> 2869:  40.7813 -104.6506        2453.94      1590        863.94           NA #> 2870:  40.7955 -104.6787        2138.78      1599        539.78           NA #> 2871:  40.6879 -104.6850        1832.76      1543        289.76           NA #> 2872:  40.7908 -104.6855        1668.78      1614         54.78           NA #>       pressure pressure_altitude      u      v temperature type_altitude #>         <lgcl>            <lgcl> <lgcl> <lgcl>      <lgcl>         <int> #>    1:       NA                NA     NA     NA          NA             1 #>    2:       NA                NA     NA     NA          NA             1 #>    3:       NA                NA     NA     NA          NA             1 #>    4:       NA                NA     NA     NA          NA             1 #>    5:       NA                NA     NA     NA          NA             1 #>   ---                                                                    #> 2868:       NA                NA     NA     NA          NA             1 #> 2869:       NA                NA     NA     NA          NA             1 #> 2870:       NA                NA     NA     NA          NA             1 #> 2871:       NA                NA     NA     NA          NA             1 #> 2872:       NA                NA     NA     NA          NA             1 #>                local_time    lh #>                    <POSc> <int> #>    1: 2020-01-14 12:24:14    12 #>    2: 2020-01-14 12:28:17    12 #>    3: 2020-01-14 12:32:11    12 #>    4: 2020-01-14 12:34:42    12 #>    5: 2020-01-14 12:36:56    12 #>   ---                           #> 2868: 2020-12-25 14:10:35    14 #> 2869: 2020-12-25 14:21:43    14 #> 2870: 2020-12-25 14:28:37    14 #> 2871: 2020-12-25 14:34:15    14 #> 2872: 2020-12-25 14:36:55    14"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-pfp.html","id":"receptors","dir":"Articles","previous_headings":"","what":"Receptors","title":"aircraft-pfp","text":"Now can last step generating receptor list files. Now filter selected columns can round altitude also Now can format time variables two digits column indicate AGL ASL Finally, save receptors","code":"receptor <- master[, c(\"site_code\",                        \"year\",                        \"month\",                        \"day\",                        \"hour\",                        \"minute\",                        \"second\",                        \"latitude\",                        \"longitude\",                        \"altitude_final\",                        \"type_altitude\")] receptor$altitude_final <- round(receptor$altitude_final) receptor <- obs_format(receptor,                         spf =  c(\"month\", \"day\",                                  \"hour\", \"minute\", \"second\")) receptor_agl <- receptor[type_altitude == 0] receptor_asl <- receptor[type_altitude == 1] if(nrow(receptor_agl) > 0) {   message(paste0(out, \"_\", datasetid, \"_receptor_AGL.txt\"), \"\\n\")    fwrite(x = receptor_agl,          file = paste0(out, \"_\", datasetid, \"_receptor_AGL.txt\"),          sep = \" \") }  if(nrow(receptor_asl) > 0) {   message(paste0(out, \"_\", datasetid, \"_receptor_ASL.txt\"), \"\\n\")    fwrite(x = receptor_asl,          file = paste0(out, \"_\", datasetid, \"receptor_ASL.txt\"),          sep = \" \")  } #> /tmp/RtmpKO5et6/file596567fd1742_aircraft-pfp_receptor_ASL.txt"},{"path":"https://noaa-gml.github.io/rtorf/articles/aircraft-pfp.html","id":"plot","dir":"Articles","previous_headings":"","what":"Plot","title":"aircraft-pfp","text":"Finally, just plot data, run locally","code":"obs_plot(df3, time = \"timeUTC\", yfactor = 1e9) library(sf) x <- st_as_sf(df3, coords = c(\"longitude\", \"latitude\"), crs = 4326) plot(x[\"value\"], axes = T, reset = F) maps::map(add = T)"},{"path":"https://noaa-gml.github.io/rtorf/articles/summary.html","id":"obspack-summary","dir":"Articles","previous_headings":"","what":"ObsPack summary","title":"summary","text":"first step consists constructing summary ObsPack. required read data, also, identify agl, present file names. function returns data.frame. Optionally, user can indicate path store data.frame. obs_summary also prints summary data. second argument categories, default includes categories shown , account files. summary data.frame contains columns id full path file, name name relative path file, n just id, sector tower, column agl indicates agl indicated name file available. read documentation function, user must run ?obs_summary. first define categories can check table now","code":"cate = c(\"aircraft-pfp\",          \"aircraft-insitu\",          \"aircraft-flask\",          \"surface-insitu\",          \"surface-flask\",           \"surface-pfp\",             \"tower-insitu\",            \"aircore\",                 \"shipboard-insitu\",          \"shipboard-flask\")   obs <- \"Z:/torf/obspack_ch4_1_GLOBALVIEWplus_v5.1_2023-03-08/data/nc/\" index <- obs_summary(obs = obs,                       categories = cate) Number of files of index: 429               sector     N               <char> <int>  1:     aircraft-pfp    40  2:  aircraft-insitu    15  3:    surface-flask   106  4:   surface-insitu   174  5:   aircraft-flask     4  6:          aircore     1  7:      surface-pfp    33  8:     tower-insitu    51  9:  shipboard-flask     4 10: shipboard-insitu     1 11:    Total sectors   429 Detected 190 files with agl Detected 239 files without agl index 1: Z:/torf/obspack_ch4_1_GLOBALVIEWplus_v5.1_2023-03-08/data/nc/ch4_aao_aircraft-pfp_1_allvalid.nc   2: Z:/torf/obspack_ch4_1_GLOBALVIEWplus_v5.1_2023-03-08/data/nc/ch4_above_aircraft-insitu_1_allvalid.nc   3: Z:/torf/obspack_ch4_1_GLOBALVIEWplus_v5.1_2023-03-08/data/nc/ch4_abp_surface-flask_1_representative.nc   4: Z:/torf/obspack_ch4_1_GLOBALVIEWplus_v5.1_2023-03-08/data/nc/ch4_abt_surface-insitu_6_allvalid.nc   5: Z:/torf/obspack_ch4_1_GLOBALVIEWplus_v5.1_2023-03-08/data/nc/ch4_acg_aircraft-pfp_1_allvalid.nc  ---                                                                                                            425: Z:/torf/obspack_ch4_1_GLOBALVIEWplus_v5.1_2023-03-08/data/nc/ch4_yon_surface-insitu_19_representative.nc 426: Z:/torf/obspack_ch4_1_GLOBALVIEWplus_v5.1_2023-03-08/data/nc/ch4_zep_surface-flask_1_representative.nc 427: Z:/torf/obspack_ch4_1_GLOBALVIEWplus_v5.1_2023-03-08/data/nc/ch4_zep_surface-insitu_442_allvalid-15magl.nc 428: Z:/torf/obspack_ch4_1_GLOBALVIEWplus_v5.1_2023-03-08/data/nc/ch4_zot_surface-flask_45_representative.nc 429: Z:/torf/obspack_ch4_1_GLOBALVIEWplus_v5.1_2023-03-08/data/nc/ch4_zsf_surface-insitu_442_allvalid-3magl.nc                                               name     n          sector   agl                                             <char> <int>          <char> <num>   1:            ch4_aao_aircraft-pfp_1_allvalid.nc     1    aircraft-pfp    NA   2:       ch4_above_aircraft-insitu_1_allvalid.nc     2 aircraft-insitu    NA   3:     ch4_abp_surface-flask_1_representative.nc     3   surface-flask    NA   4:          ch4_abt_surface-insitu_6_allvalid.nc     4  surface-insitu    NA   5:            ch4_acg_aircraft-pfp_1_allvalid.nc     5    aircraft-pfp    NA  ---                                                                           425:   ch4_yon_surface-insitu_19_representative.nc   425  surface-insitu    NA 426:     ch4_zep_surface-flask_1_representative.nc   426   surface-flask    NA 427: ch4_zep_surface-insitu_442_allvalid-15magl.nc   427  surface-insitu    15 428:    ch4_zot_surface-flask_45_representative.nc   428   surface-flask    NA"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-flask.html","id":"checks-and-definitions","dir":"Articles","previous_headings":"","what":"Checks and definitions","title":"surface-flask","text":"check altitude, intake_height, altitude_final elevation. altitude_final column intake_height, added match column obs_read text files. temporal range data also check dimensions data","code":"north <- 80 south <- 10 west <- -170 east <- -50 max_altitude <- 8000 yy <- 2020 evening <- 14 df[, c(\"altitude\", \"altitude_final\", \"intake_height\", \"elevation\",        \"dataset_selection_tag\",               \"site_name\")] #>         altitude altitude_final intake_height elevation dataset_selection_tag #>            <num>          <num>         <num>     <num>                <char> #>      1:        6              5             5         1        representative #>      2:        6              5             5         1        representative #>      3:        6              5             5         1        representative #>      4:        6              5             5         1        representative #>      5:        6              5             5         1        representative #>     ---                                                                       #> 107797:      411            300           300       111        representative #> 107798:      411            300           300       111        representative #> 107799:      411            300           300       111        representative #> 107800:      411            300           300       111        representative #> 107801:      411            300           300       111        representative #>               site_name #>                  <char> #>      1: Arembepe, Bahia #>      2: Arembepe, Bahia #>      3: Arembepe, Bahia #>      4: Arembepe, Bahia #>      5: Arembepe, Bahia #>     ---                 #> 107797: Zotino, Siberia #> 107798: Zotino, Siberia #> 107799: Zotino, Siberia #> 107800: Zotino, Siberia #> 107801: Zotino, Siberia range(df$year) #> [1] 1983 2021 dim(df) #> [1] 107801     53"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-flask.html","id":"filters","dir":"Articles","previous_headings":"","what":"Filters","title":"surface-flask","text":"Towers can observations different heights. need select one site observations registered highest height. column height named altitude_final max altitude named max_altitude.","code":"df <- df[year == yy]  df <- df[altitude_final < max_altitude &            latitude < north &            latitude > south &            longitude < east &            longitude > west] dim(df) #> [1] 799  53 dfa <- df[,           max(altitude_final),           by = site_code] |> unique()  names(dfa)[2] <- \"max_altitude\" dfa #>     site_code max_altitude #>        <char>        <num> #>  1:       BMW         21.3 #>  2:       BRW         16.5 #>  3:       CBA         35.7 #>  4:       KEY          5.0 #>  5:       KUM          5.0 #>  6:       LEF        396.0 #>  7:       MEX          5.0 #>  8:       MLO         40.0 #>  9:       NWR          3.0 #> 10:       RPB          5.0 #> 11:       SGP         60.0 #> 12:       UTA          5.0"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-flask.html","id":"key-time","dir":"Articles","previous_headings":"Filters","what":"Key Time","title":"surface-flask","text":"need start time columns. function obs_addtime adds time columns timeUTC, timeUTC_start shows start time observation timeUTC_end shows end time observation. need key_time aggregate data. can done using UTC, solar, local time. normal approach using afternoon solar local time.","code":"df2 <- obs_addtime(df) #> Adding timeUTC #> Adding timeUTC_start #> Adding timeUTC_end #> Found time_interval"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-flask.html","id":"hierarchy-of-solar-or-local-time","dir":"Articles","previous_headings":"Filters > Key Time","what":"Hierarchy of solar or local time","title":"surface-flask","text":"Solar time Local time columns site_utc2lst Local time longitude solar time (default) select hours interest aggregate data year, month day solar time. way, one information per day. however approach appropriate aircraft aggregated every 10 20 seconds. Hence need aggregate data one time column. Also, helps generate receptor info files including hour, minute second. Hence, need add solar local time column. local time column site_utc2lst need identify local time function add_ltime. important identifying observations evening local time. add_ltime uses two methods, first identify time difference utc identifying metadata column “site_utc2lst”. solar time available #now need cut solar time frequency needed. work local time longitude information available, aircrafts instance, local time calculated approximation based longitude: lt=UTC+longitude/15*60*60 lt = UTC + longitude/15 * 60 * 60  ltlt local time, UTCUTC time, longitudelongitude coordinate. , time cut every two hours. Now, identify local time select evening hours.","code":"df2$solar_time <- obs_addstime(df2)"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-flask.html","id":"cut-time","dir":"Articles","previous_headings":"Filters > Key Time","what":"Cut time","title":"surface-flask","text":"Now key column time, can cut accordingly. can check solar time cut solar time. Please note solar_time_cut, column used aggregate data filter required solar time, case 14. point can calculate averages several columns cut time. function obs_agg aggregation shown following lines code. argument gby establish function used aggregate cols. need aggregate data date (year, month, date), already filtered hours interest. , 1 observation per day. standard, let us define key_time solar_time. obs_agg function aggregate desired data column. add column max_altitude identify max altitude site.","code":"df2$solar_time_cut <- cut(x = df2$solar_time,                           breaks = \"1 hour\") |>   as.character() df3 <- df2[hour_st %in% evening] df3[, c(\"solar_time\", \"solar_time_cut\")] #>              solar_time      solar_time_cut #>                  <POSc>              <char> #>  1: 2020-03-10 14:22:19 2020-03-10 14:00:00 #>  2: 2020-04-01 14:28:02 2020-04-01 14:00:00 #>  3: 2020-04-14 14:52:45 2020-04-14 14:00:00 #>  4: 2020-10-02 14:24:04 2020-10-02 14:00:00 #>  5: 2020-10-02 14:44:04 2020-10-02 14:00:00 #>  6: 2020-10-05 14:15:59 2020-10-05 14:00:00 #>  7: 2020-10-30 14:06:56 2020-10-30 14:00:00 #>  8: 2020-10-30 14:24:56 2020-10-30 14:00:00 #>  9: 2020-11-10 14:04:10 2020-11-10 14:00:00 #> 10: 2020-11-10 14:22:10 2020-11-10 14:00:00 #> 11: 2020-03-27 14:23:57 2020-03-27 14:00:00 #> 12: 2020-04-22 14:09:09 2020-04-22 14:00:00 #> 13: 2020-05-28 14:19:16 2020-05-28 14:00:00 #> 14: 2020-06-09 14:38:15 2020-06-09 14:00:00 #> 15: 2020-06-18 14:29:22 2020-06-18 14:00:00 #> 16: 2020-06-25 14:18:50 2020-06-25 14:00:00 #> 17: 2020-07-15 14:18:25 2020-07-15 14:00:00 #> 18: 2020-12-12 14:41:10 2020-12-12 14:00:00 #> 19: 2020-03-25 14:30:43 2020-03-25 14:00:00 #> 20: 2020-04-09 14:27:40 2020-04-09 14:00:00 #> 21: 2020-04-23 14:23:37 2020-04-23 14:00:00 #> 22: 2020-04-27 14:54:16 2020-04-27 14:00:00 #> 23: 2020-05-18 14:16:12 2020-05-18 14:00:00 #> 24: 2020-06-15 14:03:53 2020-06-15 14:00:00 #> 25: 2020-06-15 14:17:53 2020-06-15 14:00:00 #> 26: 2020-06-22 14:24:21 2020-06-22 14:00:00 #> 27: 2020-06-22 14:41:21 2020-06-22 14:00:00 #> 28: 2020-08-05 14:25:26 2020-08-05 14:00:00 #> 29: 2020-08-05 14:39:26 2020-08-05 14:00:00 #> 30: 2020-11-02 14:18:47 2020-11-02 14:00:00 #> 31: 2020-11-02 14:32:47 2020-11-02 14:00:00 #> 32: 2020-11-12 14:13:45 2020-11-12 14:00:00 #> 33: 2020-11-27 14:14:50 2020-11-27 14:00:00 #> 34: 2020-11-27 14:28:50 2020-11-27 14:00:00 #> 35: 2020-12-22 14:11:13 2020-12-22 14:00:00 #> 36: 2020-12-22 14:28:13 2020-12-22 14:00:00 #> 37: 2020-02-18 14:27:33 2020-02-18 14:00:00 #> 38: 2020-01-06 14:27:37 2020-01-06 14:00:00 #> 39: 2020-04-22 14:26:55 2020-04-22 14:00:00 #> 40: 2020-05-05 14:25:44 2020-05-05 14:00:00 #> 41: 2020-05-22 14:34:41 2020-05-22 14:00:00 #> 42: 2020-06-04 14:51:57 2020-06-04 14:00:00 #> 43: 2020-07-09 14:04:58 2020-07-09 14:00:00 #> 44: 2020-08-26 14:52:18 2020-08-26 14:00:00 #> 45: 2020-09-26 14:44:19 2020-09-26 14:00:00 #> 46: 2020-12-13 14:33:29 2020-12-13 14:00:00 #> 47: 2020-12-31 14:17:13 2020-12-31 14:00:00 #>              solar_time      solar_time_cut df3$key_time <- df3$solar_time_cut df4 <- obs_agg(dt = df3,                cols = c(\"value\",                         \"latitude\",                         \"longitude\",                         \"site_utc2lst\"),                verbose = T,                byalt = TRUE) #> Selecting by alt #> Adding time df4[,     max_altitude := max(altitude_final),     by = site_code] df4[,     c(\"site_code\",       \"altitude_final\",       \"max_altitude\")] |> unique() #>    site_code altitude_final max_altitude #>       <char>          <num>        <num> #> 1:       BRW            5.0         16.5 #> 2:       BRW           16.5         16.5 #> 3:       KEY            5.0          5.0 #> 4:       KUM            5.0          5.0 #> 5:       NWR            3.0          3.0 #> 6:       UTA            5.0          5.0"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-flask.html","id":"master","dir":"Articles","previous_headings":"","what":"Master","title":"surface-flask","text":"generating receptors list, database required information may replace missing values nine nines. commented #master[.na(master)] <- 999999999 transform time variables character round coordinates 4 digits","code":"master <- df4 master$timeUTC <- as.character(master$timeUTC) master$local_time <- as.character(master$local_time) master$latitude <- round(master$latitude, 4) master$longitude <- round(master$longitude, 4)"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-flask.html","id":"save-master","dir":"Articles","previous_headings":"","what":"Save master","title":"surface-flask","text":"Finally save master file","code":"out <- tempfile()"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-flask.html","id":"txt","dir":"Articles","previous_headings":"Save master","what":"txt","title":"surface-flask","text":"","code":"message(paste0(out,\"_\", datasetid, \".txt\\n\")) fwrite(master,        paste0(out,\"_\", datasetid, \".txt\"),        sep = \" \") #> C:\\Users\\sibarrae\\AppData\\Local\\Temp\\RtmpSMAWpf\\file9558428068b2_surface-flask.txt"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-flask.html","id":"csv","dir":"Articles","previous_headings":"Save master","what":"csv","title":"surface-flask","text":"","code":"message(paste0(out,\"_\", datasetid, \".csv\\n\")) fwrite(master,        paste0(out,\"_\", datasetid, \".csv\"),        sep = \",\") #> C:\\Users\\sibarrae\\AppData\\Local\\Temp\\RtmpSMAWpf\\file9558428068b2_surface-flask.csv"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-flask.html","id":"csvy","dir":"Articles","previous_headings":"Save master","what":"csvy","title":"surface-flask","text":"CSVY csv files YAML header include metadata tabulated text files","code":"cat(\"\\nAdding notes in csvy:\\n\") notes <- c(paste0(\"sector: \", datasetid),            paste0(\"timespan: \", yy),            paste0(\"spatial_limits: north = \", north, \", south = \", south, \", east = \", east, \", west = \", west),            \"data: Data averaged every 20 seconds\",            paste0(\"altitude: < \", max_altitude),            paste0(\"hours: \", evening),            \"local_time: used solar_time\")  cat(notes, sep = \"\\n\")  message(paste0(out,\"_\", datasetid, \".csvy\\n\")) obs_write_csvy(dt = master,                notes = notes,                out = paste0(out,\"_\", datasetid, \".csvy\")) #> Adding notes in csvy: #> sector: surface-insitu #> timespan: 2020 #> spatial_limits: north = 80, south = 10, east = -50, west = -170 #> data: Data averaged every 20 seconds #> altitude: < 8000 #> hours: 14 #> local_time: used solar_time #> C:\\Users\\sibarrae\\AppData\\Local\\Temp\\RtmpSMAWpf\\file9558428068b2_surface-flask.csvy obs_read_csvy(paste0(out,\"_\", datasetid, \".csvy\")) #>  [1] \"---\"                                                               #>  [2] \"name: Metadata \"                                                   #>  [3] \"sector: surface-flask\"                                             #>  [4] \"timespan: 2020\"                                                    #>  [5] \"spatial_limits: north = 80, south = 10, east = -50, west = -170\"   #>  [6] \"data: Data averaged every 20 seconds\"                              #>  [7] \"altitude: < 8000\"                                                  #>  [8] \"hours: 14\"                                                         #>  [9] \"local_time: used solar_time\"                                       #> [10] \"structure: \"                                                       #> [11] \"Classes 'data.table' and 'data.frame':\\t41 obs. of  20 variables:\" #> [12] \" $ timeUTC                  : chr  \\\"2020-03-10 14:00:00\\\" \\\"..\"   #> [13] \" $ site_code                : chr  \\\"BRW\\\" \\\"BRW\\\" ...\"            #> [14] \" $ altitude_final           : num  5 5 5 16.5 5 ...\"               #> [15] \" $ type_altitude            : num  NA NA NA NA NA ...\"             #> [16] \" $ lab_1_abbr               : chr  \\\"NOAA\\\" \\\"NOAA\\\" ...\"          #> [17] \" $ dataset_calibration_scale: chr  \\\"WMO CH4 X2004A\\\" \\\"WMO \\\"..\"  #> [18] \" $ value                    : num  1.98e-06 1.98e-06 ...\"          #> [19] \" $ latitude                 : num  71.3 71.3 ...\"                  #> [20] \" $ longitude                : num  -157 -157 ...\"                  #> [21] \" $ site_utc2lst             : num  -9 -9 -9 -9 -9 ...\"             #> [22] \" $ year                     : int  2020 2020 2020 2020 202..\"      #> [23] \" $ month                    : int  3 4 4 10 10 ...\"                #> [24] \" $ day                      : chr  \\\"10\\\" \\\"01\\\" ...\"              #> [25] \" $ hour                     : int  14 14 14 14 14 ...\"             #> [26] \" $ minute                   : int  0 0 0 0 0 ...\"                  #> [27] \" $ second                   : int  0 0 0 0 0 ...\"                  #> [28] \" $ time                     : num  1.58e+09 1.59e+09 ...\"          #> [29] \" $ time_decimal             : num  2020 2020 ...\"                  #> [30] \" $ max_altitude             : num  16.5 16.5 16.5 16.5 16...\"      #> [31] \" $ local_time               : chr  NA NA ...\"                      #> [32] \" - attr(*, \\\".internal.selfref\\\")=<externalptr> \"                  #> [33] \"NULL\"                                                              #> [34] \"---\" #>                 timeUTC site_code altitude_final type_altitude lab_1_abbr #>                  <POSc>    <char>          <num>        <lgcl>     <char> #>  1: 2020-03-10 14:00:00       BRW            5.0            NA       NOAA #>  2: 2020-04-01 14:00:00       BRW            5.0            NA       NOAA #>  3: 2020-04-14 14:00:00       BRW            5.0            NA       NOAA #>  4: 2020-10-02 14:00:00       BRW           16.5            NA       NOAA #>  5: 2020-10-02 14:00:00       BRW            5.0            NA       NOAA #>  6: 2020-10-05 14:00:00       BRW           16.5            NA       NOAA #>  7: 2020-10-30 14:00:00       BRW           16.5            NA       NOAA #>  8: 2020-10-30 14:00:00       BRW            5.0            NA       NOAA #>  9: 2020-11-10 14:00:00       BRW           16.5            NA       NOAA #> 10: 2020-11-10 14:00:00       BRW            5.0            NA       NOAA #> 11: 2020-03-27 14:00:00       KEY            5.0            NA       NOAA #> 12: 2020-04-22 14:00:00       KEY            5.0            NA       NOAA #> 13: 2020-05-28 14:00:00       KEY            5.0            NA       NOAA #> 14: 2020-06-09 14:00:00       KEY            5.0            NA       NOAA #> 15: 2020-06-18 14:00:00       KEY            5.0            NA       NOAA #> 16: 2020-06-25 14:00:00       KEY            5.0            NA       NOAA #> 17: 2020-07-15 14:00:00       KEY            5.0            NA       NOAA #> 18: 2020-12-12 14:00:00       KEY            5.0            NA       NOAA #> 19: 2020-03-25 14:00:00       KUM            5.0            NA       NOAA #> 20: 2020-04-09 14:00:00       KUM            5.0            NA       NOAA #> 21: 2020-04-23 14:00:00       KUM            5.0            NA       NOAA #> 22: 2020-04-27 14:00:00       KUM            5.0            NA       NOAA #> 23: 2020-05-18 14:00:00       KUM            5.0            NA       NOAA #> 24: 2020-06-15 14:00:00       KUM            5.0            NA       NOAA #> 25: 2020-06-22 14:00:00       KUM            5.0            NA       NOAA #> 26: 2020-08-05 14:00:00       KUM            5.0            NA       NOAA #> 27: 2020-11-02 14:00:00       KUM            5.0            NA       NOAA #> 28: 2020-11-12 14:00:00       KUM            5.0            NA       NOAA #> 29: 2020-11-27 14:00:00       KUM            5.0            NA       NOAA #> 30: 2020-12-22 14:00:00       KUM            5.0            NA       NOAA #> 31: 2020-02-18 14:00:00       NWR            3.0            NA       NOAA #> 32: 2020-01-06 14:00:00       UTA            5.0            NA       NOAA #> 33: 2020-04-22 14:00:00       UTA            5.0            NA       NOAA #> 34: 2020-05-05 14:00:00       UTA            5.0            NA       NOAA #> 35: 2020-05-22 14:00:00       UTA            5.0            NA       NOAA #> 36: 2020-06-04 14:00:00       UTA            5.0            NA       NOAA #> 37: 2020-07-09 14:00:00       UTA            5.0            NA       NOAA #> 38: 2020-08-26 14:00:00       UTA            5.0            NA       NOAA #> 39: 2020-09-26 14:00:00       UTA            5.0            NA       NOAA #> 40: 2020-12-13 14:00:00       UTA            5.0            NA       NOAA #> 41: 2020-12-31 14:00:00       UTA            5.0            NA       NOAA #>                 timeUTC site_code altitude_final type_altitude lab_1_abbr #>     dataset_calibration_scale        value latitude longitude site_utc2lst #>                        <char>        <num>    <num>     <num>        <int> #>  1:            WMO CH4 X2004A 1.981330e-06  71.3230 -156.6114           -9 #>  2:            WMO CH4 X2004A 1.976885e-06  71.3230 -156.6114           -9 #>  3:            WMO CH4 X2004A 1.974370e-06  71.3230 -156.6114           -9 #>  4:            WMO CH4 X2004A 1.983600e-06  71.3230 -156.6114           -9 #>  5:            WMO CH4 X2004A 1.984495e-06  71.3230 -156.6114           -9 #>  6:            WMO CH4 X2004A 1.978800e-06  71.3230 -156.6114           -9 #>  7:            WMO CH4 X2004A 2.047570e-06  71.3230 -156.6114           -9 #>  8:            WMO CH4 X2004A 2.071295e-06  71.3230 -156.6114           -9 #>  9:            WMO CH4 X2004A 1.993950e-06  71.3230 -156.6114           -9 #> 10:            WMO CH4 X2004A 1.994955e-06  71.3230 -156.6114           -9 #> 11:            WMO CH4 X2004A 1.944370e-06  25.6654  -80.1580           -5 #> 12:            WMO CH4 X2004A 2.000845e-06  25.6654  -80.1580           -5 #> 13:            WMO CH4 X2004A 1.886655e-06  25.6654  -80.1580           -5 #> 14:            WMO CH4 X2004A 1.895580e-06  25.6654  -80.1580           -5 #> 15:            WMO CH4 X2004A 1.891915e-06  25.6654  -80.1580           -5 #> 16:            WMO CH4 X2004A 1.880020e-06  25.6654  -80.1580           -5 #> 17:            WMO CH4 X2004A 1.918770e-06  25.6654  -80.1580           -5 #> 18:            WMO CH4 X2004A 1.965620e-06  25.6654  -80.1580           -5 #> 19:            WMO CH4 X2004A 1.927310e-06  19.5610 -154.8880          -10 #> 20:            WMO CH4 X2004A 1.895440e-06  19.7333 -155.0500          -10 #> 21:            WMO CH4 X2004A 1.914920e-06  19.5610 -154.8880          -10 #> 22:            WMO CH4 X2004A 1.901675e-06  19.5610 -154.8880          -10 #> 23:            WMO CH4 X2004A 1.908090e-06  19.5608 -154.8880          -10 #> 24:            WMO CH4 X2004A 1.907615e-06  19.5608 -154.8880          -10 #> 25:            WMO CH4 X2004A 1.911838e-06  19.5609 -154.8880          -10 #> 26:            WMO CH4 X2004A 1.888437e-06  19.5608 -154.8880          -10 #> 27:            WMO CH4 X2004A 1.891255e-06  19.5610 -154.8880          -10 #> 28:            WMO CH4 X2004A 1.944140e-06  19.5610 -154.8880          -10 #> 29:            WMO CH4 X2004A 1.939297e-06  19.5609 -154.8880          -10 #> 30:            WMO CH4 X2004A 1.938703e-06  19.5610 -154.8880          -10 #> 31:            WMO CH4 X2004A 1.942230e-06  40.0531 -105.5864           -7 #> 32:            WMO CH4 X2004A 1.945065e-06  39.9018 -113.7181           -7 #> 33:            WMO CH4 X2004A 1.938295e-06  39.9018 -113.7181           -7 #> 34:            WMO CH4 X2004A 1.936620e-06  39.9018 -113.7181           -7 #> 35:            WMO CH4 X2004A 1.941100e-06  39.9018 -113.7181           -7 #> 36:            WMO CH4 X2004A 1.895945e-06  39.9018 -113.7181           -7 #> 37:            WMO CH4 X2004A 1.932505e-06  39.9018 -113.7181           -7 #> 38:            WMO CH4 X2004A 1.906940e-06  39.9018 -113.7181           -7 #> 39:            WMO CH4 X2004A 1.939845e-06  39.9018 -113.7181           -7 #> 40:            WMO CH4 X2004A 1.969730e-06  39.9018 -113.7181           -7 #> 41:            WMO CH4 X2004A 1.971970e-06  39.9018 -113.7181           -7 #>     dataset_calibration_scale        value latitude longitude site_utc2lst #>      year month   day  hour minute second       time time_decimal max_altitude #>     <int> <int> <int> <int>  <int>  <int>      <int>        <num>        <num> #>  1:  2020     3    10    14      0      0 1583848800     2020.190         16.5 #>  2:  2020     4     1    14      0      0 1585749600     2020.250         16.5 #>  3:  2020     4    14    14      0      0 1586872800     2020.286         16.5 #>  4:  2020    10     2    14      0      0 1601647200     2020.753         16.5 #>  5:  2020    10     2    14      0      0 1601647200     2020.753         16.5 #>  6:  2020    10     5    14      0      0 1601906400     2020.761         16.5 #>  7:  2020    10    30    14      0      0 1604066400     2020.829         16.5 #>  8:  2020    10    30    14      0      0 1604066400     2020.829         16.5 #>  9:  2020    11    10    14      0      0 1605016800     2020.860         16.5 #> 10:  2020    11    10    14      0      0 1605016800     2020.860         16.5 #> 11:  2020     3    27    14      0      0 1585317600     2020.237          5.0 #> 12:  2020     4    22    14      0      0 1587564000     2020.308          5.0 #> 13:  2020     5    28    14      0      0 1590674400     2020.406          5.0 #> 14:  2020     6     9    14      0      0 1591711200     2020.439          5.0 #> 15:  2020     6    18    14      0      0 1592488800     2020.463          5.0 #> 16:  2020     6    25    14      0      0 1593093600     2020.482          5.0 #> 17:  2020     7    15    14      0      0 1594821600     2020.537          5.0 #> 18:  2020    12    12    14      0      0 1607781600     2020.947          5.0 #> 19:  2020     3    25    14      0      0 1585144800     2020.231          5.0 #> 20:  2020     4     9    14      0      0 1586440800     2020.272          5.0 #> 21:  2020     4    23    14      0      0 1587650400     2020.310          5.0 #> 22:  2020     4    27    14      0      0 1587996000     2020.321          5.0 #> 23:  2020     5    18    14      0      0 1589810400     2020.379          5.0 #> 24:  2020     6    15    14      0      0 1592229600     2020.455          5.0 #> 25:  2020     6    22    14      0      0 1592834400     2020.474          5.0 #> 26:  2020     8     5    14      0      0 1596636000     2020.594          5.0 #> 27:  2020    11     2    14      0      0 1604325600     2020.838          5.0 #> 28:  2020    11    12    14      0      0 1605189600     2020.865          5.0 #> 29:  2020    11    27    14      0      0 1606485600     2020.906          5.0 #> 30:  2020    12    22    14      0      0 1608645600     2020.974          5.0 #> 31:  2020     2    18    14      0      0 1582034400     2020.133          3.0 #> 32:  2020     1     6    14      0      0 1578319200     2020.015          5.0 #> 33:  2020     4    22    14      0      0 1587564000     2020.308          5.0 #> 34:  2020     5     5    14      0      0 1588687200     2020.343          5.0 #> 35:  2020     5    22    14      0      0 1590156000     2020.390          5.0 #> 36:  2020     6     4    14      0      0 1591279200     2020.425          5.0 #> 37:  2020     7     9    14      0      0 1594303200     2020.521          5.0 #> 38:  2020     8    26    14      0      0 1598450400     2020.652          5.0 #> 39:  2020     9    26    14      0      0 1601128800     2020.737          5.0 #> 40:  2020    12    13    14      0      0 1607868000     2020.950          5.0 #> 41:  2020    12    31    14      0      0 1609423200     2020.999          5.0 #>      year month   day  hour minute second       time time_decimal max_altitude #>     local_time #>         <lgcl> #>  1:         NA #>  2:         NA #>  3:         NA #>  4:         NA #>  5:         NA #>  6:         NA #>  7:         NA #>  8:         NA #>  9:         NA #> 10:         NA #> 11:         NA #> 12:         NA #> 13:         NA #> 14:         NA #> 15:         NA #> 16:         NA #> 17:         NA #> 18:         NA #> 19:         NA #> 20:         NA #> 21:         NA #> 22:         NA #> 23:         NA #> 24:         NA #> 25:         NA #> 26:         NA #> 27:         NA #> 28:         NA #> 29:         NA #> 30:         NA #> 31:         NA #> 32:         NA #> 33:         NA #> 34:         NA #> 35:         NA #> 36:         NA #> 37:         NA #> 38:         NA #> 39:         NA #> 40:         NA #> 41:         NA #>     local_time"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-flask.html","id":"receptors","dir":"Articles","previous_headings":"","what":"Receptors","title":"surface-flask","text":"Now can last step generating receptor list files. Now filter selected columns can round altitude also Now can format time variables two digits column indicate AGL ASL Finally, save receptors","code":"receptor <- master[, c(\"site_code\",                      \"year\",                      \"month\",                      \"day\",                      \"hour\",                      \"minute\",                      \"second\",                      \"latitude\",                      \"longitude\",                      \"altitude_final\",                      \"type_altitude\",                      \"time_decimal\")] receptor$altitude_final <- round(receptor$altitude_final) receptor <- obs_format(receptor,                         spf =  c(\"month\", \"day\",                                  \"hour\", \"minute\", \"second\")) receptor_agl <- receptor[type_altitude == 0] receptor_asl <- receptor[type_altitude == 1] if(nrow(receptor_agl) > 0) {   message(paste0(out, \"_\", datasetid, \"_receptor_AGL.txt\"), \"\\n\")    fwrite(x = receptor_agl,          file = paste0(out, \"_\", datasetid, \"_receptor_AGL.txt\"),          sep = \" \") }  if(nrow(receptor_asl) > 0) {   message(paste0(out, \"_\", datasetid, \"_receptor_ASL.txt\"), \"\\n\")    fwrite(x = receptor_asl,          file = paste0(out, \"_\", datasetid, \"receptor_ASL.txt\"),          sep = \" \")  }"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-flask.html","id":"plot","dir":"Articles","previous_headings":"","what":"Plot","title":"surface-flask","text":"Finally, just plot data, run locally","code":"obs_plot(df4, time = \"timeUTC\", yfactor = 1e9) #> Found the following sites:  #>  [1] ABT   BCK   BRA   BRW   CARL  CBY   CHL   CPS   EGB   ESP   EST   ETL   #> [13] FNE   FORT  FSD   GHG06 GHG09 HNP   HOBB  INU   INX01 INX02 INX07 INX08 #> [25] INX09 INX10 INX13 INX14 LLB   MALJ  MLO   OLI   SGP   THD   TPD   WSA   #> Plotting the following sites:  #> [1] ABT BCK library(sf) dx <- df4[,      lapply(.SD, mean),     .SDcols = \"value\",     by = .(latitude, longitude)] x <- st_as_sf(dx, coords = c(\"longitude\", \"latitude\"), crs = 4326) plot(x[\"value\"], axes = T, reset = F) maps::map(add = T)"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-insitu.html","id":"checks-and-definitions","dir":"Articles","previous_headings":"","what":"Checks and definitions","title":"surface-insitu","text":"check altitude, intake_height, altitude_final elevation. altitude_final column intake_height, added match column obs_read text files. temporal range data also check dimensions data","code":"north <- 80 south <- 10 west <- -170 east <- -50 max_altitude <- 8000 yy <- 2020 evening <- 14 df[, c(\"altitude\", \"altitude_final\", \"intake_height\", \"elevation\",        \"dataset_selection_tag\",               \"site_name\")] #>          altitude altitude_final intake_height elevation dataset_selection_tag #>             <num>          <num>         <num>     <num>                <char> #>       1:       93             33            33        60              allvalid #>       2:       93             33            33        60              allvalid #>       3:       93             33            33        60              allvalid #>       4:       93             33            33        60              allvalid #>       5:       93             33            33        60              allvalid #>      ---                                                                       #> 8281129:     2669              3             3      2666        allvalid-3magl #> 8281130:     2669              3             3      2666        allvalid-3magl #> 8281131:     2669              3             3      2666        allvalid-3magl #> 8281132:     2669              3             3      2666        allvalid-3magl #> 8281133:     2669              3             3      2666        allvalid-3magl #>                             site_name #>                                <char> #>       1: Abbotsford, British Columbia #>       2: Abbotsford, British Columbia #>       3: Abbotsford, British Columbia #>       4: Abbotsford, British Columbia #>       5: Abbotsford, British Columbia #>      ---                              #> 8281129: Zugspitze / Schneefernerhaus #> 8281130: Zugspitze / Schneefernerhaus #> 8281131: Zugspitze / Schneefernerhaus #> 8281132: Zugspitze / Schneefernerhaus #> 8281133: Zugspitze / Schneefernerhaus range(df$year) #> [1] 1983 2021 dim(df) #> [1] 8281133      54"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-insitu.html","id":"filters","dir":"Articles","previous_headings":"","what":"Filters","title":"surface-insitu","text":"Towers can observations different heights. need select one site observations registered highest height. column height named altitude_final max altitude named max_altitude.","code":"df <- df[year == yy]  df <- df[altitude_final < max_altitude &            latitude < north &            latitude > south &            longitude < east &            longitude > west] dim(df) #> [1] 274587     54 dfa <- df[,           max(altitude_final),           by = site_code] |> unique()  names(dfa)[2] <- \"max_altitude\" dfa #>     site_code max_altitude #>        <char>        <num> #>  1:       ABT        33.00 #>  2:       BCK        60.00 #>  3:       BRA        35.00 #>  4:       BRW        16.46 #>  5:      CARL         9.00 #>  6:       CBY        12.00 #>  7:       CHL        60.00 #>  8:       CPS        40.00 #>  9:       EGB        25.00 #> 10:       ESP        40.00 #> 11:       EST        50.00 #> 12:       ETL       105.00 #> 13:       FNE        15.00 #> 14:      FORT       128.00 #> 15:       FSD        40.00 #> 16:     GHG06       100.00 #> 17:     GHG09       100.00 #> 18:       HNP        10.00 #> 19:      HOBB        91.00 #> 20:       INU        10.00 #> 21:     INX01       121.00 #> 22:     INX02       136.00 #> 23:     INX07        58.00 #> 24:     INX08        41.00 #> 25:     INX09       130.00 #> 26:     INX10        40.00 #> 27:     INX13        87.00 #> 28:     INX14        76.00 #> 29:       LLB        50.00 #> 30:      MALJ       134.00 #> 31:       MLO        40.00 #> 32:       OLI         0.00 #> 33:       SGP         4.00 #> 34:       THD        90.00 #> 35:       TPD        35.00 #> 36:       WSA         3.00 #>     site_code max_altitude"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-insitu.html","id":"key-time","dir":"Articles","previous_headings":"Filters","what":"Key Time","title":"surface-insitu","text":"need start time columns. function obs_addtime adds time columns timeUTC, timeUTC_start shows start time observation timeUTC_end shows end time observation. need key_time aggregate data. can done using UTC, solar, local time. normal approach using afternoon solar local time.","code":"df2 <- obs_addtime(df) #> Adding timeUTC #> Adding timeUTC_start #> Adding timeUTC_end #> Found time_interval"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-insitu.html","id":"hierarchy-of-solar-or-local-time","dir":"Articles","previous_headings":"Filters > Key Time","what":"Hierarchy of solar or local time","title":"surface-insitu","text":"Solar time Local time columns site_utc2lst Local time longitude solar time (default) select hours interest aggregate data year, month day solar time. way, one information per day. however approach appropriate aircraft aggregated every 10 20 seconds. Hence need aggregate data one time column. Also, helps generate receptor info files including hour, minute second. Hence, need add solar local time column. local time column site_utc2lst need identify local time function add_ltime. important identifying observations evening local time. add_ltime uses two methods, first identify time difference utc identifying metadata column “site_utc2lst”. solar time available #now need cut solar time frequency needed. work local time longitude information available, aircrafts instance, local time calculated approximation based longitude: lt=UTC+longitude/15*60*60 lt = UTC + longitude/15 * 60 * 60  ltlt local time, UTCUTC time, longitudelongitude coordinate. , time cut every two hours. Now, identify local time select evening hours.","code":"df2$solar_time <- obs_addstime(df2)"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-insitu.html","id":"cut-time","dir":"Articles","previous_headings":"Filters > Key Time","what":"Cut time","title":"surface-insitu","text":"Now key column time, can cut accordingly. can check solar time cut solar time. Please note solar_time_cut, column used aggregate data filter required solar time, case 14. point can calculate averages several columns cut time. function obs_agg aggregation shown following lines code. argument gby establish function used aggregate cols. need aggregate data date (year, month, date), already filtered hours interest. , 1 observation per day. standard, let us define key_time solar_time. obs_agg function aggregate desired data column. add column max_altitude identify max altitude site.","code":"df2$solar_time_cut <- cut(x = df2$solar_time,                           breaks = \"1 hour\") |>   as.character() df3 <- df2[hour_st %in% evening] df3[, c(\"solar_time\", \"solar_time_cut\")] #>                 solar_time      solar_time_cut #>                     <POSc>              <char> #>     1: 2020-01-01 14:17:19 2020-01-01 14:00:00 #>     2: 2020-01-02 14:16:52 2020-01-02 14:00:00 #>     3: 2020-01-03 14:16:26 2020-01-03 14:00:00 #>     4: 2020-01-04 14:16:00 2020-01-04 14:00:00 #>     5: 2020-01-05 14:15:34 2020-01-05 14:00:00 #>    ---                                         #> 11473: 2020-03-15 14:20:51 2020-03-15 14:00:00 #> 11474: 2020-03-16 14:21:08 2020-03-16 14:00:00 #> 11475: 2020-03-17 14:21:26 2020-03-17 14:00:00 #> 11476: 2020-03-18 14:21:44 2020-03-18 14:00:00 #> 11477: 2020-03-19 14:22:02 2020-03-19 14:00:00 df3$key_time <- df3$solar_time_cut df4 <- obs_agg(dt = df3,                cols = c(\"value\",                         \"latitude\",                         \"longitude\",                         \"site_utc2lst\"),                verbose = T,                byalt = TRUE) #> Selecting by alt #> Adding time df4[,     max_altitude := max(altitude_final),     by = site_code] df4[,     c(\"site_code\",       \"altitude_final\",       \"max_altitude\")] |> unique() #>     site_code altitude_final max_altitude #>        <char>          <num>        <num> #>  1:       ABT          33.00        33.00 #>  2:       BCK          60.00        60.00 #>  3:       BRA          35.00        35.00 #>  4:       BRW          16.46        16.46 #>  5:      CARL           9.00         9.00 #>  6:       CBY          12.00        12.00 #>  7:       CHL          60.00        60.00 #>  8:       CPS          40.00        40.00 #>  9:       EGB          25.00        25.00 #> 10:       ESP          40.00        40.00 #> 11:       EST          50.00        50.00 #> 12:       ETL         105.00       105.00 #> 13:       FNE          15.00        15.00 #> 14:      FORT         128.00       128.00 #> 15:       FSD          40.00        40.00 #> 16:     GHG06         100.00       100.00 #> 17:     GHG06          50.00       100.00 #> 18:     GHG09         100.00       100.00 #> 19:     GHG09          50.00       100.00 #> 20:       HNP          10.00        10.00 #> 21:      HOBB          91.00        91.00 #> 22:       INU          10.00        10.00 #> 23:     INX01          10.00       121.00 #> 24:     INX01         121.00       121.00 #> 25:     INX01          40.00       121.00 #> 26:     INX02         136.00       136.00 #> 27:     INX07          21.00        58.00 #> 28:     INX07          58.00        58.00 #> 29:     INX08          41.00        41.00 #> 30:     INX09         130.00       130.00 #> 31:     INX10          40.00        40.00 #> 32:     INX13          87.00        87.00 #> 33:     INX14          76.00        76.00 #> 34:       LLB          50.00        50.00 #> 35:      MALJ         134.00       134.00 #> 36:       MLO          40.00        40.00 #> 37:       OLI           0.00         0.00 #> 38:       SGP           4.00         4.00 #> 39:       THD          90.00        90.00 #> 40:       TPD          35.00        35.00 #> 41:       WSA           3.00         3.00 #>     site_code altitude_final max_altitude"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-insitu.html","id":"master","dir":"Articles","previous_headings":"","what":"Master","title":"surface-insitu","text":"generating receptors list, database required information may replace missing values nine nines. commented #master[.na(master)] <- 999999999 transform time variables character round coordinates 4 digits","code":"master <- df4 master$timeUTC <- as.character(master$timeUTC) master$local_time <- as.character(master$local_time) master$latitude <- round(master$latitude, 4) master$longitude <- round(master$longitude, 4)"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-insitu.html","id":"save-master","dir":"Articles","previous_headings":"","what":"Save master","title":"surface-insitu","text":"Finally save master file","code":"out <- tempfile()"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-insitu.html","id":"txt","dir":"Articles","previous_headings":"Save master","what":"txt","title":"surface-insitu","text":"","code":"message(paste0(out,\"_\", datasetid, \".txt\\n\")) fwrite(master,        paste0(out,\"_\", datasetid, \".txt\"),        sep = \" \") #> C:\\Users\\sibarrae\\AppData\\Local\\Temp\\Rtmp4k67qL\\file531463a43a74_surface-insitu.txt"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-insitu.html","id":"csv","dir":"Articles","previous_headings":"Save master","what":"csv","title":"surface-insitu","text":"","code":"message(paste0(out,\"_\", datasetid, \".csv\\n\")) fwrite(master,        paste0(out,\"_\", datasetid, \".csv\"),        sep = \",\") #> C:\\Users\\sibarrae\\AppData\\Local\\Temp\\Rtmp4k67qL\\file531463a43a74_surface-insitu.csv"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-insitu.html","id":"csvy","dir":"Articles","previous_headings":"Save master","what":"csvy","title":"surface-insitu","text":"CSVY csv files YAML header include metadata tabulated text files","code":"cat(\"\\nAdding notes in csvy:\\n\") notes <- c(paste0(\"sector: \", datasetid),            paste0(\"timespan: \", yy),            paste0(\"spatial_limits: north = \", north, \", south = \", south, \", east = \", east, \", west = \", west),            \"data: Data averaged every 20 seconds\",            paste0(\"altitude: < \", max_altitude),            paste0(\"hours: \", evening),            \"local_time: used solar_time\")  cat(notes, sep = \"\\n\")  message(paste0(out,\"_\", datasetid, \".csvy\\n\")) obs_write_csvy(dt = master,                notes = notes,                out = paste0(out,\"_\", datasetid, \".csvy\")) #> Adding notes in csvy: #> sector: surface-insitu #> timespan: 2020 #> spatial_limits: north = 80, south = 10, east = -50, west = -170 #> data: Data averaged every 20 seconds #> altitude: < 8000 #> hours: 14 #> local_time: used solar_time #> C:\\Users\\sibarrae\\AppData\\Local\\Temp\\Rtmp4k67qL\\file531463a43a74_surface-insitu.csvy obs_read_csvy(paste0(out,\"_\", datasetid, \".csvy\")) #>  [1] \"---\"                                                                  #>  [2] \"name: Metadata \"                                                      #>  [3] \"sector: surface-insitu\"                                               #>  [4] \"timespan: 2020\"                                                       #>  [5] \"spatial_limits: north = 80, south = 10, east = -50, west = -170\"      #>  [6] \"data: Data averaged every 20 seconds\"                                 #>  [7] \"altitude: < 8000\"                                                     #>  [8] \"hours: 14\"                                                            #>  [9] \"local_time: used solar_time\"                                          #> [10] \"structure: \"                                                          #> [11] \"Classes 'data.table' and 'data.frame':\\t11378 obs. of  20 variables:\" #> [12] \" $ timeUTC                  : chr  \\\"2020-01-01 14:00:00\\\" \\\"..\"      #> [13] \" $ site_code                : chr  \\\"ABT\\\" \\\"ABT\\\" ...\"               #> [14] \" $ altitude_final           : num  33 33 33 33 33 ...\"                #> [15] \" $ type_altitude            : num  NA NA NA NA NA ...\"                #> [16] \" $ lab_1_abbr               : chr  \\\"ECCC\\\" \\\"ECCC\\\" ...\"             #> [17] \" $ dataset_calibration_scale: chr  \\\"WMO CH4 X2004A\\\" \\\"WMO \\\"..\"     #> [18] \" $ value                    : num  1.96e-06 1.99e-06 ...\"             #> [19] \" $ latitude                 : num  49 49 ...\"                         #> [20] \" $ longitude                : num  -122 -122 ...\"                     #> [21] \" $ site_utc2lst             : num  -8 -8 -8 -8 -8 ...\"                #> [22] \" $ year                     : int  2020 2020 2020 2020 202..\"         #> [23] \" $ month                    : int  1 1 1 1 1 ...\"                     #> [24] \" $ day                      : chr  \\\"01\\\" \\\"02\\\" ...\"                 #> [25] \" $ hour                     : int  14 14 14 14 14 ...\"                #> [26] \" $ minute                   : int  0 0 0 0 0 ...\"                     #> [27] \" $ second                   : int  0 0 0 0 0 ...\"                     #> [28] \" $ time                     : num  1.58e+09 1.58e+09 ...\"             #> [29] \" $ time_decimal             : num  2020 2020 ...\"                     #> [30] \" $ max_altitude             : num  33 33 33 33 33 ...\"                #> [31] \" $ local_time               : chr  NA NA ...\"                         #> [32] \" - attr(*, \\\".internal.selfref\\\")=<externalptr> \"                     #> [33] \"NULL\"                                                                 #> [34] \"---\" #>                    timeUTC site_code altitude_final type_altitude lab_1_abbr #>                     <POSc>    <char>          <num>         <int>     <char> #>     1: 2020-01-01 14:00:00       ABT             33            NA       ECCC #>     2: 2020-01-02 14:00:00       ABT             33            NA       ECCC #>     3: 2020-01-03 14:00:00       ABT             33            NA       ECCC #>     4: 2020-01-04 14:00:00       ABT             33            NA       ECCC #>     5: 2020-01-05 14:00:00       ABT             33            NA       ECCC #>    ---                                                                       #> 11374: 2020-03-15 14:00:00       WSA              3            NA       ECCC #> 11375: 2020-03-16 14:00:00       WSA              3            NA       ECCC #> 11376: 2020-03-17 14:00:00       WSA              3            NA       ECCC #> 11377: 2020-03-18 14:00:00       WSA              3            NA       ECCC #> 11378: 2020-03-19 14:00:00       WSA              3            NA       ECCC #>        dataset_calibration_scale      value latitude longitude site_utc2lst #>                           <char>      <num>    <num>     <num>        <int> #>     1:            WMO CH4 X2004A 1.9555e-06  49.0114 -122.3353           -8 #>     2:            WMO CH4 X2004A 1.9929e-06  49.0114 -122.3353           -8 #>     3:            WMO CH4 X2004A 1.9471e-06  49.0114 -122.3353           -8 #>     4:            WMO CH4 X2004A 1.9763e-06  49.0114 -122.3353           -8 #>     5:            WMO CH4 X2004A 1.9656e-06  49.0114 -122.3353           -8 #>    ---                                                                      #> 11374:            WMO CH4 X2004A 1.9610e-06  43.9322  -60.0093           -4 #> 11375:            WMO CH4 X2004A 1.9614e-06  43.9322  -60.0093           -4 #> 11376:            WMO CH4 X2004A 1.9560e-06  43.9322  -60.0093           -4 #> 11377:            WMO CH4 X2004A 1.9663e-06  43.9322  -60.0093           -4 #> 11378:            WMO CH4 X2004A 1.9711e-06  43.9322  -60.0093           -4 #>         year month   day  hour minute second       time time_decimal #>        <int> <int> <int> <int>  <int>  <int>      <int>        <num> #>     1:  2020     1     1    14      0      0 1577887200     2020.002 #>     2:  2020     1     2    14      0      0 1577973600     2020.004 #>     3:  2020     1     3    14      0      0 1578060000     2020.007 #>     4:  2020     1     4    14      0      0 1578146400     2020.010 #>     5:  2020     1     5    14      0      0 1578232800     2020.013 #>    ---                                                               #> 11374:  2020     3    15    14      0      0 1584280800     2020.204 #> 11375:  2020     3    16    14      0      0 1584367200     2020.207 #> 11376:  2020     3    17    14      0      0 1584453600     2020.209 #> 11377:  2020     3    18    14      0      0 1584540000     2020.212 #> 11378:  2020     3    19    14      0      0 1584626400     2020.215 #>        max_altitude local_time #>               <num>     <lgcl> #>     1:           33         NA #>     2:           33         NA #>     3:           33         NA #>     4:           33         NA #>     5:           33         NA #>    ---                         #> 11374:            3         NA #> 11375:            3         NA #> 11376:            3         NA #> 11377:            3         NA #> 11378:            3         NA"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-insitu.html","id":"receptors","dir":"Articles","previous_headings":"","what":"Receptors","title":"surface-insitu","text":"Now can last step generating receptor list files. Now filter selected columns can round altitude also Now can format time variables two digits column indicate AGL ASL Finally, save receptors","code":"receptor <- master[, c(\"site_code\",                      \"year\",                      \"month\",                      \"day\",                      \"hour\",                      \"minute\",                      \"second\",                      \"latitude\",                      \"longitude\",                      \"altitude_final\",                      \"type_altitude\",                      \"time_decimal\")] receptor$altitude_final <- round(receptor$altitude_final) receptor <- obs_format(receptor,                         spf =  c(\"month\", \"day\",                                  \"hour\", \"minute\", \"second\")) receptor_agl <- receptor[type_altitude == 0] receptor_asl <- receptor[type_altitude == 1] if(nrow(receptor_agl) > 0) {   message(paste0(out, \"_\", datasetid, \"_receptor_AGL.txt\"), \"\\n\")    fwrite(x = receptor_agl,          file = paste0(out, \"_\", datasetid, \"_receptor_AGL.txt\"),          sep = \" \") }  if(nrow(receptor_asl) > 0) {   message(paste0(out, \"_\", datasetid, \"_receptor_ASL.txt\"), \"\\n\")    fwrite(x = receptor_asl,          file = paste0(out, \"_\", datasetid, \"receptor_ASL.txt\"),          sep = \" \")  } #> C:\\Users\\sibarrae\\AppData\\Local\\Temp\\Rtmp4k67qL\\file531463a43a74_surface-insitu_receptor_AGL.txt"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-insitu.html","id":"plot","dir":"Articles","previous_headings":"","what":"Plot","title":"surface-insitu","text":"Finally, just plot data, run locally","code":"obs_plot(df4, time = \"timeUTC\", yfactor = 1e9) #> Found the following sites:  #>  [1] ABT   BCK   BRA   BRW   CARL  CBY   CHL   CPS   EGB   ESP   EST   ETL   #> [13] FNE   FORT  FSD   GHG06 GHG09 HNP   HOBB  INU   INX01 INX02 INX07 INX08 #> [25] INX09 INX10 INX13 INX14 LLB   MALJ  MLO   OLI   SGP   THD   TPD   WSA   #> Plotting the following sites:  #> [1] ABT BCK library(sf) dx <- df4[,      lapply(.SD, mean),     .SDcols = \"value\",     by = .(latitude, longitude)] x <- st_as_sf(dx, coords = c(\"longitude\", \"latitude\"), crs = 4326) plot(x[\"value\"], axes = T, reset = F) maps::map(add = T)"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-pfp.html","id":"checks-and-definitions","dir":"Articles","previous_headings":"","what":"Checks and definitions","title":"surface-pfp","text":"check altitude, intake_height, altitude_final elevation. altitude_final column intake_height, added match column obs_read text files. temporal range data also check dimensions data","code":"north <- 80 south <- 10 west <- -170 east <- -50 max_altitude <- 8000 yy <- 2020 evening <- 14 df[, c(\"altitude\", \"altitude_final\", \"intake_height\", \"elevation\",        \"dataset_selection_tag\",               \"site_name\")] #>        altitude altitude_final intake_height elevation dataset_selection_tag #>           <num>          <num>         <num>     <num>                <char> #>     1:    160.4            108           108      52.4      allvalid-107magl #>     2:    160.4            108           108      52.4      allvalid-107magl #>     3:    160.4            108           108      52.4      allvalid-107magl #>     4:    160.4            108           108      52.4      allvalid-107magl #>     5:    160.4            108           108      52.4      allvalid-107magl #>    ---                                                                       #> 43159:    708.0            457           457     251.0      allvalid-457magl #> 43160:    708.0            457           457     251.0      allvalid-457magl #> 43161:    708.0            457           457     251.0      allvalid-457magl #> 43162:    708.0            457           457     251.0      allvalid-457magl #> 43163:    708.0            457           457     251.0      allvalid-457magl #>            site_name #>               <char> #>     1: Argyle, Maine #>     2: Argyle, Maine #>     3: Argyle, Maine #>     4: Argyle, Maine #>     5: Argyle, Maine #>    ---               #> 43159:  Moody, Texas #> 43160:  Moody, Texas #> 43161:  Moody, Texas #> 43162:  Moody, Texas #> 43163:  Moody, Texas range(df$year) #> [1] 2005 2021 dim(df) #> [1] 43163    53"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-pfp.html","id":"filters","dir":"Articles","previous_headings":"","what":"Filters","title":"surface-pfp","text":"Towers can observations different heights. need select one site observations registered highest height. column height named altitude_final max altitude named max_altitude.","code":"df <- df[year == yy]  df <- df[altitude_final < max_altitude &            latitude < north &            latitude > south &            longitude < east &            longitude > west] dim(df) #> [1] 2205   53 dfa <- df[,           max(altitude_final),           by = site_code] |> unique()  names(dfa)[2] <- \"max_altitude\" dfa #>     site_code max_altitude #>        <char>        <num> #>  1:       AMT       108.00 #>  2:       CRV        31.70 #>  3:       LEF       396.00 #>  4:       LEW        95.00 #>  5:       MBO        11.30 #>  6:       MRC        60.97 #>  7:       MSH        46.30 #>  8:       MWO        45.90 #>  9:       NWR         3.20 #> 10:       SCT       304.80 #> 11:       SGP        60.00 #> 12:       WBI       378.90 #> 13:       WGC        89.10 #> 14:       WKT       122.00"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-pfp.html","id":"key-time","dir":"Articles","previous_headings":"Filters","what":"Key Time","title":"surface-pfp","text":"need start time columns. function obs_addtime adds time columns timeUTC, timeUTC_start shows start time observation timeUTC_end shows end time observation. need key_time aggregate data. can done using UTC, solar, local time. normal approach using afternoon solar local time.","code":"df2 <- obs_addtime(df) #> Adding timeUTC #> Adding timeUTC_start #> Adding timeUTC_end #> Found time_interval"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-pfp.html","id":"hierarchy-of-solar-or-local-time","dir":"Articles","previous_headings":"Filters > Key Time","what":"Hierarchy of solar or local time","title":"surface-pfp","text":"Solar time Local time columns site_utc2lst Local time longitude solar time (default) select hours interest aggregate data year, month day solar time. way, one information per day. however approach appropriate aircraft aggregated every 10 20 seconds. Hence need aggregate data one time column. Also, helps generate receptor info files including hour, minute second. Hence, need add solar local time column. local time column site_utc2lst need identify local time function add_ltime. important identifying observations evening local time. add_ltime uses two methods, first identify time difference utc identifying metadata column “site_utc2lst”. solar time available #now need cut solar time frequency needed. work local time longitude information available, aircrafts instance, local time calculated approximation based longitude: lt=UTC+longitude/15*60*60 lt = UTC + longitude/15 * 60 * 60  ltlt local time, UTCUTC time, longitudelongitude coordinate. , time cut every two hours. Now, identify local time select evening hours.","code":"df2$solar_time <- obs_addstime(df2)"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-pfp.html","id":"cut-time","dir":"Articles","previous_headings":"Filters > Key Time","what":"Cut time","title":"surface-pfp","text":"Now key column time, can cut accordingly. can check solar time cut solar time. Please note solar_time_cut, column used aggregate data filter required solar time, case 14. point can calculate averages several columns cut time. function obs_agg aggregation shown following lines code. argument gby establish function used aggregate cols. need aggregate data date (year, month, date), already filtered hours interest. , 1 observation per day. standard, let us define key_time solar_time. obs_agg function aggregate desired data column. add column max_altitude identify max altitude site.","code":"df2$solar_time_cut <- cut(x = df2$solar_time,                           breaks = \"1 hour\") |>   as.character() df3 <- df2[hour_st %in% evening] df3[, c(\"solar_time\", \"solar_time_cut\")] #>                solar_time      solar_time_cut #>                    <POSc>              <char> #>    1: 2020-01-09 14:43:43 2020-01-09 14:00:00 #>    2: 2020-01-10 14:43:23 2020-01-10 14:00:00 #>    3: 2020-03-13 14:46:01 2020-03-13 14:00:00 #>    4: 2020-03-15 14:46:20 2020-03-15 14:00:00 #>    5: 2020-03-17 14:47:01 2020-03-17 14:00:00 #>   ---                                         #> 1047: 2020-12-22 14:14:08 2020-12-22 14:00:00 #> 1048: 2020-12-24 14:13:21 2020-12-24 14:00:00 #> 1049: 2020-12-26 14:12:29 2020-12-26 14:00:00 #> 1050: 2020-12-28 14:11:32 2020-12-28 14:00:00 #> 1051: 2020-12-30 14:10:46 2020-12-30 14:00:00 df3$key_time <- df3$solar_time_cut df4 <- obs_agg(dt = df3,                cols = c(\"value\",                         \"latitude\",                         \"longitude\",                         \"site_utc2lst\"),                verbose = T,                byalt = TRUE) #> Selecting by alt #> Adding time df4[,     max_altitude := max(altitude_final),     by = site_code] df4[,     c(\"site_code\",       \"altitude_final\",       \"max_altitude\")] |> unique() #>     site_code altitude_final max_altitude #>        <char>          <num>        <num> #>  1:       AMT         108.00       108.00 #>  2:       LEF         396.00       396.00 #>  3:       LEW          95.00        95.00 #>  4:       MRC          60.97        60.97 #>  5:       MSH          46.30        46.30 #>  6:       NWR           3.20         3.20 #>  7:       SCT         304.80       304.80 #>  8:       SGP          60.00        60.00 #>  9:       WBI         378.90       378.90 #> 10:       WGC          89.10        89.10 #> 11:       WKT         122.00       122.00"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-pfp.html","id":"master","dir":"Articles","previous_headings":"","what":"Master","title":"surface-pfp","text":"generating receptors list, database required information may replace missing values nine nines. commented #master[.na(master)] <- 999999999 transform time variables character round coordinates 4 digits","code":"master <- df4 master$timeUTC <- as.character(master$timeUTC) master$local_time <- as.character(master$local_time) master$latitude <- round(master$latitude, 4) master$longitude <- round(master$longitude, 4)"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-pfp.html","id":"save-master","dir":"Articles","previous_headings":"","what":"Save master","title":"surface-pfp","text":"Finally save master file","code":"out <- tempfile()"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-pfp.html","id":"txt","dir":"Articles","previous_headings":"Save master","what":"txt","title":"surface-pfp","text":"","code":"message(paste0(out,\"_\", datasetid, \".txt\\n\")) fwrite(master,        paste0(out,\"_\", datasetid, \".txt\"),        sep = \" \") #> C:\\Users\\sibarrae\\AppData\\Local\\Temp\\RtmpkdE8le\\file844c7c2a3817_surface-pfp.txt"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-pfp.html","id":"csv","dir":"Articles","previous_headings":"Save master","what":"csv","title":"surface-pfp","text":"","code":"message(paste0(out,\"_\", datasetid, \".csv\\n\")) fwrite(master,        paste0(out,\"_\", datasetid, \".csv\"),        sep = \",\") #> C:\\Users\\sibarrae\\AppData\\Local\\Temp\\RtmpkdE8le\\file844c7c2a3817_surface-pfp.csv"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-pfp.html","id":"csvy","dir":"Articles","previous_headings":"Save master","what":"csvy","title":"surface-pfp","text":"CSVY csv files YAML header include metadata tabulated text files","code":"cat(\"\\nAdding notes in csvy:\\n\") notes <- c(paste0(\"sector: \", datasetid),            paste0(\"timespan: \", yy),            paste0(\"spatial_limits: north = \", north, \", south = \", south, \", east = \", east, \", west = \", west),            \"data: Data averaged every 20 seconds\",            paste0(\"altitude: < \", max_altitude),            paste0(\"hours: \", evening),            \"local_time: used solar_time\")  cat(notes, sep = \"\\n\")  message(paste0(out,\"_\", datasetid, \".csvy\\n\")) obs_write_csvy(dt = master,                notes = notes,                out = paste0(out,\"_\", datasetid, \".csvy\")) #> Adding notes in csvy: #> sector: surface-pfp #> timespan: 2020 #> spatial_limits: north = 80, south = 10, east = -50, west = -170 #> data: Data averaged every 20 seconds #> altitude: < 8000 #> hours: 14 #> local_time: used solar_time #> C:\\Users\\sibarrae\\AppData\\Local\\Temp\\RtmpkdE8le\\file844c7c2a3817_surface-pfp.csvy obs_read_csvy(paste0(out,\"_\", datasetid, \".csvy\")) #>  [1] \"---\"                                                                 #>  [2] \"name: Metadata \"                                                     #>  [3] \"sector: surface-pfp\"                                                 #>  [4] \"timespan: 2020\"                                                      #>  [5] \"spatial_limits: north = 80, south = 10, east = -50, west = -170\"     #>  [6] \"data: Data averaged every 20 seconds\"                                #>  [7] \"altitude: < 8000\"                                                    #>  [8] \"hours: 14\"                                                           #>  [9] \"local_time: used solar_time\"                                         #> [10] \"structure: \"                                                         #> [11] \"Classes 'data.table' and 'data.frame':\\t1050 obs. of  20 variables:\" #> [12] \" $ timeUTC                  : chr  \\\"2020-01-09 14:00:00\\\" \\\"..\"     #> [13] \" $ site_code                : chr  \\\"AMT\\\" \\\"AMT\\\" ...\"              #> [14] \" $ altitude_final           : num  108 108 108 108 108 ...\"          #> [15] \" $ type_altitude            : num  NA NA NA NA NA ...\"               #> [16] \" $ lab_1_abbr               : chr  \\\"NOAA\\\" \\\"NOAA\\\" ...\"            #> [17] \" $ dataset_calibration_scale: chr  \\\"WMO CH4 X2004A\\\" \\\"WMO \\\"..\"    #> [18] \" $ value                    : num  1.97e-06 2.01e-06 ...\"            #> [19] \" $ latitude                 : num  45 45 ...\"                        #> [20] \" $ longitude                : num  -68.7 -68.7 ...\"                  #> [21] \" $ site_utc2lst             : num  -5 -5 -5 -5 -5 ...\"               #> [22] \" $ year                     : int  2020 2020 2020 2020 202..\"        #> [23] \" $ month                    : int  1 1 3 3 3 ...\"                    #> [24] \" $ day                      : chr  \\\"09\\\" \\\"10\\\" ...\"                #> [25] \" $ hour                     : int  14 14 14 14 14 ...\"               #> [26] \" $ minute                   : int  0 0 0 0 0 ...\"                    #> [27] \" $ second                   : int  0 0 0 0 0 ...\"                    #> [28] \" $ time                     : num  1.58e+09 1.58e+09 ...\"            #> [29] \" $ time_decimal             : num  2020 2020 ...\"                    #> [30] \" $ max_altitude             : num  108 108 108 108 108 ...\"          #> [31] \" $ local_time               : chr  NA NA ...\"                        #> [32] \" - attr(*, \\\".internal.selfref\\\")=<externalptr> \"                    #> [33] \"NULL\"                                                                #> [34] \"---\" #>                   timeUTC site_code altitude_final type_altitude lab_1_abbr #>                    <POSc>    <char>          <num>         <int>     <char> #>    1: 2020-01-09 14:00:00       AMT            108            NA       NOAA #>    2: 2020-01-10 14:00:00       AMT            108            NA       NOAA #>    3: 2020-03-13 14:00:00       AMT            108            NA       NOAA #>    4: 2020-03-15 14:00:00       AMT            108            NA       NOAA #>    5: 2020-03-17 14:00:00       AMT            108            NA       NOAA #>   ---                                                                       #> 1046: 2020-12-22 14:00:00       WKT            122             0       NOAA #> 1047: 2020-12-24 14:00:00       WKT            122             0       NOAA #> 1048: 2020-12-26 14:00:00       WKT            122             0       NOAA #> 1049: 2020-12-28 14:00:00       WKT            122             0       NOAA #> 1050: 2020-12-30 14:00:00       WKT            122             0       NOAA #>       dataset_calibration_scale        value latitude longitude site_utc2lst #>                          <char>        <num>    <num>     <num>        <int> #>    1:            WMO CH4 X2004A 1.971160e-06  45.0345  -68.6821           -5 #>    2:            WMO CH4 X2004A 2.005080e-06  45.0345  -68.6821           -5 #>    3:            WMO CH4 X2004A 1.959600e-06  45.0345  -68.6821           -5 #>    4:            WMO CH4 X2004A 1.961400e-06  45.0345  -68.6821           -5 #>    5:            WMO CH4 X2004A 1.959420e-06  45.0345  -68.6821           -5 #>   ---                                                                        #> 1046:            WMO CH4 X2004A 2.067470e-06  31.3149  -97.3269           -6 #> 1047:            WMO CH4 X2004A 1.987230e-06  31.3149  -97.3269           -6 #> 1048:            WMO CH4 X2004A 1.990765e-06  31.3149  -97.3269           -6 #> 1049:            WMO CH4 X2004A 2.183760e-06  31.3149  -97.3269           -6 #> 1050:            WMO CH4 X2004A 2.084820e-06  31.3149  -97.3269           -6 #>        year month   day  hour minute second       time time_decimal #>       <int> <int> <int> <int>  <int>  <int>      <int>        <num> #>    1:  2020     1     9    14      0      0 1578578400     2020.023 #>    2:  2020     1    10    14      0      0 1578664800     2020.026 #>    3:  2020     3    13    14      0      0 1584108000     2020.198 #>    4:  2020     3    15    14      0      0 1584280800     2020.204 #>    5:  2020     3    17    14      0      0 1584453600     2020.209 #>   ---                                                               #> 1046:  2020    12    22    14      0      0 1608645600     2020.974 #> 1047:  2020    12    24    14      0      0 1608818400     2020.980 #> 1048:  2020    12    26    14      0      0 1608991200     2020.985 #> 1049:  2020    12    28    14      0      0 1609164000     2020.991 #> 1050:  2020    12    30    14      0      0 1609336800     2020.996 #>       max_altitude local_time #>              <num>     <lgcl> #>    1:          108         NA #>    2:          108         NA #>    3:          108         NA #>    4:          108         NA #>    5:          108         NA #>   ---                         #> 1046:          122         NA #> 1047:          122         NA #> 1048:          122         NA #> 1049:          122         NA #> 1050:          122         NA"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-pfp.html","id":"receptors","dir":"Articles","previous_headings":"","what":"Receptors","title":"surface-pfp","text":"Now can last step generating receptor list files. Now filter selected columns can round altitude also Now can format time variables two digits column indicate AGL ASL Finally, save receptors","code":"receptor <- master[, c(\"site_code\",                      \"year\",                      \"month\",                      \"day\",                      \"hour\",                      \"minute\",                      \"second\",                      \"latitude\",                      \"longitude\",                      \"altitude_final\",                      \"type_altitude\",                      \"time_decimal\")] receptor$altitude_final <- round(receptor$altitude_final) receptor <- obs_format(receptor,                         spf =  c(\"month\", \"day\",                                  \"hour\", \"minute\", \"second\")) receptor_agl <- receptor[type_altitude == 0] receptor_asl <- receptor[type_altitude == 1] if(nrow(receptor_agl) > 0) {   message(paste0(out, \"_\", datasetid, \"_receptor_AGL.txt\"), \"\\n\")    fwrite(x = receptor_agl,          file = paste0(out, \"_\", datasetid, \"_receptor_AGL.txt\"),          sep = \" \") }  if(nrow(receptor_asl) > 0) {   message(paste0(out, \"_\", datasetid, \"_receptor_ASL.txt\"), \"\\n\")    fwrite(x = receptor_asl,          file = paste0(out, \"_\", datasetid, \"receptor_ASL.txt\"),          sep = \" \")  } #> C:\\Users\\sibarrae\\AppData\\Local\\Temp\\RtmpkdE8le\\file844c7c2a3817_surface-pfp_receptor_AGL.txt"},{"path":"https://noaa-gml.github.io/rtorf/articles/surface-pfp.html","id":"plot","dir":"Articles","previous_headings":"","what":"Plot","title":"surface-pfp","text":"Finally, just plot data, run locally","code":"obs_plot(df4, time = \"timeUTC\", yfactor = 1e9) #> Found the following sites:  #>  [1] AMT LEF LEW MRC MSH NWR SCT SGP WBI WGC WKT #> Plotting the following sites:  #> [1] AMT LEF #> png  #>   2 library(sf) dx <- df4[,      lapply(.SD, mean),     .SDcols = \"value\",     by = .(latitude, longitude)] x <- st_as_sf(dx, coords = c(\"longitude\", \"latitude\"), crs = 4326) plot(x[\"value\"], axes = T, reset = F) maps::map(add = T)"},{"path":"https://noaa-gml.github.io/rtorf/articles/tower-insitu.html","id":"checks-and-definitions","dir":"Articles","previous_headings":"","what":"Checks and definitions","title":"tower-insitu","text":"check altitude, intake_height, altitude_final elevation. altitude_final column intake_height, added match column obs_read text files. temporal range data also check dimensions data","code":"north <- 80 south <- 10 west <- -170 east <- -50 max_altitude <- 8000 yy <- 2020 evening <- 14 df[, c(\"altitude\", \"altitude_final\", \"intake_height\", \"elevation\",        \"dataset_selection_tag\",               \"site_name\")] #>          altitude altitude_final intake_height elevation dataset_selection_tag #>             <num>          <num>         <num>     <num>                <char> #>       1:      139             29            29       110       allvalid-29magl #>       2:      139             29            29       110       allvalid-29magl #>       3:      139             29            29       110       allvalid-29magl #>       4:      139             29            29       110       allvalid-29magl #>       5:      139             29            29       110       allvalid-29magl #>      ---                                                                       #> 2611288:      341             77            77       264       allvalid-77magl #> 2611289:      341             77            77       264       allvalid-77magl #> 2611290:      341             77            77       264       allvalid-77magl #> 2611291:      341             77            77       264       allvalid-77magl #> 2611292:      341             77            77       264       allvalid-77magl #>          site_name #>             <char> #>       1:     Azovo #>       2:     Azovo #>       3:     Azovo #>       4:     Azovo #>       5:     Azovo #>      ---           #> 2611288:   Yakutsk #> 2611289:   Yakutsk #> 2611290:   Yakutsk #> 2611291:   Yakutsk #> 2611292:   Yakutsk range(df$year) #> [1] 2004 2021 dim(df) #> [1] 2611292      51"},{"path":"https://noaa-gml.github.io/rtorf/articles/tower-insitu.html","id":"filters","dir":"Articles","previous_headings":"","what":"Filters","title":"tower-insitu","text":"Towers can observations different heights. need select one site observations registered highest height. column height named altitude_final max altitude named max_altitude.","code":"df <- df[year == yy]  df <- df[altitude_final < max_altitude &            latitude < north &            latitude > south &            longitude < east &            longitude > west] dim(df) #> [1] 96106    51 dfa <- df[,           max(altitude_final),           by = site_code] |> unique()  names(dfa)[2] <- \"max_altitude\" dfa #>    site_code max_altitude #>       <char>        <num> #> 1:       CRV         31.7 #> 2:       LEF        396.0 #> 3:       SCT        304.8 #> 4:       WGC        484.0"},{"path":"https://noaa-gml.github.io/rtorf/articles/tower-insitu.html","id":"key-time","dir":"Articles","previous_headings":"Filters","what":"Key Time","title":"tower-insitu","text":"need start time columns. function obs_addtime adds time columns timeUTC, timeUTC_start shows start time observation timeUTC_end shows end time observation. need key_time aggregate data. can done using UTC, solar, local time. normal approach using afternoon solar local time.","code":"df2 <- obs_addtime(df) #> Adding timeUTC #> Adding timeUTC_start #> Adding timeUTC_end #> Found time_interval"},{"path":"https://noaa-gml.github.io/rtorf/articles/tower-insitu.html","id":"hierarchy-of-solar-or-local-time","dir":"Articles","previous_headings":"Filters > Key Time","what":"Hierarchy of solar or local time","title":"tower-insitu","text":"Solar time Local time columns site_utc2lst Local time longitude solar time (default) select hours interest aggregate data year, month day solar time. way, one information per day. however approach appropriate aircraft aggregated every 10 20 seconds. Hence need aggregate data one time column. Also, helps generate receptor info files including hour, minute second. Hence, need add solar local time column. local time column site_utc2lst need identify local time function add_ltime. important identifying observations evening local time. add_ltime uses two methods, first identify time difference utc identifying metadata column “site_utc2lst”. solar time available #now need cut solar time frequency needed. work local time longitude information available, aircrafts instance, local time calculated approximation based longitude: lt=UTC+longitude/15*60*60 lt = UTC + longitude/15 * 60 * 60  ltlt local time, UTCUTC time, longitudelongitude coordinate. , time cut every two hours. Now, identify local time select evening hours.","code":"df2$solar_time <- obs_addstime(df2)"},{"path":"https://noaa-gml.github.io/rtorf/articles/tower-insitu.html","id":"cut-time","dir":"Articles","previous_headings":"Filters > Key Time","what":"Cut time","title":"tower-insitu","text":"Now key column time, can cut accordingly. can check solar time cut solar time. Please note solar_time_cut, column used aggregate data filter required solar time, case 14. point can calculate averages several columns cut time. function obs_agg aggregation shown following lines code. argument gby establish function used aggregate cols. need aggregate data date (year, month, date), already filtered hours interest. , 1 observation per day. standard, let us define key_time solar_time. obs_agg function aggregate desired data column. add column max_altitude identify max altitude site.","code":"df2$solar_time_cut <- cut(x = df2$solar_time,                           breaks = \"1 hour\") |>   as.character() df3 <- df2[hour_st %in% evening] df3[, c(\"solar_time\", \"solar_time_cut\")] #>                solar_time      solar_time_cut #>                    <POSc>              <char> #>    1: 2019-12-31 14:37:48 2019-12-31 14:00:00 #>    2: 2020-01-01 14:35:49 2020-01-01 14:00:00 #>    3: 2020-01-02 14:35:23 2020-01-02 14:00:00 #>    4: 2020-01-03 14:34:57 2020-01-03 14:00:00 #>    5: 2020-01-04 14:34:31 2020-01-04 14:00:00 #>   ---                                         #> 3676: 2020-12-27 14:22:57 2020-12-27 14:00:00 #> 3677: 2020-12-28 14:22:30 2020-12-28 14:00:00 #> 3678: 2020-12-29 14:22:02 2020-12-29 14:00:00 #> 3679: 2020-12-30 14:21:35 2020-12-30 14:00:00 #> 3680: 2020-12-31 14:21:08 2020-12-31 14:00:00 df3$key_time <- df3$solar_time_cut df4 <- obs_agg(dt = df3,                cols = c(\"value\",                         \"latitude\",                         \"longitude\",                         \"site_utc2lst\"),                verbose = T,                byalt = TRUE) #> Selecting by alt #> Adding time df4[,     max_altitude := max(altitude_final),     by = site_code] df4[,     c(\"site_code\",       \"altitude_final\",       \"max_altitude\")] |> unique() #>     site_code altitude_final max_altitude #>        <char>          <num>        <num> #>  1:       CRV           17.1         31.7 #>  2:       CRV           31.7         31.7 #>  3:       CRV            4.9         31.7 #>  4:       LEF          122.0        396.0 #>  5:       LEF          396.0        396.0 #>  6:       LEF           30.0        396.0 #>  7:       SCT          304.8        304.8 #>  8:       SCT           31.0        304.8 #>  9:       SCT           61.0        304.8 #> 10:       WGC           30.0        484.0 #> 11:       WGC          484.0        484.0 #> 12:       WGC           89.1        484.0"},{"path":"https://noaa-gml.github.io/rtorf/articles/tower-insitu.html","id":"master","dir":"Articles","previous_headings":"","what":"Master","title":"tower-insitu","text":"generating receptors list, database required information may replace missing values nine nines. commented #master[.na(master)] <- 999999999 transform time variables character round coordinates 4 digits","code":"master <- df4 master$timeUTC <- as.character(master$timeUTC) master$local_time <- as.character(master$local_time) master$latitude <- round(master$latitude, 4) master$longitude <- round(master$longitude, 4)"},{"path":"https://noaa-gml.github.io/rtorf/articles/tower-insitu.html","id":"save-master","dir":"Articles","previous_headings":"","what":"Save master","title":"tower-insitu","text":"Finally save master file","code":"out <- tempfile()"},{"path":"https://noaa-gml.github.io/rtorf/articles/tower-insitu.html","id":"txt","dir":"Articles","previous_headings":"Save master","what":"txt","title":"tower-insitu","text":"","code":"message(paste0(out,\"_\", datasetid, \".txt\\n\")) fwrite(master,        paste0(out,\"_\", datasetid, \".txt\"),        sep = \" \") #> C:\\Users\\sibarrae\\AppData\\Local\\Temp\\RtmpyqH3NI\\file5ef420fc3b21_tower-insitu.txt"},{"path":"https://noaa-gml.github.io/rtorf/articles/tower-insitu.html","id":"csv","dir":"Articles","previous_headings":"Save master","what":"csv","title":"tower-insitu","text":"","code":"message(paste0(out,\"_\", datasetid, \".csv\\n\")) fwrite(master,        paste0(out,\"_\", datasetid, \".csv\"),        sep = \",\") #> C:\\Users\\sibarrae\\AppData\\Local\\Temp\\RtmpyqH3NI\\file5ef420fc3b21_tower-insitu.csv"},{"path":"https://noaa-gml.github.io/rtorf/articles/tower-insitu.html","id":"csvy","dir":"Articles","previous_headings":"Save master","what":"csvy","title":"tower-insitu","text":"CSVY csv files YAML header include metadata tabulated text files","code":"cat(\"\\nAdding notes in csvy:\\n\") notes <- c(paste0(\"sector: \", datasetid),            paste0(\"timespan: \", yy),            paste0(\"spatial_limits: north = \", north, \", south = \", south, \", east = \", east, \", west = \", west),            \"data: Data averaged every 20 seconds\",            paste0(\"altitude: < \", max_altitude),            paste0(\"hours: \", evening),            \"local_time: used solar_time\")  cat(notes, sep = \"\\n\")  message(paste0(out,\"_\", datasetid, \".csvy\\n\")) obs_write_csvy(dt = master,                notes = notes,                out = paste0(out,\"_\", datasetid, \".csvy\")) #> Adding notes in csvy: #> sector: tower-insitu #> timespan: 2020 #> spatial_limits: north = 80, south = 10, east = -50, west = -170 #> data: Data averaged every 20 seconds #> altitude: < 8000 #> hours: 14 #> local_time: used solar_time #> C:\\Users\\sibarrae\\AppData\\Local\\Temp\\RtmpyqH3NI\\file5ef420fc3b21_tower-insitu.csvy obs_read_csvy(paste0(out,\"_\", datasetid, \".csvy\")) #>  [1] \"---\"                                                                 #>  [2] \"name: Metadata \"                                                     #>  [3] \"sector: tower-insitu\"                                                #>  [4] \"timespan: 2020\"                                                      #>  [5] \"spatial_limits: north = 80, south = 10, east = -50, west = -170\"     #>  [6] \"data: Data averaged every 20 seconds\"                                #>  [7] \"altitude: < 8000\"                                                    #>  [8] \"hours: 14\"                                                           #>  [9] \"local_time: used solar_time\"                                         #> [10] \"structure: \"                                                         #> [11] \"Classes 'data.table' and 'data.frame':\\t3680 obs. of  20 variables:\" #> [12] \" $ timeUTC                  : chr  \\\"2019-12-31 14:00:00\\\" \\\"..\"     #> [13] \" $ site_code                : chr  \\\"CRV\\\" \\\"CRV\\\" ...\"              #> [14] \" $ altitude_final           : num  17.1 31.7 ...\"                    #> [15] \" $ type_altitude            : num  0 0 0 0 0 ...\"                    #> [16] \" $ lab_1_abbr               : chr  \\\"NOAA\\\" \\\"NOAA\\\" ...\"            #> [17] \" $ dataset_calibration_scale: chr  \\\"WMO CH4 X2004A\\\" \\\"WMO \\\"..\"    #> [18] \" $ value                    : num  1.97e-06 1.97e-06 ...\"            #> [19] \" $ latitude                 : num  65 65 ...\"                        #> [20] \" $ longitude                : num  -148 -148 ...\"                    #> [21] \" $ site_utc2lst             : num  -8 -8 -8 -8 -8 ...\"               #> [22] \" $ year                     : int  2019 2019 2019 2020 202..\"        #> [23] \" $ month                    : int  12 12 12 1 1 ...\"                 #> [24] \" $ day                      : chr  \\\"31\\\" \\\"31\\\" ...\"                #> [25] \" $ hour                     : int  14 14 14 14 14 ...\"               #> [26] \" $ minute                   : int  0 0 0 0 0 ...\"                    #> [27] \" $ second                   : int  0 0 0 0 0 ...\"                    #> [28] \" $ time                     : num  1.58e+09 1.58e+09 ...\"            #> [29] \" $ time_decimal             : num  2020 2020 ...\"                    #> [30] \" $ max_altitude             : num  31.7 31.7 ...\"                    #> [31] \" $ local_time               : chr  NA NA ...\"                        #> [32] \" - attr(*, \\\".internal.selfref\\\")=<externalptr> \"                    #> [33] \"NULL\"                                                                #> [34] \"---\" #>                   timeUTC site_code altitude_final type_altitude lab_1_abbr #>                    <POSc>    <char>          <num>         <int>     <char> #>    1: 2019-12-31 14:00:00       CRV           17.1             0       NOAA #>    2: 2019-12-31 14:00:00       CRV           31.7             0       NOAA #>    3: 2019-12-31 14:00:00       CRV            4.9             0       NOAA #>    4: 2020-01-01 14:00:00       CRV           17.1             0       NOAA #>    5: 2020-01-01 14:00:00       CRV           31.7             0       NOAA #>   ---                                                                       #> 3676: 2020-12-30 14:00:00       WGC          484.0             0       NOAA #> 3677: 2020-12-30 14:00:00       WGC           89.1             0       NOAA #> 3678: 2020-12-31 14:00:00       WGC           30.0             0       NOAA #> 3679: 2020-12-31 14:00:00       WGC          484.0             0       NOAA #> 3680: 2020-12-31 14:00:00       WGC           89.1             0       NOAA #>       dataset_calibration_scale        value latitude longitude site_utc2lst #>                          <char>        <num>    <num>     <num>        <int> #>    1:            WMO CH4 X2004A 1.970275e-06  64.9863 -147.5980           -8 #>    2:            WMO CH4 X2004A 1.967440e-06  64.9863 -147.5980           -8 #>    3:            WMO CH4 X2004A 1.971806e-06  64.9863 -147.5980           -8 #>    4:            WMO CH4 X2004A 1.988251e-06  64.9863 -147.5980           -8 #>    5:            WMO CH4 X2004A 1.987424e-06  64.9863 -147.5980           -8 #>   ---                                                                        #> 3676:            WMO CH4 X2004A 2.004825e-06  38.2645 -121.4904           -8 #> 3677:            WMO CH4 X2004A 2.238231e-06  38.2645 -121.4904           -8 #> 3678:            WMO CH4 X2004A 2.048590e-06  38.2645 -121.4904           -8 #> 3679:            WMO CH4 X2004A 2.007957e-06  38.2645 -121.4904           -8 #> 3680:            WMO CH4 X2004A 2.048209e-06  38.2645 -121.4904           -8 #>        year month   day  hour minute second       time time_decimal #>       <int> <int> <int> <int>  <int>  <int>      <int>        <num> #>    1:  2019    12    31    14      0      0 1577800800     2019.999 #>    2:  2019    12    31    14      0      0 1577800800     2019.999 #>    3:  2019    12    31    14      0      0 1577800800     2019.999 #>    4:  2020     1     1    14      0      0 1577887200     2020.002 #>    5:  2020     1     1    14      0      0 1577887200     2020.002 #>   ---                                                               #> 3676:  2020    12    30    14      0      0 1609336800     2020.996 #> 3677:  2020    12    30    14      0      0 1609336800     2020.996 #> 3678:  2020    12    31    14      0      0 1609423200     2020.999 #> 3679:  2020    12    31    14      0      0 1609423200     2020.999 #> 3680:  2020    12    31    14      0      0 1609423200     2020.999 #>       max_altitude local_time #>              <num>     <lgcl> #>    1:         31.7         NA #>    2:         31.7         NA #>    3:         31.7         NA #>    4:         31.7         NA #>    5:         31.7         NA #>   ---                         #> 3676:        484.0         NA #> 3677:        484.0         NA #> 3678:        484.0         NA #> 3679:        484.0         NA #> 3680:        484.0         NA"},{"path":"https://noaa-gml.github.io/rtorf/articles/tower-insitu.html","id":"receptors","dir":"Articles","previous_headings":"","what":"Receptors","title":"tower-insitu","text":"Now can last step generating receptor list files. Now filter selected columns can round altitude also Now can format time variables two digits column indicate AGL ASL Finally, save receptors","code":"receptor <- master[, c(\"site_code\",                      \"year\",                      \"month\",                      \"day\",                      \"hour\",                      \"minute\",                      \"second\",                      \"latitude\",                      \"longitude\",                      \"altitude_final\",                      \"type_altitude\",                      \"time_decimal\")] receptor$altitude_final <- round(receptor$altitude_final) receptor <- obs_format(receptor,                         spf =  c(\"month\", \"day\",                                  \"hour\", \"minute\", \"second\")) receptor_agl <- receptor[type_altitude == 0] receptor_asl <- receptor[type_altitude == 1] if(nrow(receptor_agl) > 0) {   message(paste0(out, \"_\", datasetid, \"_receptor_AGL.txt\"), \"\\n\")    fwrite(x = receptor_agl,          file = paste0(out, \"_\", datasetid, \"_receptor_AGL.txt\"),          sep = \" \") }  if(nrow(receptor_asl) > 0) {   message(paste0(out, \"_\", datasetid, \"_receptor_ASL.txt\"), \"\\n\")    fwrite(x = receptor_asl,          file = paste0(out, \"_\", datasetid, \"receptor_ASL.txt\"),          sep = \" \")  } #> C:\\Users\\sibarrae\\AppData\\Local\\Temp\\RtmpyqH3NI\\file5ef420fc3b21_tower-insitu_receptor_AGL.txt"},{"path":"https://noaa-gml.github.io/rtorf/articles/tower-insitu.html","id":"plot","dir":"Articles","previous_headings":"","what":"Plot","title":"tower-insitu","text":"Finally, just plot data, run locally","code":"obs_plot(df4, time = \"timeUTC\", yfactor = 1e9) #> Found the following sites:  #> [1] CRV LEF SCT WGC #> Plotting the following sites:  #> [1] CRV LEF #> png  #>   2 library(sf) dx <- df4[,      lapply(.SD, mean),     .SDcols = \"value\",     by = .(latitude, longitude)] x <- st_as_sf(dx, coords = c(\"longitude\", \"latitude\"), crs = 4326) plot(x[\"value\"], axes = T, reset = F) maps::map(add = T)"},{"path":"https://noaa-gml.github.io/rtorf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sergio Ibarra-Espinosa. Author, maintainer. Lei Hu. Contributor.","code":""},{"path":"https://noaa-gml.github.io/rtorf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schuldt, et al. Multi-laboratory compilation atmospheric methane data period 1983-2021.NOAA -  Global Monitoring Laboratory, 10.25925/20230301, https://gml.noaa.gov/ccgg/obspack/citation.php,  2014. Ibarra-Espinosa S (2024). rtorf: 'rtorf' Obspack GLOBALView+. R package version 0.9.4, https://noaa-gml.github.io/rtorf/, https://github.com/noaa-gml/rtorf.","code":"@Article{,   title = {Multi-laboratory compilation of atmospheric methane data for the period 1983-2021},   journal = {NOAA -  Global Monitoring Laboratory},   author = {Kenneth N. Schuldt and John Mund and Tuula Aalto and James B. Abshire and Ken Aikin and Grant Allen and Arlyn Andrews and Francesco Apadula and Sabrina Arnold and Bianca Baier and Peter Bakwin and Jakub Bartyzel and Gilles Bentz and Peter Bergamaschi and Andreas Beyersdorf and Tobias Biermann and Sebastien C. Biraud and Pierre-Eric Blanc and Harald Boenisch and David Bowling and Gordon Brailsford and Willi A. Brand and Dominik Brunner and Thao P. Bui and Lukas Bäni and Francescopiero Calzolari and Cecilia S. Chang and Huilin Chen and Gao Chen and Lukasz Chmura and Shane Clark and Sites Climadat and Aurelie Colomb and Roisin Commane and Lino Condori and Franz Conen and Sébastien Conil and Cédric Couret and Paolo Cristofanelli and Emilio Cuevas and Roger Curcoll and Bruce Daube and Kenneth J. Davis and Martine {De Mazière} and Stephan {De Wekker} and Jonathan M. Dean-Day and Julian Della Coletta and Marc Delmotte and Tatiana Di Iorio and Elizabeth DiGangi and Joshua P. DiGangi and Russell Dickerson and James W. Elkins and Michael Elsasser and Lukas Emmenegger and Shuangxi Fang and Marc L. Fischer and Grant Forster and James France and Arnoud Frumau and Marta Fuente-Lastra and Michal Galkowski and Luciana V. Gatti and Torsten Gehrlein and Christoph Gerbig and Francois Gheusi and Emanuel Gloor and Daisuke Goto and Tim Griffis and Samuel Hammer and Thomas F. Hanisco and Chad Hanson and László Haszpra and Juha Hatakka and Martin Heimann and Michal Heliasz and Daniela Heltai and Stephan Henne and Arjan Hensen and Christian Hermans and Ove Hermansen and Eric Hintsa and Antje Hoheisel and Jutta Holst and Laura T. Iraci and Viktor Ivakhov and Daniel A. Jaffe and Armin Jordan and Warren Joubert and Hui-Yun Kang and Anna Karion and Stephan R. Kawa and Victor Kazan and Ralph F. Keeling and Petri Keronen and Jooil Kim and Jörg Klausen and Tobias Kneuer and Mi-Young Ko and Pasi Kolari and Katerina Kominkova and Eric Kort and Elena Kozlova and Paul B. Krummel and Dagmar Kubistin and Susan S. Kulawik and Nicolas Kumps and Casper Labuschagne and David H. Lam and Xin Lan and Ray L. Langenfelds and Andrea Lanza and Olivier Laurent and Tuomas Laurila and Thomas Lauvaux and Jost Lavric and Beverly E. Law and Choong-Hoon Lee and Haeyoung Lee and John Lee and Irene Lehner and Kari Lehtinen and Reimo Leppert and Ari Leskinen and Markus Leuenberger and W.H. Leung and Ingeborg Levin and Janne Levula and John Lin and Matthias Lindauer and Anders Lindroth and Zoe M. Loh and Morgan Lopez and Chris R. Lunder and Mikaell O. Löfvenius and Toshinobu Machida and Ivan Mammarella and Giovanni Manca and Andrew Manning and Alistair Manning and Michal V. Marek and Per Marklund and Josette E. Marrero and Damien Martin and Melissa Y. Martin and Giordane A. Martins and Hidekazu Matsueda and Kathryn McKain and Harro Meijer and Frank Meinhardt and Lynne Merchant and Jean-Marc Metzger and N. Mihalopoulos and Natasha L. Miles and Charles E. Miller and John B. Miller and Logan Mitchell and Vanessa Monteiro and Stephen Montzka and Fred Moore and Heiko Moossen and Eric Morgan and Josep-Anton Morgui and Shinji Morimoto and J. W. Munger and David Munro and Mathew Mutuku and Cathrine L. Myhre and Meelis Mölder and Jennifer Müller-Williams and Shin-Ichiro Nakaoka and Jaroslaw Necki and Sally Newman and Sylvia Nichol and Euan Nisbet and Yosuke Niwa and David M. Njiru and Steffen M. Noe and Yukihiro Nojiri and Simon O'Doherty and Florian Obersteiner and Bill Paplawsky and Caroline L. Parworth and Jeff Peischl and Olli Peltola and Wouter Peters and Carole Philippon and Salvatore Piacentino and Jean M. Pichon and Penelope Pickers and Steve Piper and Joseph Pitt and Christian Plass-Dülmer and Stephen M. Platt and Steve Prinzivalli and Michel Ramonet and Ramon Ramos and Xinrong Ren and Enrique Reyes-Sanchez and Scott J. Richardson and Louis-Jeremy Rigouleau and Haris Riris and Pedro P. Rivas and Michael Rothe and Yves-Alain Roulet and Thomas Ryerson and Ju-Mee Ryoo and Maryann Sargent and Motoki Sasakawa and Bert Scheeren and Martina Schmidt and Tanja Schuck and Marcus Schumacher and Jennifer Seibel and Thomas Seifert and Mahesh K. Sha and Paul Shepson and Michael Shook and Christopher D. Sloop and Paul D. Smith and Gerard Spain and Jason M. St. Clair and David Steger and Martin Steinbacher and Britton Stephens and Colm Sweeney and Lise L. Sørensen and Risto Taipale and Shinya Takatsuji and Pieter Tans and Kirk Thoning and Helder Timas and Margaret Torn and Pamela Trisolino and Jocelyn Turnbull and Alex Vermeulen and Brian Viner and Gabriela Vitkova and Stephen Walker and Andrew Watson and Ray Weiss and Dietmar Weyrauch and Steven C. Wofsy and Justin Worsey and Doug Worthy and Irène Xueref-Remy and Emma L. Yates and Dickon Young and Camille Yver-Kwok and Sönke Zaehle and Andreas Zahn and Christoph Zellweger and Miroslaw Zimnoch and Rodrigo A. {de Souza} and Alcide G. di Sarra and Danielle {van Dinther} and Pim {van den Bulk}},   year = {2024},   url = {https://gml.noaa.gov/ccgg/obspack/citation.php},   doi = {10.25925/20230301}, } @Manual{,   title = {rtorf: 'rtorf' Obspack GLOBALView+},   author = {Sergio Ibarra-Espinosa},   year = {2024},   note = {R package version 0.9.4, https://noaa-gml.github.io/rtorf/},   url = {https://github.com/noaa-gml/rtorf}, }"},{"path":"https://noaa-gml.github.io/rtorf/index.html","id":"r-tools-for-obspack-receptors-and-footprints-rtorf","dir":"","previous_headings":"","what":"rtorf Obspack GLOBALView+","title":"rtorf Obspack GLOBALView+","text":"NOAA Obspack collection green house gases observations rtorf depends data.table ncdf4, basically parallel C, can installed machine.","code":""},{"path":"https://noaa-gml.github.io/rtorf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"rtorf Obspack GLOBALView+","text":"","code":"remotes::install_github(\"noaa-gml/rtorf\") library(rtorf) library(data.table)"},{"path":"https://noaa-gml.github.io/rtorf/index.html","id":"obspack-summary","dir":"","previous_headings":"","what":"ObsPack summary","title":"rtorf Obspack GLOBALView+","text":"first step consists constructing summary ObsPack. required read data, also, identify agl, present file names. function returns data.frame. Optionally, user can indicate path store data.frame. obs_summary also prints summary data. second argument categories, default includes categories shown , account files. summary data.frame contains columns id full path file, name name relative path file, n just id, sector tower, column agl indicates agl indicated name file available. read documentation function, user must run ?obs_summary. first define categories 429 files ObsPack directory. printed information also shows total bottom, sum individual file sector. ensure sum files equal total number files found, shown top. furthermore, printed information also shows 109 files agl explicitly mentioned name file.","code":"cate = c(\"aircraft-pfp\",          \"aircraft-insitu\",          \"aircraft-flask\",          \"surface-insitu\",          \"surface-flask\",           \"surface-pfp\",             \"tower-insitu\",            \"aircore\",                 \"shipboard-insitu\",          \"shipboard-flask\")   obs <- \"Z:/torf/obspack_ch4_1_GLOBALVIEWplus_v5.1_2023-03-08/data/nc/\" index <- obs_summary(obs = obs, categories = cate) ## Number of files of index: 429 ##               sector     N ##               <char> <int> ##  1:     aircraft-pfp    40 ##  2:  aircraft-insitu    15 ##  3:    surface-flask   106 ##  4:   surface-insitu   174 ##  5:   aircraft-flask     4 ##  6:          aircore     1 ##  7:      surface-pfp    33 ##  8:     tower-insitu    51 ##  9:  shipboard-flask     4 ## 10: shipboard-insitu     1 ## 11:    Total sectors   429 ## Detected 190 files with agl ## Detected 239 files without agl"},{"path":"https://noaa-gml.github.io/rtorf/index.html","id":"read-data","dir":"","previous_headings":"ObsPack summary","what":"Read data","title":"rtorf Obspack GLOBALView+","text":"summary built, function obs_read read files available index file previously generated. selected category “tower-insitu”. argument verbose prints files read time, default. end, function prints total number observations type altitude (agl asl). intake_height altitude_final identification altitude type critical. approach used consists : Use intake_height Identify agl name tile. agl present, agl = altitude - site_elevation. NA elevation, result NA agl new column added named altitude_final store agl asl Another column named type_altitude added identify agl 0, asl 1. maintain coherent approach among text NetCDF files, add column altitude_final type_altitude. done obs_read_nc obs_read. Sometimes need information site. instance, observations start end. , added function obs_table, calculates statistics summary “time” numeric variables file name, sector, site, altitude mode. Now can visualize average observations site. (run locally) Let us randomly select couples sites database. added function plot data read ObsPack. y-axis field value x-axis default time. data illustrated sorted color field site_code, default number 3 sites. argument pal define color palette, used internally imported function cptcity::cpt. (run locally) can see 2.61 million observations tower-insitu. observations made 2004 2021.","code":"df <- obs_read_nc(   index = index,   categories = \"tower-insitu\") dft <- obs_table(df = df) library(sf) sdft <- st_as_sf(dft[stat == \"mean\"],                   coords = c(\"longitude\", \"latitude\"),                   crs = 4326) sdft$value <- sdft$value*1e09 plot(sdft[\"value\"],       reset = FALSE,       axes = TRUE,       graticule = TRUE,      pch = 16,       cex = 1.5,       pal = cptcity::lucky(colorRampPalette = T), #random      main = NULL) maps::map(add = T) usites <- unique(df$site_name)[sample(seq_along(unique(df$site_name)), 2)] usites ## [1] \"Carbon in Arctic Reservoirs Vulnerability Experiment (CARVE)\" ## [2] \"Noyabrsk\" knitr::kable(dft[site_name %in% usites]) obs_plot(dt = df[site_name %in% usites], time = \"time\", yfactor = 1e+09, cex = 0.5,     verbose = FALSE)"},{"path":"https://noaa-gml.github.io/rtorf/index.html","id":"filtering","dir":"","previous_headings":"ObsPack summary","what":"Filtering","title":"rtorf Obspack GLOBALView+","text":"ObsPack includes global observations sometimes need extract data specific region periods time. part include spatial temporal parameters filter data. year interest 2020, also included December 2019 January 2021. stage, can apply spatial filter using coordinates. filtering space time, 1.12883^{5} million observations. Towers can observations different heights. need select one site observations registered highest height. column height named altitude_final max altitude named max_altitude.","code":"north <- 80 south <- 10 west <- -170 east <- -50 max_altitude <- 8000 evening <- 14  yy <- 2020 df <- rbind(df[year == yy - 1 & month == 12],             df[year == yy],             df[year == yy + 1 & month == 1])  df <- df[altitude_final < max_altitude &            latitude < north &            latitude > south &            longitude < east &            longitude > west]  unique(df[, c(\"altitude_final\",                \"site_elevation\",               \"elevation\",               \"dataset_selection_tag\",               \"site_name\")]) ##     altitude_final site_elevation elevation dataset_selection_tag ##              <num>          <num>     <num>                <char> ##  1:           17.1         611.43    611.43       allvalid-17magl ##  2:           31.7         611.43    611.43       allvalid-32magl ##  3:            4.9         611.43    611.43        allvalid-5magl ##  4:          122.0         472.00    472.00      allvalid-122magl ##  5:           30.0         472.00    472.00       allvalid-30magl ##  6:          396.0         472.00    472.00      allvalid-396magl ##  7:          304.8         115.20    115.20      allvalid-305magl ##  8:           31.0         115.20    115.20       allvalid-31magl ##  9:           61.0         115.20    115.20       allvalid-61magl ## 10:           30.0           2.00      2.00       allvalid-30magl ## 11:          484.0           2.00      2.00      allvalid-483magl ## 12:           89.1           2.00      2.00       allvalid-91magl ##                                                        site_name ##                                                           <char> ##  1: Carbon in Arctic Reservoirs Vulnerability Experiment (CARVE) ##  2: Carbon in Arctic Reservoirs Vulnerability Experiment (CARVE) ##  3: Carbon in Arctic Reservoirs Vulnerability Experiment (CARVE) ##  4:                                        Park Falls, Wisconsin ##  5:                                        Park Falls, Wisconsin ##  6:                                        Park Falls, Wisconsin ##  7:                                 Beech Island, South Carolina ##  8:                                 Beech Island, South Carolina ##  9:                                 Beech Island, South Carolina ## 10:                                     Walnut Grove, California ## 11:                                     Walnut Grove, California ## 12:                                     Walnut Grove, California dfa <- df[,           max(altitude_final),           by = site_code] |> unique()  names(dfa)[2] <- \"max_altitude\" dfa ##    site_code max_altitude ##       <char>        <num> ## 1:       CRV         31.7 ## 2:       LEF        396.0 ## 3:       SCT        304.8 ## 4:       WGC        484.0"},{"path":"https://noaa-gml.github.io/rtorf/index.html","id":"key-time","dir":"","previous_headings":"ObsPack summary","what":"Key Time","title":"rtorf Obspack GLOBALView+","text":"need start time columns. function obs_addtime adds time columns timeUTC, timeUTC_start shows start time observation timeUTC_end shows end time observation. need key_time aggregate data. can done using UTC, solar, local time. normal approach using afternoon solar local time.","code":"df2 <- obs_addtime(df) ## Adding timeUTC ## Adding timeUTC_start ## Adding timeUTC_end ## Found time_interval"},{"path":"https://noaa-gml.github.io/rtorf/index.html","id":"hierarchy-of-solar-or-local-time","dir":"","previous_headings":"ObsPack summary > Key Time","what":"Hierarchy of solar or local time","title":"rtorf Obspack GLOBALView+","text":"Solar time Local time columns site_utc2lst Local time longitude solar time (default) select hours interest aggregate data year, month day solar time. way, one information per day. however approach appropriate aircraft aggregated every 10 20 seconds. Hence need aggregate data one time column. Also, helps generate receptor info files including hour, minute second. Hence, need add solar local time column. local time column site_utc2lst need identify local time function add_ltime. important identifying observations evening local time. add_ltime uses two methods, first identify time difference utc identifying metadata column “site_utc2lst”. solar time available #now need cut solar time frequency needed. work local time longitude information available, aircrafts instance, local time calculated approximation based longitude: lt=UTC+longitude/15*60*60 lt = UTC + longitude/15 * 60 * 60  ltlt local time, UTCUTC time, longitudelongitude coordinate. , time cut every two hours. Now, identify local time select evening hours.","code":"df2$solar_time <- obs_addstime(df2)"},{"path":"https://noaa-gml.github.io/rtorf/index.html","id":"cut-time","dir":"","previous_headings":"ObsPack summary > Key Time","what":"Cut time","title":"rtorf Obspack GLOBALView+","text":"Now key column time, can cut accordingly. can check solar time cut solar time. Please note solar_time_cut, column used aggregate data filter required solar time, case 14. Now 4316 observations filtering 112883. point can calculate averages several columns cut time. function obs_agg aggregation shown following lines code. argument gby establish function used aggregate cols. need aggregate data date (year, month, date), already filtered hours interest. , 1 observation per day. standard, let us define key_time solar_time. obs_agg function aggregate desired data column. Now 4316 observations, 108567 less observations. add column max_altitude identify max altitude site.","code":"df2$solar_time_cut <- cut(x = df2$solar_time,                           breaks = \"1 hour\") |>   as.character() df3 <- df2[hour_st %in% evening] df3[, c(\"solar_time\", \"solar_time_cut\")] ##                solar_time      solar_time_cut ##                    <POSc>              <char> ##    1: 2019-12-02 14:49:12 2019-12-02 14:00:00 ##    2: 2019-12-03 14:48:48 2019-12-03 14:00:00 ##    3: 2019-12-04 14:48:24 2019-12-04 14:00:00 ##    4: 2019-12-05 14:48:00 2019-12-05 14:00:00 ##    5: 2019-12-06 14:47:35 2019-12-06 14:00:00 ##   ---                                         ## 4312: 2021-01-27 14:11:38 2021-01-27 14:00:00 ## 4313: 2021-01-28 14:11:26 2021-01-28 14:00:00 ## 4314: 2021-01-29 14:11:14 2021-01-29 14:00:00 ## 4315: 2021-01-30 14:11:03 2021-01-30 14:00:00 ## 4316: 2021-01-31 14:10:52 2021-01-31 14:00:00 df3$key_time <- df3$solar_time_cut df4 <- obs_agg(dt = df3,                cols = c(\"value\",                         \"latitude\",                         \"longitude\"),                verbose = T,                byalt = TRUE) ## Selecting by alt ## Adding time df4[,     max_altitude := max(altitude_final),     by = site_code] df4[,     c(\"site_code\",       \"altitude_final\",       \"max_altitude\")] |> unique() ##     site_code altitude_final max_altitude ##        <char>          <num>        <num> ##  1:       CRV           17.1         31.7 ##  2:       CRV           31.7         31.7 ##  3:       CRV            4.9         31.7 ##  4:       LEF          122.0        396.0 ##  5:       LEF          396.0        396.0 ##  6:       LEF           30.0        396.0 ##  7:       SCT          304.8        304.8 ##  8:       SCT           31.0        304.8 ##  9:       SCT           61.0        304.8 ## 10:       WGC           30.0        484.0 ## 11:       WGC          484.0        484.0 ## 12:       WGC           89.1        484.0"},{"path":"https://noaa-gml.github.io/rtorf/index.html","id":"saving-master-as-text-and-csvy","dir":"","previous_headings":"ObsPack summary","what":"Saving master as text and csvy","title":"rtorf Obspack GLOBALView+","text":"Now required information, can save files. , name data.frame master, contains information. important fields can used future, traceability. convenience, time variables transformed character writing disk. separation space ” “. format Comma Separated Value YAML (CSVY)[^3] consists typical CSV YAML header. functionobs_write_csvy includes argument notes allows adding custom notes header file. notes, obs_write_csvy adds output R function str, provides vertical summary data, known structure. check YAML header read first 38 lines files generated. can see column names, type data first observations. YAML header delimited characters “—”.","code":"master <- df4 master$timeUTC <- as.character(master$timeUTC) fwrite(master,         file =  paste0(tempdir(), \"/tower_insitu_2020.txt\"),        sep = \" \") csvy <- paste0(tempdir(), \"/tower_insitu_2020.csvy\") obs_write_csvy(dt = master,                notes = \"tower 2020\",                out = csvy ) readLines(csvy)[1:34] # and more"},{"path":"https://noaa-gml.github.io/rtorf/index.html","id":"saving-receptors","dir":"","previous_headings":"ObsPack summary","what":"Saving receptors","title":"rtorf Obspack GLOBALView+","text":"need filter columns master files new object called receptors. needed internally run HYSPLIT [@hy] using information receptors. case tower, need select observations highest altitude. specific columns selected shown following code. selecting ending times, later HYSPLIT run backwards based time measurement, ending starting times. columns time formatted two characters. instance, month 1, formatted “01”. also need filter type_altitude equal 0, representing aglobservations , equal 1, asl.","code":"receptor <- master[altitude_final == max_altitude,                    c(\"site_code\",                      \"year\",                      \"month\",                      \"day\",                      \"hour\",                      \"minute\",                      \"second\",                      \"latitude\",                      \"longitude\",                      \"altitude_final\",                      \"type_altitude\",                      \"year_end\",                      \"month_end\",                      \"day_end\",                      \"hour_end\",                      \"minute_end\",                      \"second_end\",                      \"time_decimal\")]  receptor$altitude_final <- round(receptor$altitude_final)   receptor <- obs_format(receptor)  if(nrow(receptor_agl) > 0) {   fwrite(x = receptor_agl,          file = paste0(tempdir(), \"/receptor_tower_insitu_2020_AGL.txt\"),          sep = \" \")}  if(nrow(receptor_asl) > 0) {   fwrite(x = receptor_asl,          file = paste0(tempdir(), \"/receptor_tower_insitu_2020_ASL.txt\"),          sep = \" \")}"},{"path":"https://noaa-gml.github.io/rtorf/index.html","id":"application-for-other-sectors","dir":"","previous_headings":"","what":"Application for other sectors","title":"rtorf Obspack GLOBALView+","text":"package sharing scripts process sectors scripts available path https://github.com/ibarraespinosa/rtorf/tree/main/rscripts","code":""},{"path":"https://noaa-gml.github.io/rtorf/index.html","id":"implementation-in-python","dir":"","previous_headings":"","what":"Implementation in python:","title":"rtorf Obspack GLOBALView+","text":"’m currently implementing version python:","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/fex.html","id":null,"dir":"Reference","previous_headings":"","what":"File extension — fex","title":"File extension — fex","text":"file extension","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/fex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File extension — fex","text":"","code":"fex(x)"},{"path":"https://noaa-gml.github.io/rtorf/reference/fex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File extension — fex","text":"x character vector giving file paths.","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/fex.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"File extension — fex","text":"source tools::file_ext","code":""},{"path":[]},{"path":"https://noaa-gml.github.io/rtorf/reference/fex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File extension — fex","text":"","code":"if (FALSE) { # \\dontrun{ # do not run } # }"},{"path":"https://noaa-gml.github.io/rtorf/reference/invfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for objects with class `invfile` — print.invfile","title":"Methods for objects with class `invfile` — print.invfile","text":"Methods objects class `invfile`","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/invfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for objects with class `invfile` — print.invfile","text":"","code":"# S3 method for class 'invfile' print(x, ...)  # S3 method for class 'invfile' summary(object, ...)  # S3 method for class 'invfile' plot(x, time = \"timeUTC\", ...)"},{"path":"https://noaa-gml.github.io/rtorf/reference/invfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for objects with class `invfile` — print.invfile","text":"x Object class \"invfile\" ... plot arguments object invfile time x axis column (time)","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/invfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for objects with class `invfile` — print.invfile","text":"Objects class \"invfile\"","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/invfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for objects with class `invfile` — print.invfile","text":"","code":"if (FALSE) { # \\dontrun{ #do not run } # }"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_addltime.html","id":null,"dir":"Reference","previous_headings":"","what":"local hour (bsed on longitude and time) — obs_addltime","title":"local hour (bsed on longitude and time) — obs_addltime","text":"Calculate approximation local hour","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_addltime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"local hour (bsed on longitude and time) — obs_addltime","text":"","code":"obs_addltime(   dt,   timeUTC = \"timeUTC\",   utc2lt = \"site_utc2lst\",   longitude = \"longitude\",   tz = \"UTC\" )"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_addltime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"local hour (bsed on longitude and time) — obs_addltime","text":"dt data.table timeUTC Character indicating Time column POSIXct utc2lt Character indicating integer column convert local time available longitude Character indicating column lingitude tz Timezone, default \"UTC\"","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_addltime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"local hour (bsed on longitude and time) — obs_addltime","text":"data.table local time columns","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_addltime.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"local hour (bsed on longitude and time) — obs_addltime","text":"time depending n longitude John Miller (GML/NOAA)","code":""},{"path":[]},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_addltime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"local hour (bsed on longitude and time) — obs_addltime","text":"","code":"{ if (FALSE) { # \\dontrun{ # Do not run } # } }"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_addstime.html","id":null,"dir":"Reference","previous_headings":"","what":"Add solar time into obspack — obs_addstime","title":"Add solar time into obspack — obs_addstime","text":"function add timeUTC POSIX class, local time ending sampling time","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_addstime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add solar time into obspack — obs_addstime","text":"","code":"obs_addstime(dt, tz = \"UTC\")"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_addstime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add solar time into obspack — obs_addstime","text":"dt obspack data.table tz Timezone, default \"UTC\"","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_addstime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add solar time into obspack — obs_addstime","text":"return data.frame adding solar time","code":""},{"path":[]},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_addstime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add solar time into obspack — obs_addstime","text":"","code":"{ # Do not run obs <- system.file(\"data-raw\", package = \"rtorf\") index <-  obs_summary(obs) dt <- obs_read(index) dt <- obs_addtime(dt) } #> Number of files of index: 1 #>           sector     N #>           <char> <int> #> 1:         flask     1 #> 2: Total sectors     1 #> Detected 0 files with agl #> Detected 1 files without agl #> Searching flask... #> 1: ch4_aoa_aircraft-flask_19_allvalid.txt #> Adding timeUTC #> Adding timeUTC_start #> Adding timeUTC_end"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_addtime.html","id":null,"dir":"Reference","previous_headings":"","what":"Add times into obspack — obs_addtime","title":"Add times into obspack — obs_addtime","text":"function add timeUTC POSIX class, local time ending sampling time","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_addtime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add times into obspack — obs_addtime","text":"","code":"obs_addtime(dt, verbose = TRUE, tz = \"UTC\")"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_addtime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add times into obspack — obs_addtime","text":"dt obspack data.table verbose obspack data.table tz Timezone, default \"UTC\"","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_addtime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add times into obspack — obs_addtime","text":"data.frame index obspack.","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_addtime.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add times into obspack — obs_addtime","text":"timeUTC calculated based field column start_time, timeUTC_end calculated using approach: 1. column time_interval found, proceed calculation using midpoint_time 2. Else, use column time_interval","code":""},{"path":[]},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_addtime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add times into obspack — obs_addtime","text":"","code":"{ # Do not run obs <- system.file(\"data-raw\", package = \"rtorf\") index <-  obs_summary(obs) dt <- obs_read(index) dt <- obs_addtime(dt) } #> Number of files of index: 1 #>           sector     N #>           <char> <int> #> 1:         flask     1 #> 2: Total sectors     1 #> Detected 0 files with agl #> Detected 1 files without agl #> Searching flask... #> 1: ch4_aoa_aircraft-flask_19_allvalid.txt #> Adding timeUTC #> Adding timeUTC_start #> Adding timeUTC_end"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_agg.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregates ObsPack by time — obs_agg","title":"Aggregates ObsPack by time — obs_agg","text":"function add timeUTC POSIX class, local time ending sampling time","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_agg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregates ObsPack by time — obs_agg","text":"","code":"obs_agg(   dt,   cols = c(\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"time\", \"time_decimal\",     \"value\", \"latitude\", \"longitude\", \"altitude\", \"pressure\", \"u\", \"v\", \"temperature\",     \"type_altitude\"),   byalt = FALSE,   verbose = TRUE )"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_agg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregates ObsPack by time — obs_agg","text":"dt obspack data.table cols Character defines columns aggregated byalt Logical, aggregate altitude (used tower) verbose logical show information","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_agg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregates ObsPack by time — obs_agg","text":"data.frame index obspack.","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_agg.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Aggregates ObsPack by time — obs_agg","text":"default add column timeUTC based input column `key_time`","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_agg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregates ObsPack by time — obs_agg","text":"","code":"if (FALSE) { # \\dontrun{ # Do not run # dt <- obs_addtime(dt) } # }"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_find_receptors.html","id":null,"dir":"Reference","previous_headings":"","what":"Compares expected receptors — obs_find_receptors","title":"Compares expected receptors — obs_find_receptors","text":"function creates data.frame expected footprints .nc compare actual footprints. idea verify missing footprints.","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_find_receptors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compares expected receptors — obs_find_receptors","text":"","code":"obs_find_receptors(   path,   year,   month,   day,   hour,   minute,   lat,   lon,   alt,   out = paste0(tempfile(), \".csvy\"),   verbose = FALSE )"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_find_receptors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compares expected receptors — obs_find_receptors","text":"path String path hwere stored footprints year numeric number month numeric number day numeric number hour numeric number minute numeric number lat numeric number lon numeric number alt numeric number outfile path. verbose logical show information","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_find_receptors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compares expected receptors — obs_find_receptors","text":"data.frame expected footprints","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_find_receptors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compares expected receptors — obs_find_receptors","text":"","code":"if (FALSE) { # \\dontrun{ # do not run p <- \"/path/to/continuous/\" # here we have year/month/hysplit*.nc x <- dt dt <- obs_find_receptors(p, year, month....) } # }"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_footname.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected footprint name — obs_footname","title":"Expected footprint name — obs_footname","text":"return expected name NetCDF footprint","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_footname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected footprint name — obs_footname","text":"","code":"obs_footname(year, month, day, hour, minute, lat, lon, alt, out, ...)"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_footname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected footprint name — obs_footname","text":"year numeric number month numeric number day numeric number hour numeric number minute numeric number lat numeric number lon numeric number alt numeric number outfile path. ... data.table::fwrite arguments.","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_footname.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Expected footprint name — obs_footname","text":"source https://stackoverflow.com//47015304/2418532 # IMPORTANT!!! # function generate expected NetCDF file name. # assumes name generated following considerations: # time variables (year, month, day, etc) format two digits, eg \"0.1\" # latitude longitude round 4 decimals # format latitude 2 integers, point 4 decimals # format longitude 3 integers, point 4 decimals # words, similar `obs_format`, `obs_footname`, generates expected name.","code":""},{"path":[]},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_footname.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expected footprint name — obs_footname","text":"","code":"if (FALSE) { # \\dontrun{ # do not run } # }"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatting data — obs_format","title":"Formatting data — obs_format","text":"return data.frame formatted fields","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatting data — obs_format","text":"","code":"obs_format(   dt,   spf = c(\"month\", \"day\", \"hour\", \"minute\", \"second\", \"month_end\", \"day_end\", \"hour_end\",     \"minute_end\", \"second_end\"),   spffmt = \"%02d\",   rnd = c(\"latitude\", \"longitude\"),   rndn = 4,   spfrnd = TRUE,   out,   ... )"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatting data — obs_format","text":"dt `data.table` spf columns formatted `sprintf` spffmt format applied spf rnd columns round rndn Round number applied `rnd` spfrnd Logical, sprintf `rnd` columns round ? outfile path used data.table::fwrite. ... data.table::fwrite arguments.","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_format.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Formatting data — obs_format","text":"source https://stackoverflow.com//47015304/2418532","code":""},{"path":[]},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatting data — obs_format","text":"","code":"if (FALSE) { # \\dontrun{ # do not run } # }"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_freq.html","id":null,"dir":"Reference","previous_headings":"","what":"return numeric vector in intervals — obs_freq","title":"return numeric vector in intervals — obs_freq","text":"return numeric vector intervals","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"return numeric vector in intervals — obs_freq","text":"","code":"obs_freq(x, freq, ...)"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"return numeric vector in intervals — obs_freq","text":"x numeric, longer `freq` freq numeric vector ... findInterval arguments","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"return numeric vector in intervals — obs_freq","text":"numeric vector","code":""},{"path":[]},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_invfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate files to perform inverse modeling — obs_invfiles","title":"Generate files to perform inverse modeling — obs_invfiles","text":"function return list three elements.","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_invfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate files to perform inverse modeling — obs_invfiles","text":"","code":"obs_invfiles(   master,   nc = \"nc\",   path,   value = \"value\",   value_factor = 1e+09,   Type = \"continuous\",   SubType = \"tower-insitu\",   Surface_Elev = 99999,   Model_agl,   Data_agl,   Event = 99999,   Institution,   Scale,   outdir )"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_invfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate files to perform inverse modeling — obs_invfiles","text":"master data.table master file filtering obspack nc column name master indicate NetCDF footprints path first part full path .nc footprint files value column name pollutant value_factor numeric factor Type \"continuous\", \"flask\" \"hatsflask\" SubType \"aircraft-insitu\", \"tower-insitu\", \"surface-insitu\" Surface_Elev Site elevation, default 99999 Model_agl Model agl, missing column `altitude_final` Data_agl Model agl, missing column `altitude_final` Event Number event Institution Institution Scale Scale outdir String output dir","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_invfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate files to perform inverse modeling — obs_invfiles","text":"list data.frame","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_invfiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate files to perform inverse modeling — obs_invfiles","text":"1. Footprints_hera_hysplit  full path NetCDF footprints\\ 2. Obs_hysplit concentration associazted iwth receptor 3. Receptor_info_hysplit receptor info","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_invfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate files to perform inverse modeling — obs_invfiles","text":"","code":"if (FALSE) { # \\dontrun{ # do not run } # }"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_list.dt.html","id":null,"dir":"Reference","previous_headings":"","what":"list.dt — obs_list.dt","title":"list.dt — obs_list.dt","text":"treatments list data.frames","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_list.dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"list.dt — obs_list.dt","text":"","code":"obs_list.dt(ldf, na, verbose = TRUE)"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_list.dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"list.dt — obs_list.dt","text":"ldf list data.frames na common names final data.frame verbose Logical show information","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_list.dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"list.dt — obs_list.dt","text":"long data.table","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_list.dt.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"list.dt — obs_list.dt","text":"1. Filter empty data.frames 2. identify common names 3. rbindlist return data.table","code":""},{"path":[]},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_list.dt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"list.dt — obs_list.dt","text":"","code":"{ if (FALSE) { # \\dontrun{ # Do not run } # } }"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Read obspack metadata — obs_meta","title":"Read obspack metadata — obs_meta","text":"Read obspack metadata","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read obspack metadata — obs_meta","text":"","code":"obs_meta(   index,   verbose = TRUE,   n_site_code = 15,   n_site_name = 15,   n_site_latitude = 18,   n_site_longitude = 19,   n_site_country = 18,   n_dataset_project = 21,   n_lab = 16,   n_scales = 31,   n_site_elevation = 20,   n_altitude_comment = 22,   n_utc = 18,   fill_value = -1e+34,   as_list = FALSE )"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read obspack metadata — obs_meta","text":"index data.table verbose Logical show information n_site_code number characters extraced metadata search n_site_name number characters extraced metadata search n_site_latitude number characters extraced metadata search n_site_longitude number characters extraced metadata search n_site_country number characters extraced metadata search n_dataset_project number characters extraced metadata search n_lab number characters extraced metadata search n_scales number characters extraced metadata search n_site_elevation number characters extraced metadata search n_altitude_comment number characters extraced metadata search n_utc number characters extraced metadata search fill_value fill value. Appeared aoa_aircraft-flask_19_allvalid.txt as_list Logical return list","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read obspack metadata — obs_meta","text":"data.frame index obspack.","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read obspack metadata — obs_meta","text":"","code":"{ # Do not run obs <- system.file(\"data-raw\", package = \"rtorf\") index <- obs_summary(obs) dt <- obs_meta(index) } #> Number of files of index: 1 #>           sector     N #>           <char> <int> #> 1:         flask     1 #> 2: Total sectors     1 #> Detected 0 files with agl #> Detected 1 files without agl #> 1: ch4_aoa_aircraft-flask_19_allvalid.txt"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_out.html","id":null,"dir":"Reference","previous_headings":"","what":"outersect — obs_out","title":"outersect — obs_out","text":"Just opposite intersect","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"outersect — obs_out","text":"","code":"obs_out(x, y)"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"outersect — obs_out","text":"x vector y vector","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"outersect — obs_out","text":"vector opposite intersect","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_out.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"outersect — obs_out","text":"Helpers","code":""},{"path":[]},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"outersect — obs_out","text":"","code":"{ if (FALSE) { # \\dontrun{ # Do not run } # } }"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Read obspack metadata — obs_plot","title":"Read obspack metadata — obs_plot","text":"Read obspack metadata","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read obspack metadata — obs_plot","text":"","code":"obs_plot(   dt,   time,   y = \"value\",   yfactor = 1,   colu = \"site_code\",   type = \"p\",   n = if (length(unique(dt[[colu]])) == 1) unique(dt[[colu]]) else     unique(dt[[colu]])[1:2],   pal = cptcity::find_cpt(\"qual\")[6],   verbose = TRUE,   xlab = \"time\",   ylab = \"value\",   xlim = range(dt[[time]], na.rm = TRUE),   ylim = range(dt[[y]], na.rm = TRUE),   ... )"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read obspack metadata — obs_plot","text":"dt data.table time x axis column (time) y y axis column, default \"value\" yfactor factor y colu column plot color, default site_code type type plot, default \"p\" n Character indicating `colu` subset, instance, want plot \"site_code\", include site_code want plot pal Color palette name see cpt, default \"cb_qual_Accent_08\" verbose Logical show information xlab Character, xlab ylab Character, ylab xlim x limits ylim y limits ... plot arguments","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read obspack metadata — obs_plot","text":"Plot","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read obspack metadata — obs_plot","text":"","code":"if (FALSE) { # \\dontrun{ # Do not run obs <- system.file(\"data-raw\", package = \"rtorf\") index <- obs_summary(obs) dt <- obs_read(index) obs_plot(dt, time = \"time\") } # }"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_rbind.html","id":null,"dir":"Reference","previous_headings":"","what":"rbind obspack — obs_rbind","title":"rbind obspack — obs_rbind","text":"return rbind obs data.tables","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_rbind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rbind obspack — obs_rbind","text":"","code":"obs_rbind(dt1, dt2, verbose = TRUE)"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_rbind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rbind obspack — obs_rbind","text":"dt1 first data.table dt2 second data.table verbose logical show information","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_rbind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rbind obspack — obs_rbind","text":"numeric vector","code":""},{"path":[]},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_rbind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rbind obspack — obs_rbind","text":"","code":"if (FALSE) { # \\dontrun{ # do not run } # }"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read obspack (.txt) — obs_read","title":"Read obspack (.txt) — obs_read","text":"obspack file header metadata function reads selected fields metadata add columns. new columns used later filtered","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read obspack (.txt) — obs_read","text":"","code":"obs_read(   index,   categories = \"flask\",   expr = NULL,   verbose = TRUE,   n_site_code = 15,   n_site_latitude = 18,   n_site_longitude = 19,   n_site_name = 15,   n_site_country = 18,   n_dataset_project = 21,   n_lab = 16,   n_scales = 31,   n_site_elevation = 20,   n_altitude_comment = 22,   n_utc = 18,   fill_value = -1e+34,   as_list = FALSE )"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read obspack (.txt) — obs_read","text":"index data.table categories character; ONE category : c(\"aircraft-pfp\", \"aircraft-insitu\", \"surface-insitu\", \"tower-insitu\", \"aircore\", \"surface-pfp\", \"shipboard-insitu\", \"flask\"). expr String expressions filter data.table internally verbose Logical show information n_site_code number characters extratced metadata search n_site_latitude number characters extracted metadata search n_site_longitude number characters extracted metadata search n_site_name number characters extracted metadata search n_site_country number characters extracted metadata search n_dataset_project number characters extracted metadata search n_lab number characters extracted metadata search n_scales number characters extracted metadata search n_site_elevation number characters extracted metadata search n_altitude_comment number characters extracted metadata search n_utc number characters extracted metadata search fill_value fill value. Appeared aoa_aircraft-flask_19_allvalid.txt as_list Logical return list","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read obspack (.txt) — obs_read","text":"data.frame index obspack.","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_read.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read obspack (.txt) — obs_read","text":"identification altitude type critical. approach used consists : 1. Identify agl name tile. 2. magl present, search dill_values used elevation transform NA (available) 3. magl present, agl = altitude - elevation 4. NA elevation, result NA agl 5. new column added named `altitude_final` store agl asl 6. Another column named `type_altitude` added identify \"magl\" \"masl\" 7. case NA `altitude_final`, `type_altitude` \"available\" , relationship hysplit :","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read obspack (.txt) — obs_read","text":"","code":"{ # Do not run obs <- system.file(\"data-raw\", package = \"rtorf\") index <- obs_summary(obs) dt <- obs_read(index) obs_read(index, expr = \"altitude_final == '5800'\") } #> Number of files of index: 1 #>           sector     N #>           <char> <int> #> 1:         flask     1 #> 2: Total sectors     1 #> Detected 0 files with agl #> Detected 1 files without agl #> Searching flask... #> 1: ch4_aoa_aircraft-flask_19_allvalid.txt #> Searching flask... #> 1: ch4_aoa_aircraft-flask_19_allvalid.txt #>       year month   day  hour minute second       time start_time midpoint_time #>      <int> <int> <int> <int>  <int>  <int>      <int>      <int>         <int> #>   1:  2011     2    16     2     17     30 1297822650 1297822440    1297822650 #>   2:  2011     2    16     2     26     30 1297823190 1297822980    1297823190 #>   3:  2011     2    16     2     33     30 1297823610 1297823400    1297823610 #>   4:  2011     2    16     2     40     30 1297824030 1297823820    1297824030 #>   5:  2011     2    16     2     47     30 1297824450 1297824240    1297824450 #>  ---                                                                           #> 226:  2019     3    14     2     15     30 1552529730 1552529520    1552529730 #> 227:  2019     3    14     2     22     30 1552530150 1552529940    1552530150 #> 228:  2019     5    15     5     10     30 1557897030 1557896820    1557897030 #> 229:  2019     9     4     7     54     30 1567583670 1567583460    1567583670 #> 230:  2020     3    10     6     42     30 1583822550 1583822340    1583822550 #>      time_decimal      value nvalue latitude longitude altitude elevation #>             <num>      <num>  <int>    <num>     <num>    <num>     <num> #>   1:     2011.126 1.8464e-06      1   34.429   141.037     5800  -999.999 #>   2:     2011.126 1.8428e-06      1   34.058   141.830     5800  -999.999 #>   3:     2011.126 1.8502e-06      1   33.770   142.447     5800  -999.999 #>   4:     2011.126 1.8477e-06      1   33.480   143.052     5800  -999.999 #>   5:     2011.126 1.8393e-06      1   33.162   143.708     5800  -999.999 #>  ---                                                                      #> 226:     2019.198 1.9945e-06      1   33.249   143.529     5800  -999.999 #> 227:     2019.198 1.9745e-06      1   32.885   144.267     5800  -999.999 #> 228:     2019.368 1.8902e-06      1   24.819   152.060     5800  -999.999 #> 229:     2019.675 1.8798e-06      1   24.327   152.091     5800  -999.999 #> 230:     2020.189 1.9433e-06      1   24.885   151.834     5800  -999.999 #>      intake_height qcflag method unique_sample_location_num obs_flag obs_num #>              <num>  <int>  <int>                      <int>    <int>   <int> #>   1:      -999.999      1     18                    8768042        1       1 #>   2:      -999.999      1     18                    8767980        1       2 #>   3:      -999.999      1     18                    8767880        1       3 #>   4:      -999.999      1     18                    8767781        1       4 #>   5:      -999.999      1     18                    8767708        1       5 #>  ---                                                                         #> 226:      -999.999      1     18                    8767761        1    2278 #> 227:      -999.999      1     18                    8767655        1    2279 #> 228:      -999.999      1     18                    8766225        1    2339 #> 229:      -999.999      1     18                    8765601        1    2441 #> 230:      -999.999      1     18                   44498114        1    2573 #>      obspack_num #>            <int> #>   1:     5536255 #>   2:     5536256 #>   3:     5536257 #>   4:     5536258 #>   5:     5536259 #>  ---             #> 226:     5538532 #> 227:     5538533 #> 228:     5538593 #> 229:     5538695 #> 230:     5538827 #>                                                                                   obspack_id #>                                                                                       <char> #>   1: obspack_ch4_1_GLOBALVIEWplus_v4.0_2021-10-14~ch4_aoa_aircraft-flask_19_allvalid~5536255 #>   2: obspack_ch4_1_GLOBALVIEWplus_v4.0_2021-10-14~ch4_aoa_aircraft-flask_19_allvalid~5536256 #>   3: obspack_ch4_1_GLOBALVIEWplus_v4.0_2021-10-14~ch4_aoa_aircraft-flask_19_allvalid~5536257 #>   4: obspack_ch4_1_GLOBALVIEWplus_v4.0_2021-10-14~ch4_aoa_aircraft-flask_19_allvalid~5536258 #>   5: obspack_ch4_1_GLOBALVIEWplus_v4.0_2021-10-14~ch4_aoa_aircraft-flask_19_allvalid~5536259 #>  ---                                                                                         #> 226: obspack_ch4_1_GLOBALVIEWplus_v4.0_2021-10-14~ch4_aoa_aircraft-flask_19_allvalid~5538532 #> 227: obspack_ch4_1_GLOBALVIEWplus_v4.0_2021-10-14~ch4_aoa_aircraft-flask_19_allvalid~5538533 #> 228: obspack_ch4_1_GLOBALVIEWplus_v4.0_2021-10-14~ch4_aoa_aircraft-flask_19_allvalid~5538593 #> 229: obspack_ch4_1_GLOBALVIEWplus_v4.0_2021-10-14~ch4_aoa_aircraft-flask_19_allvalid~5538695 #> 230: obspack_ch4_1_GLOBALVIEWplus_v4.0_2021-10-14~ch4_aoa_aircraft-flask_19_allvalid~5538827 #>                                        name sector site_code #>                                      <char> <char>    <char> #>   1: ch4_aoa_aircraft-flask_19_allvalid.txt  flask       AOA #>   2: ch4_aoa_aircraft-flask_19_allvalid.txt  flask       AOA #>   3: ch4_aoa_aircraft-flask_19_allvalid.txt  flask       AOA #>   4: ch4_aoa_aircraft-flask_19_allvalid.txt  flask       AOA #>   5: ch4_aoa_aircraft-flask_19_allvalid.txt  flask       AOA #>  ---                                                         #> 226: ch4_aoa_aircraft-flask_19_allvalid.txt  flask       AOA #> 227: ch4_aoa_aircraft-flask_19_allvalid.txt  flask       AOA #> 228: ch4_aoa_aircraft-flask_19_allvalid.txt  flask       AOA #> 229: ch4_aoa_aircraft-flask_19_allvalid.txt  flask       AOA #> 230: ch4_aoa_aircraft-flask_19_allvalid.txt  flask       AOA #>                                                   site_name site_country #>                                                      <char>       <char> #>   1: Aircraft Observation of Atmospheric trace gases by JMA        Japan #>   2: Aircraft Observation of Atmospheric trace gases by JMA        Japan #>   3: Aircraft Observation of Atmospheric trace gases by JMA        Japan #>   4: Aircraft Observation of Atmospheric trace gases by JMA        Japan #>   5: Aircraft Observation of Atmospheric trace gases by JMA        Japan #>  ---                                                                     #> 226: Aircraft Observation of Atmospheric trace gases by JMA        Japan #> 227: Aircraft Observation of Atmospheric trace gases by JMA        Japan #> 228: Aircraft Observation of Atmospheric trace gases by JMA        Japan #> 229: Aircraft Observation of Atmospheric trace gases by JMA        Japan #> 230: Aircraft Observation of Atmospheric trace gases by JMA        Japan #>      site_elevation site_latitude site_longitude dataset_project lab_1_abbr #>              <lgcl>        <char>         <char>          <char>     <char> #>   1:             NA        -1e+34         -1e+34  aircraft-flask        JMA #>   2:             NA        -1e+34         -1e+34  aircraft-flask        JMA #>   3:             NA        -1e+34         -1e+34  aircraft-flask        JMA #>   4:             NA        -1e+34         -1e+34  aircraft-flask        JMA #>   5:             NA        -1e+34         -1e+34  aircraft-flask        JMA #>  ---                                                                        #> 226:             NA        -1e+34         -1e+34  aircraft-flask        JMA #> 227:             NA        -1e+34         -1e+34  aircraft-flask        JMA #> 228:             NA        -1e+34         -1e+34  aircraft-flask        JMA #> 229:             NA        -1e+34         -1e+34  aircraft-flask        JMA #> 230:             NA        -1e+34         -1e+34  aircraft-flask        JMA #>      dataset_calibration_scale #>                         <char> #>   1:            WMO CH4 X2004A #>   2:            WMO CH4 X2004A #>   3:            WMO CH4 X2004A #>   4:            WMO CH4 X2004A #>   5:            WMO CH4 X2004A #>  ---                           #> 226:            WMO CH4 X2004A #> 227:            WMO CH4 X2004A #> 228:            WMO CH4 X2004A #> 229:            WMO CH4 X2004A #> 230:            WMO CH4 X2004A #>                                                              altitude_comment #>                                                                        <char> #>   1: Altitude (in meters above sea level). See provider_comment if available. #>   2: Altitude (in meters above sea level). See provider_comment if available. #>   3: Altitude (in meters above sea level). See provider_comment if available. #>   4: Altitude (in meters above sea level). See provider_comment if available. #>   5: Altitude (in meters above sea level). See provider_comment if available. #>  ---                                                                          #> 226: Altitude (in meters above sea level). See provider_comment if available. #> 227: Altitude (in meters above sea level). See provider_comment if available. #> 228: Altitude (in meters above sea level). See provider_comment if available. #> 229: Altitude (in meters above sea level). See provider_comment if available. #> 230: Altitude (in meters above sea level). See provider_comment if available. #>      site_utc2lst   agl type_altitude altitude_final    id #>             <num> <num>         <num>          <num> <int> #>   1:            9    NA             1           5800     1 #>   2:            9    NA             1           5800     1 #>   3:            9    NA             1           5800     1 #>   4:            9    NA             1           5800     1 #>   5:            9    NA             1           5800     1 #>  ---                                                       #> 226:            9    NA             1           5800     1 #> 227:            9    NA             1           5800     1 #> 228:            9    NA             1           5800     1 #> 229:            9    NA             1           5800     1 #> 230:            9    NA             1           5800     1"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_read_csvy.html","id":null,"dir":"Reference","previous_headings":"","what":"reads CSVY — obs_read_csvy","title":"reads CSVY — obs_read_csvy","text":"Reads CSVY, print YAML fread file.","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_read_csvy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reads CSVY — obs_read_csvy","text":"","code":"obs_read_csvy(f, n = 100, ...)"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_read_csvy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reads CSVY — obs_read_csvy","text":"f path csvy file n number files search \"—\" yaml ... extra data.table arguments","code":""},{"path":[]},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_read_csvy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"reads CSVY — obs_read_csvy","text":"","code":"{ df <- data.frame(a = rnorm(n = 10),                  time = Sys.time() + 1:10)  f <- paste0(tempfile(), \".csvy\") notes <- c(\"notes\",            \"more notes\") obs_write_csvy(dt = df, notes = notes, out = f) s <- obs_read_csvy(f) s # or readLines(f) data.table::fread(f) } #>  [1] \"---\"                                                   #>  [2] \"name: Metadata \"                                       #>  [3] \"notes\"                                                 #>  [4] \"more notes\"                                            #>  [5] \"structure: \"                                           #>  [6] \"'data.frame':\\t10 obs. of  2 variables:\"               #>  [7] \" $ a   : num  -1.4 0.255 ...\"                          #>  [8] \" $ time: POSIXct, format: \\\"2024-08-26 16:41:14\\\" ...\" #>  [9] \"NULL\"                                                  #> [10] \"---\"                                                   #>                a                time #>            <num>              <POSc> #>  1: -1.400043517 2024-08-26 16:41:14 #>  2:  0.255317055 2024-08-26 16:41:15 #>  3: -2.437263611 2024-08-26 16:41:16 #>  4: -0.005571287 2024-08-26 16:41:17 #>  5:  0.621552721 2024-08-26 16:41:18 #>  6:  1.148411606 2024-08-26 16:41:19 #>  7: -1.821817661 2024-08-26 16:41:20 #>  8: -0.247325302 2024-08-26 16:41:21 #>  9: -0.244199607 2024-08-26 16:41:22 #> 10: -0.282705449 2024-08-26 16:41:23"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_read_nc.html","id":null,"dir":"Reference","previous_headings":"","what":"Read obspack (.nc) — obs_read_nc","title":"Read obspack (.nc) — obs_read_nc","text":"obspack file header metadata function reads selected fields metadata add columns. new columns used later filtered","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_read_nc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read obspack (.nc) — obs_read_nc","text":"","code":"obs_read_nc(   index,   categories = \"flask\",   att = FALSE,   expr = NULL,   solar_time = TRUE,   as_list = FALSE,   verbose = FALSE,   warnings = FALSE )"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_read_nc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read obspack (.nc) — obs_read_nc","text":"index data.table categories character; ONE category : c(\"aircraft-pfp\", \"aircraft-insitu\", \"surface-insitu\", \"tower-insitu\", \"aircore\", \"surface-pfp\", \"shipboard-insitu\", \"flask\"). att Logical, global attributes added data.table expr String expressions filter data.table internally solar_time Logical, add solar time? as_list Logical return list verbose Logical show information warnings Logical show warnings reading NetCDF, especially global attributes","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_read_nc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read obspack (.nc) — obs_read_nc","text":"data.frame index obspack.","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_read_nc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read obspack (.nc) — obs_read_nc","text":"","code":"{ # Do not run obs <- system.file(\"data-raw\", package = \"rtorf\") index <- obs_summary(obs) dt <- obs_read(index) } #> Number of files of index: 1 #>           sector     N #>           <char> <int> #> 1:         flask     1 #> 2: Total sectors     1 #> Detected 0 files with agl #> Detected 1 files without agl #> Searching flask... #> 1: ch4_aoa_aircraft-flask_19_allvalid.txt"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_roundtime.html","id":null,"dir":"Reference","previous_headings":"","what":"round seconds from ","title":"round seconds from ","text":"return rounded seconds time","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_roundtime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"round seconds from ","text":"","code":"obs_roundtime(x, n = 10)"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_roundtime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"round seconds from ","text":"x time \"POSIXct\" \"POSIXt\" n factor","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_roundtime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"round seconds from ","text":"numeric vector","code":""},{"path":[]},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_roundtime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"round seconds from ","text":"","code":"{ x <- Sys.time() + seq(1, 55, 1) paste0(x,\"  \",        obs_roundtime(x), \"  \",        obs_freq(data.table::second(x),                 seq(0, 55, 10))) } #>  [1] \"2024-08-26 16:41:15.186479  10  10\" \"2024-08-26 16:41:16.186479  10  10\" #>  [3] \"2024-08-26 16:41:17.186479  10  10\" \"2024-08-26 16:41:18.186479  20  10\" #>  [5] \"2024-08-26 16:41:19.186479  20  10\" \"2024-08-26 16:41:20.186479  20  10\" #>  [7] \"2024-08-26 16:41:21.186479  20  20\" \"2024-08-26 16:41:22.186479  20  20\" #>  [9] \"2024-08-26 16:41:23.186479  20  20\" \"2024-08-26 16:41:24.186479  20  20\" #> [11] \"2024-08-26 16:41:25.186479  20  20\" \"2024-08-26 16:41:26.186479  20  20\" #> [13] \"2024-08-26 16:41:27.186479  20  20\" \"2024-08-26 16:41:28.186479  30  20\" #> [15] \"2024-08-26 16:41:29.186479  30  20\" \"2024-08-26 16:41:30.186479  30  20\" #> [17] \"2024-08-26 16:41:31.186479  30  30\" \"2024-08-26 16:41:32.186479  30  30\" #> [19] \"2024-08-26 16:41:33.186479  30  30\" \"2024-08-26 16:41:34.186479  30  30\" #> [21] \"2024-08-26 16:41:35.186479  30  30\" \"2024-08-26 16:41:36.186479  30  30\" #> [23] \"2024-08-26 16:41:37.186479  30  30\" \"2024-08-26 16:41:38.186479  40  30\" #> [25] \"2024-08-26 16:41:39.186479  40  30\" \"2024-08-26 16:41:40.186479  40  30\" #> [27] \"2024-08-26 16:41:41.186479  40  40\" \"2024-08-26 16:41:42.186479  40  40\" #> [29] \"2024-08-26 16:41:43.186479  40  40\" \"2024-08-26 16:41:44.186479  40  40\" #> [31] \"2024-08-26 16:41:45.186479  40  40\" \"2024-08-26 16:41:46.186479  40  40\" #> [33] \"2024-08-26 16:41:47.186479  40  40\" \"2024-08-26 16:41:48.186479  50  40\" #> [35] \"2024-08-26 16:41:49.186479  50  40\" \"2024-08-26 16:41:50.186479  50  40\" #> [37] \"2024-08-26 16:41:51.186479  50  50\" \"2024-08-26 16:41:52.186479  50  50\" #> [39] \"2024-08-26 16:41:53.186479  50  50\" \"2024-08-26 16:41:54.186479  50  50\" #> [41] \"2024-08-26 16:41:55.186479  50  50\" \"2024-08-26 16:41:56.186479  50  50\" #> [43] \"2024-08-26 16:41:57.186479  50  50\" \"2024-08-26 16:41:58.186479  0  50\"  #> [45] \"2024-08-26 16:41:59.186479  0  50\"  \"2024-08-26 16:42:00.186479  0  0\"   #> [47] \"2024-08-26 16:42:01.186479  0  0\"   \"2024-08-26 16:42:02.186479  0  0\"   #> [49] \"2024-08-26 16:42:03.186479  0  0\"   \"2024-08-26 16:42:04.186479  0  0\"   #> [51] \"2024-08-26 16:42:05.186479  0  0\"   \"2024-08-26 16:42:06.186479  0  0\"   #> [53] \"2024-08-26 16:42:07.186479  0  0\"   \"2024-08-26 16:42:08.186479  10  0\"  #> [55] \"2024-08-26 16:42:09.186479  10  0\""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of the ObsPack files (.txt) — obs_summary","title":"Summary of the ObsPack files (.txt) — obs_summary","text":"function returns data.frame index files available ObsPack. function returns data.frame index files available obspack.","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of the ObsPack files (.txt) — obs_summary","text":"","code":"obs_summary(   obs,   categories = c(\"aircraft-pfp\", \"aircraft-insitu\", \"surface-insitu\", \"tower-insitu\",     \"aircore\", \"surface-pfp\", \"shipboard-insitu\", \"flask\"),   lnchar = 11,   out = paste0(tempfile(), \"_index.csv\"),   verbose = TRUE,   aslist = FALSE )  obs_index(   obs,   categories = c(\"aircraft-pfp\", \"aircraft-insitu\", \"surface-insitu\", \"tower-insitu\",     \"aircore\", \"surface-pfp\", \"shipboard-insitu\", \"flask\"),   lnchar = 11,   out = paste0(tempfile(), \"_index.csv\"),   verbose = TRUE )"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of the ObsPack files (.txt) — obs_summary","text":"obs Path Obspack GLOBALview txt data categories character; default c(\"aircraft-pfp\", \"aircraft-insitu\", \"surface-insitu\", \"tower-insitu\", \"aircore\", \"surface-pfp\", \"shipboard-insitu\", \"flask\"). ideia ,file names include words, function identifies files words add columns. lnchar Integer; last nchar, default = 11. Path Obspack index output verbose Logical show information aslist Logical return list index summary","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of the ObsPack files (.txt) — obs_summary","text":"data.frame index obspack Globalview. data.frame index obspack Globalview.","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of the ObsPack files (.txt) — obs_summary","text":"","code":"{ if (FALSE) { # \\dontrun{ # Do not run obs <- system.file(\"data-raw\", package = \"rtorf\") index <- obs_summary(obs) } # } } { if (FALSE) { # \\dontrun{ # Do not run obs <- system.file(\"data-raw\", package = \"rtorf\") index <- obs_summary(obs) } # } }"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Obspack Table Summary — obs_table","title":"Obspack Table Summary — obs_table","text":"function reads obsPack directory providing summary columns: \"value\", \"time\", \"time_decimal\", \"latitude\" \"longitude\". summary made columns \"name\", \"sector\", \"site_name\", \"site_country\", \"type_altitude\", \"lab_1_abbr\" \"site_utc2lst\"","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obspack Table Summary — obs_table","text":"","code":"obs_table(   df,   cols = c(\"value\", \"time\", \"time_decimal\", \"latitude\", \"longitude\") )"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obspack Table Summary — obs_table","text":"df data.table cols String columns summarized.","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obspack Table Summary — obs_table","text":"data.frame index obspack.","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obspack Table Summary — obs_table","text":"","code":"{ # Do not run obs <- system.file(\"data-raw\", package = \"rtorf\") index <- obs_summary(obs) dt <- obs_read(index) dx <- obs_table(dt) } #> Number of files of index: 1 #>           sector     N #>           <char> <int> #> 1:         flask     1 #> 2: Total sectors     1 #> Detected 0 files with agl #> Detected 1 files without agl #> Searching flask... #> 1: ch4_aoa_aircraft-flask_19_allvalid.txt"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_trunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Trunc numbers with a desired number of decimals — obs_trunc","title":"Trunc numbers with a desired number of decimals — obs_trunc","text":"Trunc numbers specified number decimals.","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_trunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trunc numbers with a desired number of decimals — obs_trunc","text":"","code":"obs_trunc(n, dec)"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_trunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trunc numbers with a desired number of decimals — obs_trunc","text":"n Numeric  number dec Integer, number decimals","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_trunc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Trunc numbers with a desired number of decimals — obs_trunc","text":"source https://stackoverflow.com//47015304/2418532","code":""},{"path":[]},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_trunc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trunc numbers with a desired number of decimals — obs_trunc","text":"","code":"{ # in bash: # printf \"%07.4f\" 72.05785 # results in 72.0578 # but: formatC(72.05785, digits = 4, width = 8, format = \"f\", flag = \"0\") # results in \"072.0579\" # the goal is to obtain the same trunc number as using bash, then: formatC(obs_trunc(72.05785, 4),         digits = 4,         width = 8,         format = \"f\",         flag = \"0\") } #> [1] \"072.0578\""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_write_csvy.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates YAML and write data.frame — obs_write_csvy","title":"Generates YAML and write data.frame — obs_write_csvy","text":"Add YAML header info writes data.frame disk. YAML section includes notes str(dt).","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_write_csvy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates YAML and write data.frame — obs_write_csvy","text":"","code":"obs_write_csvy(   dt,   notes,   out = paste0(tempfile(), \".csvy\"),   sep = \",\",   nchar.max = 80,   ... )"},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_write_csvy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates YAML and write data.frame — obs_write_csvy","text":"dt data.table notes notes. outfile path. sep separator columns. Default \",\". nchar.max Max nchar str. ... extra data.table arguments","code":""},{"path":[]},{"path":"https://noaa-gml.github.io/rtorf/reference/obs_write_csvy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates YAML and write data.frame — obs_write_csvy","text":"","code":"{ df <- data.frame(a = rnorm(n = 10),                  time = Sys.time() + 1:10)  f <- paste0(tempfile(), \".csvy\") notes <- c(\"notes\",            \"more notes\") obs_write_csvy(dt = df, notes = notes, out = f) readLines(f) data.table::fread(f, h = TRUE) } #>               a                time #>           <num>              <POSc> #>  1: -0.55369938 2024-08-26 16:41:16 #>  2:  0.62898204 2024-08-26 16:41:17 #>  3:  2.06502490 2024-08-26 16:41:18 #>  4: -1.63098940 2024-08-26 16:41:19 #>  5:  0.51242695 2024-08-26 16:41:20 #>  6: -1.86301149 2024-08-26 16:41:21 #>  7: -0.52201251 2024-08-26 16:41:22 #>  8: -0.05260191 2024-08-26 16:41:23 #>  9:  0.54299634 2024-08-26 16:41:24 #> 10: -0.91407483 2024-08-26 16:41:25"},{"path":"https://noaa-gml.github.io/rtorf/reference/rtorf-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions in package rtorf. — rtorf-deprecated","title":"Deprecated functions in package rtorf. — rtorf-deprecated","text":"functions listed deprecated defunct   near future. possible, alternative functions similar   functionality also mentioned. Help pages deprecated functions   available help(\"-deprecated\"). transform integer character add zero left","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/rtorf-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions in package rtorf. — rtorf-deprecated","text":"","code":"obs_addzero(x, ...)"},{"path":"https://noaa-gml.github.io/rtorf/reference/rtorf-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated functions in package rtorf. — rtorf-deprecated","text":"x integer","code":""},{"path":[]},{"path":"https://noaa-gml.github.io/rtorf/reference/rtorf-deprecated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deprecated functions in package rtorf. — rtorf-deprecated","text":"","code":"{if (FALSE) { # \\dontrun{ #do not run } # } }"},{"path":"https://noaa-gml.github.io/rtorf/reference/rtorf-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rtorf: 'rtorf' Obspack GLOBALView+ — rtorf-package","title":"rtorf: 'rtorf' Obspack GLOBALView+ — rtorf-package","text":"Reads, process, plots CH4 ObsPack GLOBALView+ data NOAA perform different filters analyses.","code":""},{"path":[]},{"path":"https://noaa-gml.github.io/rtorf/reference/rtorf-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rtorf: 'rtorf' Obspack GLOBALView+ — rtorf-package","text":"Maintainer: Sergio Ibarra-Espinosa sergio.ibarra-espinosa@noaa.gov (ORCID) contributors: Lei Hu lei.hu@noaa.gov (ORCID) [contributor]","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/sr.html","id":null,"dir":"Reference","previous_headings":"","what":"Extacts n last characters — sr","title":"Extacts n last characters — sr","text":"file extension","code":""},{"path":"https://noaa-gml.github.io/rtorf/reference/sr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extacts n last characters — sr","text":"","code":"sr(x, n)"},{"path":"https://noaa-gml.github.io/rtorf/reference/sr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extacts n last characters — sr","text":"x character vector. n integer.","code":""},{"path":[]},{"path":"https://noaa-gml.github.io/rtorf/reference/sr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extacts n last characters — sr","text":"","code":"if (FALSE) { # \\dontrun{ # do not run } # }"}]
